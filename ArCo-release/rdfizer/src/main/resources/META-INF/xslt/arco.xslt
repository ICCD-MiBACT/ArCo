<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:arco-core="https://w3id.org/arco/ontology/core/"
	xmlns:arco-arco="https://w3id.org/arco/ontology/arco/"
	xmlns:arco-fn="https://w3id.org/arco/saxon-extension"
	xmlns:arco-catalogue="https://w3id.org/arco/ontology/catalogue/"
	xmlns:cis="http://dati.beniculturali.it/cis/"
	xmlns:clvapit="https://w3id.org/italia/onto/CLV/"
	xmlns:smapit="https://w3id.org/italia/onto/SM/"
	xmlns:arco-dd="https://w3id.org/arco/ontology/denotative-description/"
	xmlns:arco-cd="https://w3id.org/arco/ontology/context-description/"
	xmlns:arco-ce="https://w3id.org/arco/ontology/cultural-event/"
	xmlns:dcterms="http://purl.org/dc/terms/creator"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:pico="http://data.cochrane.org/ontologies/pico/"
	xmlns:fn="http://www.w3.org/2005/xpath-functions"
	xmlns:foaf="http://xmlns.com/foaf/0.1/"
	xmlns:frbr="http://purl.org/vocab/frbr/core#"
	xmlns:l0="https://w3id.org/italia/onto/l0/"
	xmlns:arco-location="https://w3id.org/arco/ontology/location/"
	xmlns:owl="http://www.w3.org/2002/07/owl#"
	xmlns:php="http://php.net/xsl"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
	xmlns:roapit="https://w3id.org/italia/onto/RO/"
	xmlns:tiapit="https://w3id.org/italia/onto/TI/"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:mu="https://w3id.org/italia/onto/MU/"
	xmlns:language="https://w3id.org/italia/onto/Language/"
	xmlns:ar-agentrole="https://w3id.org/arco/resource/AgentRole/"
	xmlns:ar-agent="https://w3id.org/arco/resource/Agent/"
	xmlns:ar-role="https://w3id.org/arco/resource/Role/"
	xmlns:ar-privacyReason="https://w3id.org/arco/resource/PrivacyReason/"
	xmlns:COV="https://w3id.org/italia/onto/COV/"
	xmlns:CPV="https://w3id.org/italia/onto/CPV/"
	xmlns:ar-archeologicalProperty="https://w3id.org/arco/resource/ArchaeologicalProperty/"
	xmlns:ar-TimeInterval="https://w3id.org/arco/resource/TimeInterval/"
	xmlns:ar-city="https://w3id.org/arco/resource/City/"
	xmlns:ar-geometry="https://w3id.org/arco/resource/Geometry/"
	xmlns:ar-event="https://w3id.org/arco/resource/Event/"
	xmlns:ar-country="https://w3id.org/arco/resource/Country/"
	xmlns:ar-timeIndexedTypedLocation="https://w3id.org/arco/resource/TimeIndexedTypedLocation/"
	xmlns:ar-feature="https://w3id.org/arco/resource/Feature/"
	xmlns:ar-timeIndexedRole="https://w3id.org/arco/resource/TimeIndexedRole/"
	xmlns:ar-catalogueRecordSI="https://w3id.org/arco/resource/CatalogueRecordSI/"
	xmlns:ar-detectionMethod="https://w3id.org/arco/resource/DetectionMethod/"
	xmlns:ar-interpretationCriterion="https://w3id.org/arco/resource/InterpretationCriterion/"
	xmlns:ar-bibliography="https://w3id.org/arco/resource/Bibliography/"
	xmlns:ar-culturalPropertyDefinition="https://w3id.org/arco/resource/CulturalPropertyDefinition/"
	xmlns:ar-legalSituation="https://w3id.org/arco/resource/LegalSituation/"
	xmlns:ar-province="https://w3id.org/arco/resource/Province/"
	xmlns:ar-culturalPropertySpecification="https://w3id.org/arco/resource/CulturalPropertySpecification/"
	xmlns:ar-addressArea="https://w3id.org/arco/resource/AddressArea/"
	xmlns:ar-designationInTime="https://w3id.org/arco/resource/DesignationInTime/"
	xmlns:ar-accessProfile="https://w3id.org/arco/resource/AccessProfile/"
	xmlns:ar-documentType="https://w3id.org/arco/resource/DocumentationType/"
	xmlns:ar-address="https://w3id.org/arco/resource/Address/"
	xmlns:ar-culturalPropertyType="https://w3id.org/arco/resource/CulturalPropertyType/"
	xmlns:ar-photograpyDocumentation="https://w3id.org/arco/resource/PhotographicDocumentation/"
	xmlns:ar-docutmentationType="https://w3id.org/arco/resource/DocumentationType/"
	xmlns:ar-dating="https://w3id.org/arco/resource/Dating/"
	xmlns:ar-archeologicalFieldSurvey="https://w3id.org/arco/resource/ArchaeologicalFieldSurvey/"
	xmlns:ar-region="https://w3id.org/arco/resource/Region/"
	xmlns:ar-catalogueRecordVersion="https://w3id.org/arco/resource/CatalogueRecordVersion/"
	xmlns:ar-HistoricOrArtisticProperty="https://w3id.org/arco/resource/HistoricOrArtisticProperty/"
	xmlns:ar-CulturalPropertyCataloguingCategory="https://w3id.org/arco/resource/CulturalPropertyCataloguingCategory/"
	xmlns:ar-RelatedWorkSituation="https://w3id.org/arco/resource/RelatedWorkSituation/"
	xmlns:ar-CulturalEntityTechnicalStatus="https://w3id.org/arco/resource/CulturalEntityTechnicalStatus/"
	xmlns:ar-Value="https://w3id.org/arco/resource/Value/"
	xmlns:ar-PreferredAuthorshipAttribution="https://w3id.org/arco/resource/PreferredAuthorshipAttribution/"
	xmlns:ar-CatalogueRecordOA="https://w3id.org/arco/resource/CatalogueRecordOA/"
	xmlns:ar-TechnicalCharacteristic="https://w3id.org/arco/resource/TechnicalCharacteristic/"
	xmlns:ar-Site="https://w3id.org/arco/resource/Site/"
	xmlns:ar-SiteType="https://w3id.org/arco/resource/SiteType/"
	xmlns:ar-ConservationStatus="https://w3id.org/arco/resource/ConservationStatus/"
	xmlns:ar-Subject="https://w3id.org/arco/resource/Subject/"
	xmlns:ar-SourceAndDocument="https://w3id.org/arco/resource/SourceAndDocument/"
	xmlns:ar-cis="https://w3id.org/arco/resource/CulturalInstituteOrSite/"
	xmlns:ar-SiteDefinition="https://w3id.org/arco/resource/SiteDefinition/"
	xmlns:ar-MeasurementCollection="https://w3id.org/arco/resource/MeasurementCollection/"
	xmlns:ar-CISNameInTime="https://w3id.org/arco/resource/CISNameInTime/"
	xmlns:ar-Measurement="https://w3id.org/arco/resource/Measurement/"

	xmlns:skos="http://www.w3.org/2004/02/skos/core#" version="1.0"
	exclude-result-prefixes="xsl php">
	<xsl:output method="xml" encoding="utf-8" indent="yes" />

	<xsl:template name="CamelCase">
		<xsl:param name="text" />
		<xsl:choose>
			<xsl:when test="contains($text,' ')">
				<xsl:call-template name="CamelCaseWord">
					<xsl:with-param name="text"
						select="substring-before($text,' ')" />
				</xsl:call-template>
				<xsl:text> </xsl:text>
				<xsl:call-template name="CamelCase">
					<xsl:with-param name="text"
						select="substring-after($text,' ')" />
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:call-template name="CamelCaseWord">
					<xsl:with-param name="text" select="$text" />
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>

	<xsl:template name="CamelCaseWord">
		<xsl:param name="text" />
		<xsl:value-of
			select="translate(substring($text,1,1),'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')" />
		<xsl:value-of
			select="translate(substring($text,2,string-length($text)-1),'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')" />
	</xsl:template>

	<xsl:param name="item" />

		<xsl:variable name="itemURI">
	<xsl:choose>
		<xsl:when test="record/metadata/schede/*/CD/NCT/NCTN">
		<xsl:choose>
			<xsl:when test="record/metadata/schede/*/RV/RVE/RVEL">
				<xsl:value-of
					select="concat(record/metadata/schede/*/CD/NCT/NCTR, record/metadata/schede/*/CD/NCT/NCTN, record/metadata/schede/*/CD/NCT/NCTS, '-', arco-fn:urify(normalize-space(record/metadata/schede/*/RV/RVE/RVEL)))" />
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of
					select="concat(record/metadata/schede/*/CD/NCT/NCTR, record/metadata/schede/*/CD/NCT/NCTN, record/metadata/schede/*/CD/NCT/NCTS)" />
			</xsl:otherwise>
		</xsl:choose>
		</xsl:when>
		<xsl:otherwise>
			<xsl:choose>
				<xsl:when test="record/metadata/schede/*/AC/ACC/ACCC">
					<xsl:value-of select="record/metadata/schede/*/AC/ACC/ACCC" />
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="record/metadata/schede/*/AC/ACC" />
				</xsl:otherwise>
			</xsl:choose>
		</xsl:otherwise>
	</xsl:choose>
	</xsl:variable>
	<!-- xsl:variable name="sheetType" select="record/metadata/schede/*/CD/TSK/text()"></xsl:variable -->
	<xsl:variable name="sheetVersion"
		select="record/metadata/schede/*/@version" />
	<xsl:variable name="sheetType"
		select="name(record/metadata/schede/*)" />
	<xsl:variable name="cp-name" select="''" />
	<xsl:param name="NS" />
	<!-- xsl:variable name="NS"
		select="'https://w3id.org/arco/resource/'" /-->
	<!-- xsl:import href="./prova.xsl" / -->

	<xsl:template match="/">

		<rdf:RDF>
			<!-- We firstly introduce the sheet. -->
			<rdf:Description>
				<xsl:attribute name="rdf:about">
                    <xsl:value-of
					select="concat($NS, 'CatalogueRecord', $sheetType, '/', $itemURI)" />
                </xsl:attribute>

				<rdf:type>
					<xsl:attribute name="rdf:resource">
                        <xsl:value-of
						select="concat('https://w3id.org/arco/ontology/catalogue/', 'CatalogueRecord', $sheetType)" />
                    </xsl:attribute>
				</rdf:type>
				<xsl:if test="not ($sheetType='AT') ">
					<xsl:if test="record/metadata/schede/*/OG/OGC/OGCT and (not(lower-case(normalize-space(record/metadata/schede/*/OG/OGC/OGCT))='bene semplice') and not(lower-case(normalize-space(record/metadata/schede/*/OG/OGC/OGCT))='bene complesso/bene composito - parte componente') and not(record/metadata/schede/AT/OG/OGC/OGCT))">
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                         		<xsl:value-of select="'https://w3id.org/arco/ontology/catalogue/ComplexCPCatalogueRecord'" />
                    		</xsl:attribute>
						</rdf:type>
					</xsl:if>
				</xsl:if>
				<rdfs:label xml:lang="en">
					<xsl:value-of
						select="concat('Catalogue Record n: ', $itemURI)" />
				</rdfs:label>
				<rdfs:label xml:lang="it">
					<xsl:value-of
						select="concat('Scheda catalografica n: ', $itemURI)" />
				</rdfs:label>
				<xsl:if test="not ($sheetType='AT') ">
					<xsl:if test="record/metadata/schede/*/OG/OGC/OGCS">
						<arco-core:note>
                         	<xsl:value-of select="record/metadata/schede/*/OG/OGC/OGCS" />
                    	</arco-core:note>
					</xsl:if>
				</xsl:if>
				<!-- hasCataloguingLevel (record/metadata/schede/*/CD/LIR) -->
				<xsl:for-each select="record/metadata/schede/*/CD/LIR">
					<arco-catalogue:hasCataloguingLevel>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="concat('https://w3id.org/arco/ontology/catalogue/', upper-case(arco-fn:urify(.)))" />
                        </xsl:attribute>
					</arco-catalogue:hasCataloguingLevel>
				</xsl:for-each>
				<!-- identifier:sheetIdentifier - concat of NCTR + NCTN + NCTS + - +RVEL. 
					NCTR+NCTN+NCTS comes from record/metadata/schede/*/CD/NCT RVEL comes from 
					record/metadata/schede/*/RV/RVE/RVEL (optional) -->
				<xsl:if test="record/metadata/schede/*/CD/NCT/NCTN">
					<arco-catalogue:catalogueRecordIdentifier>
						<xsl:choose>
							<xsl:when test="record/metadata/schede/*/RV/RVE/RVEL">
								<xsl:value-of
									select="concat(record/metadata/schede/*/CD/NCT/NCTR, record/metadata/schede/*/CD/NCT/NCTN, record/metadata/schede/*/CD/NCT/NCTS, '-', record/metadata/schede/*/RV/RVE/RVEL)" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of
									select="concat(record/metadata/schede/*/CD/NCT/NCTR, record/metadata/schede/*/CD/NCT/NCTN, record/metadata/schede/*/CD/NCT/NCTS)" />
							</xsl:otherwise>
						</xsl:choose>
					</arco-catalogue:catalogueRecordIdentifier>
				</xsl:if>
				<!-- proprietà per avere sempre un collegamento col nome del file xml 
					"ICCD..." -->
				<arco-catalogue:systemRecordCode>
					<xsl:value-of select="$item" />
				</arco-catalogue:systemRecordCode>
				<xsl:for-each select="record/metadata/schede/*/RV/RSP">
					<arco-catalogue:deletedICCDIdentifier>
						<xsl:value-of select="." />
					</arco-catalogue:deletedICCDIdentifier>
				</xsl:for-each>
				<xsl:if test="not ($sheetType='A' or $sheetType='PG' and ($sheetVersion='2.00' or $sheetVersion='2.00_ICCD0' or $sheetVersion='1.00' or $sheetVersion='1.00_ICCD0'))">
					<xsl:for-each select="record/metadata/schede/*/RV/RVE/RVES">
						<arco-catalogue:deletedICCDIdentifier>
							<xsl:value-of select="." />
						</arco-catalogue:deletedICCDIdentifier>
					</xsl:for-each>
				</xsl:if>
				<!-- alternative identifier (AC/ACC) -->
				<xsl:if test="record/metadata/schede/*/AC/ACC">
					<xsl:for-each select="record/metadata/schede/*/AC/ACC">
						<arco-catalogue:hasAlternativeIdentifier>
							<xsl:attribute name="rdf:resource">
	                				<xsl:value-of
								select="concat($NS, 'AlternativeIdentifier/', $itemURI, '-', position())" />
	                			</xsl:attribute>
						</arco-catalogue:hasAlternativeIdentifier>
					</xsl:for-each>
				</xsl:if>
				<!-- access profile -->
				<xsl:if test="record/metadata/schede/*/AD/ADS">
					<arco-catalogue:hasAccessProfile>
						<xsl:attribute name="rdf:resource">
	                		<xsl:value-of
							select="concat($NS, 'AccessProfile/', $itemURI, '-', arco-fn:urify(normalize-space(record/metadata/schede/*/AD/ADS/ADSP)))" />
	                	</xsl:attribute>
					</arco-catalogue:hasAccessProfile>
				</xsl:if>
				<!-- international identifier -->
				<xsl:if
					test="record/metadata/schede/*/AC/ACI and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AC/ACI)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AC/ACI)), 'n.r')))">
					<arco-catalogue:internationalIdentifier>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/AC/ACI)" />
					</arco-catalogue:internationalIdentifier>
				</xsl:if>
				<xsl:if
					test="record/metadata/schede/*/AC/ACE and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AC/ACE)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AC/ACE)), 'n.r')))">
					<l0:identifier>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/AC/ACE)" />
					</l0:identifier>
				</xsl:if>
				<xsl:if
					test="record/metadata/schede/*/AC/ACO and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AC/ACO)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AC/ACO)), 'n.r')))">
					<l0:identifier>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/AC/ACO)" />
					</l0:identifier>
				</xsl:if>
				<xsl:if
					test="record/metadata/schede/*/AC/ACZ and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AC/ACZ)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AC/ACZ)), 'n.r')))">
					<arco-arco:containerSequence>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/AC/ACZ)" />
					</arco-arco:containerSequence>
				</xsl:if>
				<xsl:if
					test="record/metadata/schede/*/AC/ACJ and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AC/ACJ)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AC/ACJ)), 'n.r')))">
					<l0:identifier>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/AC/ACJ)" />
					</l0:identifier>
				</xsl:if>
				<xsl:if
					test="record/metadata/schede/*/AC/ACN and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AC/ACN)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AC/ACN)), 'n.r')))">
					<arco-arco:previousIdentifier>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/AC/ACN)" />
					</arco-arco:previousIdentifier>
				</xsl:if>
				<xsl:if
					test="record/metadata/schede/*/AC/ACK and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AC/ACK)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AC/ACK)), 'n.r')))">
					<l0:identifier>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/AC/ACK)" />
					</l0:identifier>
				</xsl:if>
				<xsl:if test="record/metadata/schede/*/CM/CMP">
					<arco-catalogue:hasCatalogueRecordVersion>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="concat($NS, 'CatalogueRecordVersion/', $itemURI, '-compilation')" />
                        </xsl:attribute>
					</arco-catalogue:hasCatalogueRecordVersion>
				</xsl:if>
				<xsl:if test="record/metadata/schede/*/CM/RVM">
					<arco-catalogue:hasCatalogueRecordVersion>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="concat($NS, 'CatalogueRecordVersion/', $itemURI, '-rvm')" />
                        </xsl:attribute>
					</arco-catalogue:hasCatalogueRecordVersion>
				</xsl:if>
				<xsl:for-each select="record/metadata/schede/*/CM/AGG">
					<arco-catalogue:hasCatalogueRecordVersion>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="concat($NS, 'CatalogueRecordVersion/', $itemURI, '-agg-', position())" />
                        </xsl:attribute>
					</arco-catalogue:hasCatalogueRecordVersion>
				</xsl:for-each>
				<xsl:if test="record/metadata/schede/*/AN/OSS">
					<arco-core:note>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/AN/OSS)" />
					</arco-core:note>
				</xsl:if>
				<!-- A 2.00 -->
				<xsl:if
					test="record/metadata/schede/*/DO/IGM/IGMN or record/metadata/schede/*/DO/IGM/IGMD">
					<arco-core:note>
						<xsl:choose>
							<xsl:when
								test="record/metadata/schede/*/DO/IGM/IGMN and record/metadata/schede/*/DO/IGM/IGMD">
								<xsl:value-of
									select="concat(normalize-space(record/metadata/schede/*/DO/IGM/IGMN), ' | ', normalize-space(record/metadata/schede/*/DO/IGM/IGMD))" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of
									select="concat(normalize-space(record/metadata/schede/*/DO/IGM/IGMN), normalize-space(record/metadata/schede/*/DO/IGM/IGMD))" />
							</xsl:otherwise>
						</xsl:choose>
					</arco-core:note>
				</xsl:if>
				<xsl:if test="record/metadata/schede/*/AN/RDP">
					<arco-catalogue:recoveredData>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/AN/RDP)" />
					</arco-catalogue:recoveredData>
				</xsl:if>
				<xsl:for-each select="record/metadata/schede/*/DR/ROC">
					<xsl:if test="record/metadata/schede/*/DR/ROC/ROCC">
						<arco-catalogue:recoveredData>
							<xsl:value-of
								select="concat('ROCC: ', normalize-space(record/metadata/schede/*/DR/ROC/ROCC))" />
						</arco-catalogue:recoveredData>
					</xsl:if>
					<xsl:if test="record/metadata/schede/*/DR/ROC/ROCI">
						<arco-catalogue:recoveredData>
							<xsl:value-of
								select="concat('ROCI: ', normalize-space(record/metadata/schede/*/DR/ROC/ROCI))" />
						</arco-catalogue:recoveredData>
					</xsl:if>
				</xsl:for-each>
				<xsl:if test="record/metadata/schede/*/DO/VDS/VDST">
					<arco-catalogue:recoveredData>
						<xsl:value-of
							select="concat('VDST: ', normalize-space(record/metadata/schede/*/DO/VDS/VDST))" />
					</arco-catalogue:recoveredData>
				</xsl:if>
				<xsl:if test="record/metadata/schede/*/DO/VDS/VDSI">
					<arco-catalogue:recoveredData>
						<xsl:value-of
							select="concat('VDSI: ', normalize-space(record/metadata/schede/*/DO/VDS/VDSI))" />
					</arco-catalogue:recoveredData>
				</xsl:if>
				<xsl:if test="record/metadata/schede/*/DO/VDS/VDSP">
					<arco-catalogue:recoveredData>
						<xsl:value-of
							select="concat('VDSP: ', normalize-space(record/metadata/schede/*/DO/VDS/VDSP))" />
					</arco-catalogue:recoveredData>
				</xsl:if>
			</rdf:Description>
			<!-- This block introduces the triples about the sheet versions. I.e. 
				sub-elements of record/metadata/schede/*/CM -->
			<xsl:if test="record/metadata/schede/*/CM/CMP">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS, 'CatalogueRecordVersion/', $itemURI, '-compilation')" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/catalogue/CatalogueRecordVersion'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="concat(record/metadata/schede/*/CM/CMP/@hint, ' - ', normalize-space(record/metadata/schede/*/CM/CMP))" />
					</rdfs:label>
					<arco-catalogue:isCatalogueRecordVersionOf>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="concat($NS, 'CatalogueRecord', $sheetType, '/', $itemURI)" />
                        </xsl:attribute>
					</arco-catalogue:isCatalogueRecordVersionOf>
					<xsl:for-each
						select="record/metadata/schede/*/CM/CMP/CMPN">
						<xsl:if
							test=". and (not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r')))">
							<arco-catalogue:hasCatalogueRecordVersionRiT>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="concat($NS, 'TimeIndexedRole/', $itemURI, '-compilation-', arco-fn:arcofy(.))" />
	                            </xsl:attribute>
							</arco-catalogue:hasCatalogueRecordVersionRiT>
							<arco-catalogue:hasResponsibleResearchAndCompilation>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                            </xsl:attribute>
							</arco-catalogue:hasResponsibleResearchAndCompilation>
						</xsl:if>
					</xsl:for-each>
					<xsl:if
						test="record/metadata/schede/*/CM/CMP/CMPD and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CM/CMP/CMPD)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CM/CMP/CMPD)), 'n.r')))">
						<arco-catalogue:editedAtTime>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(record/metadata/schede/*/CM/CMP/CMPD)))" />
                            </xsl:attribute>
						</arco-catalogue:editedAtTime>
					</xsl:if>
					<!-- Referente verifica scientifica -->
					<xsl:for-each select="record/metadata/schede/*/CM/RSR">
						<xsl:if
							test=". and (not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r')))">
							<arco-catalogue:hasCatalogueRecordVersionRiT>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="concat($NS, 'TimeIndexedRole/', $itemURI, '-', arco-fn:arcofy(concat(./@hint, '-', .)))" />
	                            </xsl:attribute>
							</arco-catalogue:hasCatalogueRecordVersionRiT>
							<arco-catalogue:hasScientificDirector>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                            </xsl:attribute>
							</arco-catalogue:hasScientificDirector>
						</xsl:if>
					</xsl:for-each>
					<!-- Funzionario responsabile -->
					<xsl:for-each select="record/metadata/schede/*/CM/FUR">
						<xsl:if
							test=". and (not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r')))">
							<arco-catalogue:hasCatalogueRecordVersionRiT>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="concat($NS, 'TimeIndexedRole/', $itemURI, '-', arco-fn:arcofy(concat(./@hint, '-', .)))" />
	                            </xsl:attribute>
							</arco-catalogue:hasCatalogueRecordVersionRiT>
							<arco-catalogue:hasOfficialInCharge>
								<xsl:attribute name="rdf:resource">	
		                                <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
		                            </xsl:attribute>
							</arco-catalogue:hasOfficialInCharge>
						</xsl:if>
					</xsl:for-each>
				</rdf:Description>
			</xsl:if>
			<!-- This block introduces the triples about the sheet versions for RVM. 
				I.e. sub-elements of record/metadata/schede/*/RVM -->
			<xsl:if test="record/metadata/schede/*/CM/RVM">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS, 'CatalogueRecordVersion/', $itemURI, '-rvm')" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/catalogue/CatalogueRecordVersion'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="concat(record/metadata/schede/*/CM/RVM/@hint, ' - ', normalize-space(record/metadata/schede/*/CM/RVM))" />
					</rdfs:label>
					<arco-catalogue:isCatalogueRecordVersionOf>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="concat($NS, 'CatalogueRecord', $sheetType, '/', $itemURI)" />
                        </xsl:attribute>
					</arco-catalogue:isCatalogueRecordVersionOf>
					<xsl:if test="record/metadata/schede/*/CM/RVM/RVMN">
						<arco-catalogue:hasCatalogueRecordVersionRiT>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'TimeIndexedRole/', $itemURI, '-rvm-', arco-fn:arcofy(record/metadata/schede/*/CM/RVM/RVMN))" />
                            </xsl:attribute>
						</arco-catalogue:hasCatalogueRecordVersionRiT>
						<arco-catalogue:hasDigitalTranscriptionOperator>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(record/metadata/schede/*/CM/RVM/RVMN))" />
                            </xsl:attribute>
						</arco-catalogue:hasDigitalTranscriptionOperator>
					</xsl:if>
					<xsl:if test="record/metadata/schede/*/CM/RVM/RVME">
						<arco-catalogue:hasCatalogueRecordVersionRiT>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'TimeIndexedRole/', $itemURI, '-rvm-', arco-fn:arcofy(record/metadata/schede/*/CM/RVM/RVME))" />
                            </xsl:attribute>
						</arco-catalogue:hasCatalogueRecordVersionRiT>
						<arco-catalogue:hasDigitalTranscriptionResponsibleAgent>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(record/metadata/schede/*/CM/RVM/RVME))" />
                            </xsl:attribute>
						</arco-catalogue:hasDigitalTranscriptionResponsibleAgent>
					</xsl:if>
					<xsl:if
						test="record/metadata/schede/*/CM/RVM/RVMD and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CM/RVM/RVMD)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CM/RVM/RVMD)), 'n.r')))">
						<arco-catalogue:editedAtTime>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(record/metadata/schede/*/CM/RVM/RVMD)))" />
                            </xsl:attribute>
						</arco-catalogue:editedAtTime>
					</xsl:if>
					<!-- Referente verifica scientifica -->
					<xsl:for-each select="record/metadata/schede/*/CM/RSR">
						<xsl:if
							test=". and (not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r')))">
							<arco-catalogue:hasCatalogueRecordVersionRiT>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="concat($NS, 'TimeIndexedRole/', $itemURI, '-', arco-fn:arcofy(concat(./@hint, '-', .)))" />
	                            </xsl:attribute>
							</arco-catalogue:hasCatalogueRecordVersionRiT>
						</xsl:if>
					</xsl:for-each>
					<!-- Funzionario responsabile -->
					<xsl:for-each select="record/metadata/schede/*/CM/FUR">
						<xsl:if
							test=". and (not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r')))">
							<arco-catalogue:hasCatalogueRecordVersionRiT>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="concat($NS, 'TimeIndexedRole/', $itemURI, '-', arco-fn:arcofy(concat(./@hint, '-', .)))" />
	                            </xsl:attribute>
							</arco-catalogue:hasCatalogueRecordVersionRiT>
							<arco-catalogue:hasOfficialInCharge>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                            </xsl:attribute>
							</arco-catalogue:hasOfficialInCharge>
						</xsl:if>
					</xsl:for-each>
				</rdf:Description>
			</xsl:if>
			<!-- This block introduces the triples about the sheet versions for AGG. 
				I.e. sub-elements of record/metadata/schede/*/AGG -->
			<xsl:for-each select="record/metadata/schede/*/CM/AGG">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS, 'CatalogueRecordVersion/', $itemURI, '-agg-', position())" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/catalogue/CatalogueRecordVersion'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="concat(./@hint, ' - ', normalize-space(.))" />
					</rdfs:label>
					<arco-catalogue:isCatalogueRecordVersionOf>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="concat($NS, 'CatalogueRecord', $sheetType, '/', $itemURI)" />
                        </xsl:attribute>
					</arco-catalogue:isCatalogueRecordVersionOf>
					<xsl:for-each select="./AGGN">
						<xsl:if test=".">
							<arco-catalogue:hasCatalogueRecordVersionRiT>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="concat($NS, 'TimeIndexedRole/', $itemURI, '-agg-', position(), '-', arco-fn:arcofy(.))" />
	                            </xsl:attribute>
							</arco-catalogue:hasCatalogueRecordVersionRiT>
							<arco-catalogue:hasUpdateResponsibleResearchAndCompilation>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                            </xsl:attribute>
							</arco-catalogue:hasUpdateResponsibleResearchAndCompilation>
						</xsl:if>
					</xsl:for-each>
					<xsl:for-each select="./AGGR">
						<xsl:if test=".">
							<arco-catalogue:hasCatalogueRecordVersionRiT>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="concat($NS, 'TimeIndexedRole/', $itemURI, '-agg-', position(), '-', arco-fn:arcofy(normalize-space(.)))" />
	                            </xsl:attribute>
							</arco-catalogue:hasCatalogueRecordVersionRiT>
							<arco-catalogue:hasUpdateScientificRevisor>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                            </xsl:attribute>
							</arco-catalogue:hasUpdateScientificRevisor>
						</xsl:if>
					</xsl:for-each>
					<xsl:for-each select="./AGGE">
						<xsl:if test=".">
							<arco-catalogue:hasCatalogueRecordVersionRiT>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="concat($NS, 'TimeIndexedRole/', $itemURI, '-agg-', position(), '-', arco-fn:arcofy(.))" />
	                            </xsl:attribute>
							</arco-catalogue:hasCatalogueRecordVersionRiT>
							<arco-catalogue:hasUpdateResponsibleAgent>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                            </xsl:attribute>
							</arco-catalogue:hasUpdateResponsibleAgent>
						</xsl:if>
					</xsl:for-each>
					<xsl:if
						test="./AGGD and not(lower-case(normalize-space(./AGGD))='nr' or lower-case(normalize-space(./AGGD))='n.r.' or lower-case(normalize-space(./AGGD))='nr (recupero pregresso)')">
						<arco-catalogue:editedAtTime>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./AGGD)))" />
                            </xsl:attribute>
						</arco-catalogue:editedAtTime>
					</xsl:if>
					<!-- Funzionario responsabile -->
					<xsl:for-each select="./AGGF">
						<xsl:if
							test=". and not(lower-case(normalize-space(.))='nr' or lower-case(normalize-space(.))='n.r.' or lower-case(normalize-space(.))='nr (recupero pregresso)')">
							<arco-catalogue:hasCatalogueRecordVersionRiT>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="concat($NS, 'TimeIndexedRole/', $itemURI, '-', arco-fn:arcofy(concat(./@hint, '-', .)))" />
	                            </xsl:attribute>
							</arco-catalogue:hasCatalogueRecordVersionRiT>
							<arco-catalogue:hasUpdateOfficialInCharge>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                            </xsl:attribute>
							</arco-catalogue:hasUpdateOfficialInCharge>
						</xsl:if>
					</xsl:for-each>
				</rdf:Description>
				<!-- Time interval -->
				<xsl:if
					test="./AGGD and not(lower-case(normalize-space(./AGGD))='nr' or lower-case(normalize-space(./AGGD))='n.r.' or lower-case(normalize-space(./AGGD))='nr (recupero pregresso)')">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:value-of
							select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./AGGD)))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/italia/onto/TI/TimeInterval'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./AGGD)" />
						</rdfs:label>
						<tiapit:time>
							<xsl:value-of select="normalize-space(./AGGD)" />
						</tiapit:time>
					</rdf:Description>
				</xsl:if>
				<!-- Participant role AGGN -->
				<xsl:for-each select="./AGGN">
					<xsl:if test=".">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                            <xsl:value-of
								select="concat($NS, 'TimeIndexedRole/', $itemURI, '-agg-', position(), '-', arco-fn:arcofy(.))" />
	                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/TimeIndexedRole'" />
	                            </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Responsabile ricerca e redazione di aggiornamento: ', normalize-space(.))" />
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Update responsible compilation: ', normalize-space(.))" />
							</rdfs:label>
							<roapit:withRole>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="concat($NS, 'Role/UpdateResponsibleCompilation')" />
	                            </xsl:attribute>
							</roapit:withRole>
							<roapit:isRoleInTimeOf>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                            </xsl:attribute>
							</roapit:isRoleInTimeOf>
						</rdf:Description>
						<!-- Role -->
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                            <xsl:value-of
								select="concat($NS, 'Role/UpdateResponsibleCompilation')" />
	                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/Role'" />
	                            </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="'Update responsible research and compilation'" />
							</rdfs:label>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="'Responsabile di ricerca e redazione di aggiornamento'" />
							</rdfs:label>
						</rdf:Description>
						<!-- Agent -->
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                            <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
	                            </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(.)" />
							</rdfs:label>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
				<!-- Participant role - AGGE -->
				<xsl:for-each select="./AGGE">
					<xsl:if test=".">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                            <xsl:value-of
								select="concat($NS, 'TimeIndexedRole/', $itemURI, '-agg-', position(), '-', arco-fn:arcofy(.))" />
	                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/TimeIndexedRole'" />
	                            </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Ente responsabile di aggiornamento ', normalize-space(.))" />
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Update responsible agency ', normalize-space(.))" />
							</rdfs:label>
							<roapit:withRole>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="concat($NS, 'Role/UpdateResponsible')" />
	                            </xsl:attribute>
							</roapit:withRole>
							<roapit:isRoleInTimeOf>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                            </xsl:attribute>
							</roapit:isRoleInTimeOf>
						</rdf:Description>
						<!-- Role -->
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                            <xsl:value-of
								select="concat($NS, 'Role/UpdateResponsible')" />
	                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/Role'" />
	                            </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="en">
								<xsl:value-of select="'Update responsible'" />
							</rdfs:label>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="'Responsabile di aggiornamento'" />
							</rdfs:label>
						</rdf:Description>
						<!-- Agent -->
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                            <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
	                            </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(.)" />
							</rdfs:label>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
				<!-- Participant role - AGGR -->
				<xsl:for-each select="./AGGR">
					<xsl:if test=".">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                            <xsl:value-of
								select="concat($NS, 'TimeIndexedRole/', $itemURI, '-agg-', position(), '-', arco-fn:arcofy(normalize-space(.)))" />
	                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/TimeIndexedRole'" />
	                            </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Referente scientifico di aggiornamento ', normalize-space(.))" />
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Update scientific revisor ', normalize-space(.))" />
							</rdfs:label>
							<roapit:withRole>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="concat($NS, 'Role/UpdateScientificRevisor')" />
	                            </xsl:attribute>
							</roapit:withRole>
							<roapit:isRoleInTimeOf>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                            </xsl:attribute>
							</roapit:isRoleInTimeOf>
						</rdf:Description>
						<!-- Role -->
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                            <xsl:value-of
								select="concat($NS, 'Role/UpdateScientificRevisor')" />
	                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/Role'" />
	                            </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="en">
								<xsl:value-of select="'Update scientific revisor'" />
							</rdfs:label>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="'Referente verifica scientifica'" />
							</rdfs:label>
						</rdf:Description>
						<!-- Agent -->
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                            <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
	                            </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(.)" />
							</rdfs:label>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:for-each>
			<!-- Referente verifica scientifica -->
			<xsl:for-each select="record/metadata/schede/*/CM/RSR">
				<xsl:if
					test=". and (not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	                        <xsl:value-of
							select="concat($NS, 'TimeIndexedRole/', $itemURI, '-', arco-fn:arcofy(concat(./@hint, '-', .)))" />
	                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="'https://w3id.org/italia/onto/RO/TimeIndexedRole'" />
	                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat(./@hint, ': ', normalize-space(.))" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Scientific director', ': ', normalize-space(.))" />
						</rdfs:label>
						<roapit:withRole>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="concat($NS, 'Role/ScientificDirector')" />
	                        </xsl:attribute>
						</roapit:withRole>
						<roapit:isRoleInTimeOf>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                        </xsl:attribute>
						</roapit:isRoleInTimeOf>
					</rdf:Description>
					<!-- Agent: Referente verifica scientifica -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	                        <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Agent'" />
	                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(.)" />
						</rdfs:label>
					</rdf:Description>
					<!-- Role: Referente verifica scientifica -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	                        <xsl:value-of
							select="concat($NS, 'Role/ScientificDirector')" />
	                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="'https://w3id.org/italia/onto/RO/Role'" />
	                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of select="normalize-space(./@hint)" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of select="'Scientific Director'" />
						</rdfs:label>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- Funzionario responsabile -->
			<xsl:for-each select="record/metadata/schede/*/CM/FUR">
				<xsl:if
					test="(not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	                        <xsl:value-of
							select="concat($NS, 'TimeIndexedRole/', $itemURI, '-', arco-fn:arcofy(concat(./@hint, '-', .)))" />
	                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="'https://w3id.org/italia/onto/RO/TimeIndexedRole'" />
	                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat(./@hint, ': ', normalize-space(.))" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Official in charge', ': ', normalize-space(.))" />
						</rdfs:label>
						<roapit:withRole>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="concat($NS, 'Role/OfficialInCharge')" />
	                        </xsl:attribute>
						</roapit:withRole>
						<roapit:isRoleInTimeOf>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                        </xsl:attribute>
						</roapit:isRoleInTimeOf>
					</rdf:Description>
					<!-- Agent: Funzionario responsabile -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	                        <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Agent'" />
	                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(.)" />
						</rdfs:label>
					</rdf:Description>
					<!-- Role: Funzionario responsabile -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	                        <xsl:value-of
							select="concat($NS, 'Role/OfficialInCharge')" />
	                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="'https://w3id.org/italia/onto/RO/Role'" />
	                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of select="normalize-space(./@hint)" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of select="'Official in charge'" />
						</rdfs:label>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- Funzionario responsabile - AGGF -->
			<xsl:for-each
				select="record/metadata/schede/*/CM/AGG/AGGF">
				<xsl:if
					test=". and not(lower-case(normalize-space(.))='nr' or lower-case(normalize-space(.))='n.r.' or lower-case(normalize-space(.))='nr (recupero pregresso)')">

					<rdf:Description>
						<xsl:attribute name="rdf:about">
                        <xsl:value-of
							select="concat($NS, 'TimeIndexedRole/', $itemURI, '-', arco-fn:arcofy(concat(./@hint, '-', .)))" />
                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="'https://w3id.org/italia/onto/RO/TimeIndexedRole'" />
                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat(./AGGF/@hint, ' di aggiornamento: ', normalize-space(.))" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Update official in charge', ': ', normalize-space(.))" />
						</rdfs:label>
						<roapit:withRole>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="concat($NS, 'Role/OfficialInCharge')" />
                        </xsl:attribute>
						</roapit:withRole>
						<roapit:isRoleInTimeOf>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
                        </xsl:attribute>
						</roapit:isRoleInTimeOf>
					</rdf:Description>
					<!-- Agent: Funzionario responsabile AGGF -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                        <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Agent'" />
                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(.)" />
						</rdfs:label>
					</rdf:Description>

					<!-- Role funzionario responsabile -->

					<rdf:Description>
						<xsl:attribute name="rdf:about">
	                        <xsl:value-of
							select="concat($NS, 'Role/OfficialInCharge')" />
	                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="'https://w3id.org/italia/onto/RO/Role'" />
	                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of select="normalize-space(./@hint)" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of select="'Official in charge'" />
						</rdfs:label>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- Version time interval - CMD -->
			<xsl:if
				test="record/metadata/schede/*/CM/CMP/CMPD and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CM/CMP/CMPD)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CM/CMP/CMPD)), 'n.r')))">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(record/metadata/schede/*/CM/CMP/CMPD)))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/italia/onto/TI/TimeInterval'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/CM/CMP/CMPD)" />
					</rdfs:label>
					<tiapit:time>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/CM/CMP/CMPD)" />
					</tiapit:time>
				</rdf:Description>
			</xsl:if>
			<!-- Version time interval - RVM -->
			<xsl:if
				test="record/metadata/schede/*/CM/RVM/RVMD and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CM/RVM/RVMD)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CM/RVM/RVMD)), 'n.r')))">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(record/metadata/schede/*/CM/RVM/RVMD)))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/italia/onto/TI/TimeInterval'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/CM/RVM/RVMD)" />
					</rdfs:label>
					<tiapit:time>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/CM/RVM/RVMD)" />
					</tiapit:time>
				</rdf:Description>
			</xsl:if>
			<!-- Participant role - Compilation -->
			<xsl:for-each
				select="record/metadata/schede/*/CM/CMP/CMPN">
				<xsl:if
					test=". and (not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	                        <xsl:value-of
							select="concat($NS, 'TimeIndexedRole/', $itemURI, '-compilation-', arco-fn:arcofy(.))" />
	                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="'https://w3id.org/italia/onto/RO/TimeIndexedRole'" />
	                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Compilation by ', normalize-space(.))" />
						</rdfs:label>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Compilazione da ', normalize-space(.))" />
						</rdfs:label>
						<roapit:withRole>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="concat($NS, 'Role/ResponsibleCompilation')" />
	                        </xsl:attribute>
						</roapit:withRole>
						<roapit:isRoleInTimeOf>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                        </xsl:attribute>
						</roapit:isRoleInTimeOf>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- responsible research and compilation Agent -->
			<xsl:for-each
				select="record/metadata/schede/*/CM/CMP/CMPN">
				<xsl:if
					test=". and (not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	                        <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Agent'" />
	                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(.)" />
						</rdfs:label>
					</rdf:Description>
					<!-- responsible research and compilation role -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	                        <xsl:value-of
							select="concat($NS, 'Role/ResponsibleCompilation')" />
	                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="'https://w3id.org/italia/onto/RO/Role'" />
	                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="'Responsible research and compilation'" />
						</rdfs:label>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="'Responsabile ricerca e redazione'" />
						</rdfs:label>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- Participant role - RVME -->
			<xsl:if
				test="record/metadata/schede/*/CM/RVM/RVME and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CM/RVM/RVME)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CM/RVM/RVME)), 'n.r')))">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS, 'TimeIndexedRole/', $itemURI, '-rvm-', arco-fn:arcofy(record/metadata/schede/*/CM/RVM/RVME))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/italia/onto/RO/TimeIndexedRole'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat(record/metadata/schede/*/CM/RVM/@hint, ' da ', normalize-space(record/metadata/schede/*/CM/RVM/RVME))" />
					</rdfs:label>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Digital transcription', ' by ', normalize-space(record/metadata/schede/*/CM/RVM/RVME))" />
					</rdfs:label>
					<roapit:withRole>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="concat($NS, 'Role/DigitalTranscriptionResponsibleAgent')" />
                        </xsl:attribute>
					</roapit:withRole>
					<roapit:isRoleInTimeOf>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(record/metadata/schede/*/CM/RVM/RVME))" />
                        </xsl:attribute>
					</roapit:isRoleInTimeOf>
				</rdf:Description>
				<!-- digital transcription responsible agent -->
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS, 'Agent/', arco-fn:arcofy(record/metadata/schede/*/CM/RVM/RVME))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/italia/onto/l0/Agent'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/CM/RVM/RVME)" />
					</rdfs:label>
				</rdf:Description>
				<!-- digital transcription responsible agent role -->
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS, 'Role/DigitalTranscriptionResponsibleAgent')" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/italia/onto/RO/Role'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="'Digital transcription responsible agent'" />
					</rdfs:label>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="'Responsabile della trascrizione per informatizzazione'" />
					</rdfs:label>
				</rdf:Description>
			</xsl:if>
			<!-- Participant role - RVMN -->
			<xsl:if
				test="record/metadata/schede/*/CM/RVM/RVMN and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CM/RVM/RVMN)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CM/RVM/RVMN)), 'n.r')))">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS, 'TimeIndexedRole/', $itemURI, '-rvm-', arco-fn:arcofy(record/metadata/schede/*/CM/RVM/RVMN))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/italia/onto/RO/TimeIndexedRole'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat(record/metadata/schede/*/CM/RVM/@hint, ' da ', normalize-space(record/metadata/schede/*/CM/RVM/RVMN))" />
					</rdfs:label>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Digital transcription', ' by ', normalize-space(record/metadata/schede/*/CM/RVM/RVMN))" />
					</rdfs:label>
					<roapit:withRole>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="concat($NS, 'Role/DigitalTranscriptionOperator')" />
                        </xsl:attribute>
					</roapit:withRole>
					<roapit:isRoleInTimeOf>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(record/metadata/schede/*/CM/RVM/RVMN))" />
                        </xsl:attribute>
					</roapit:isRoleInTimeOf>
				</rdf:Description>
				<!-- digital transcription agent -->
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS, 'Agent/', arco-fn:arcofy(record/metadata/schede/*/CM/RVM/RVMN))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/italia/onto/l0/Agent'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/CM/RVM/RVMN)" />
					</rdfs:label>
				</rdf:Description>
				<!-- digital transcription operator role -->
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS, 'Role/DigitalTranscriptionOperator')" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/italia/onto/RO/Role'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="'Digital transcription operator'" />
					</rdfs:label>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="'Operatore della trascrizione per informatizzazione'" />
					</rdfs:label>
				</rdf:Description>
			</xsl:if>



			<!-- We then introduce the cultural entity described by the sheet. -->
			<rdf:Description>
				<xsl:attribute name="rdf:about">
                    <xsl:value-of
					select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
                </xsl:attribute>
				<rdf:type>
					<xsl:attribute name="rdf:resource">
                        <xsl:value-of
						select="arco-fn:getPropertyType($sheetType)" />
                    </xsl:attribute>
				</rdf:type>
				<!-- rdf:type of cultural property -->
				<rdf:type>
					<xsl:attribute name="rdf:resource">
                        <xsl:value-of
						select="arco-fn:getSpecificPropertyType($sheetType)" />
                    </xsl:attribute>
				</rdf:type>
				<!-- rdfs:comment of cultural property -->
				<rdfs:comment>
					<xsl:for-each
						select="record/metadata/schede/*/OG/OGT/*">
						<xsl:choose>
							<xsl:when test="position() = 1">
								<xsl:value-of select="./text()" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="concat(', ', ./text())" />
							</xsl:otherwise>
						</xsl:choose>
					</xsl:for-each>
					<!-- comment for BDI 3.00 and 3.01 -->
					<xsl:for-each select="record/metadata/schede/*/DB/*">
						<xsl:choose>
							<xsl:when test="position() = 1">
								<xsl:value-of select="./text()" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="concat(', ', ./text())" />
							</xsl:otherwise>
						</xsl:choose>
					</xsl:for-each>
					<xsl:if test="record/metadata/schede/*/SGT/SGTI">
						<xsl:value-of
							select="concat(' ', record/metadata/schede/*/SGT/SGTI)" />
					</xsl:if>
				</rdfs:comment>
				<!-- hasCulturalPropertyType -->
				<xsl:for-each select="record/metadata/schede/*/OG/OGT">
					<xsl:choose>
						<xsl:when
							test="not($sheetType='BNB') and not($sheetType='A' and ($sheetVersion='3.00' or $sheetVersion='3.00_ICCD0')) and not($sheetType='A' and ($sheetVersion='2.00' or $sheetVersion='2.00_ICCD0'))">
							<arco-dd:hasCulturalPropertyType>
								<xsl:attribute name="rdf:resource">
									<xsl:choose>
										<xsl:when test="./OGTT">
											<xsl:value-of
									select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(concat(./OGTD, '-', ./OGTT)))" />
										</xsl:when>
										<xsl:when test="./OGTD">
											<xsl:value-of
									select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(./OGTD))" />
										</xsl:when>
									</xsl:choose>
								</xsl:attribute>
							</arco-dd:hasCulturalPropertyType>
						</xsl:when>
						<xsl:when
							test="$sheetType='A' and ($sheetVersion='3.00' or $sheetVersion='3.00_ICCD0')">
							<arco-dd:hasCulturalPropertyType>
								<xsl:attribute name="rdf:resource">
									<xsl:choose>
										<xsl:when test="./OGTQ">
											<xsl:value-of
									select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(concat(./OGTD, '-', ./OGTQ)))" />
										</xsl:when>
										<xsl:when test="./OGTD">
											<xsl:value-of
									select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(./OGTD))" />
										</xsl:when>
									</xsl:choose>
								</xsl:attribute>
							</arco-dd:hasCulturalPropertyType>
						</xsl:when>
						<xsl:when
							test="$sheetType='A' and ($sheetVersion='2.00' or $sheetVersion='2.00_ICCD0')">
							<arco-dd:hasCulturalPropertyType>
								<xsl:attribute name="rdf:resource">
									<xsl:choose>
										<xsl:when test="./OGTQ">
											<xsl:value-of
									select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(concat(./OGTT, '-', ./OGTQ)))" />
										</xsl:when>
										<xsl:when test="./OGTT">
											<xsl:value-of
									select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(./OGTT))" />
										</xsl:when>
									</xsl:choose>
								</xsl:attribute>
							</arco-dd:hasCulturalPropertyType>
						</xsl:when>
						<xsl:when
							test="$sheetType='BNB' and (./OGTD and starts-with(lower-case(normalize-space(./OGTD)), 'campione'))">
							<arco-dd:hasCulturalPropertyType>
								<xsl:attribute name="rdf:resource">
									<xsl:choose>
										<xsl:when test="./OGTK">
											<xsl:value-of
									select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(concat(./OGTD, ' ', ./OGTK)))" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of
									select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(./OGTD))" />
										</xsl:otherwise>
									</xsl:choose>
								</xsl:attribute>
							</arco-dd:hasCulturalPropertyType>
						</xsl:when>
						<xsl:when
							test="$sheetType='BNB' and (./OGTD and starts-with(lower-case(normalize-space(./OGTD)), 'erbario'))">
							<arco-dd:hasCulturalPropertyType>
								<xsl:attribute name="rdf:resource">
									<xsl:choose>
										<xsl:when test="./OGTR">
											<xsl:value-of
									select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(concat(./OGTD, ' ', ./OGTR)))" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of
									select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(./OGTD))" />
										</xsl:otherwise>
									</xsl:choose>
								</xsl:attribute>
							</arco-dd:hasCulturalPropertyType>
						</xsl:when>
						<xsl:when
							test="$sheetType='BNB' and (./OGTD and starts-with(lower-case(normalize-space(./OGTD)), 'collezione'))">
							<arco-dd:hasCulturalPropertyType>
								<xsl:attribute name="rdf:resource">
									<xsl:choose>
										<xsl:when test="./OGTZ">
											<xsl:value-of
									select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(concat(./OGTD, ' ', ./OGTZ)))" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of
									select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(./OGTD))" />
										</xsl:otherwise>
									</xsl:choose>
								</xsl:attribute>
							</arco-dd:hasCulturalPropertyType>
						</xsl:when>
						<xsl:when
							test="$sheetType='BNB' and (./OGTD and starts-with(lower-case(normalize-space(./OGTD)), 'contenitore'))">
							<arco-dd:hasCulturalPropertyType>
								<xsl:attribute name="rdf:resource">
									<xsl:choose>
										<xsl:when test="./OGTO">
											<xsl:value-of
									select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(concat(./OGTD, ' ', ./OGTO)))" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of
									select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(./OGTD))" />
										</xsl:otherwise>
									</xsl:choose>
								</xsl:attribute>
							</arco-dd:hasCulturalPropertyType>
						</xsl:when>
					</xsl:choose>
				</xsl:for-each>
			</rdf:Description>

			<!-- Subject as an individual (sgti) -->
			<xsl:for-each select="record/metadata/schede/*/*/SGT">
				<xsl:if test="$sheetType='PST' or 'SMO'">
				<xsl:if test="./SGTI and not(starts-with(lower-case(normalize-space(./SGTI)), 'nr')) and not(starts-with(lower-case(normalize-space(./SGTI)), 'n.r'))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	            			<xsl:value-of select="concat($NS, 'Subject/', arco-fn:arcofy(./SGTI))" />
            		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                          <xsl:value-of select="'https://w3id.org/arco/ontology/context-description/Subject'" />
                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(./SGTI)" />
							</xsl:call-template>
						</rdfs:label>
						<l0:name>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(./SGTI)" />
							</xsl:call-template>
						</l0:name>
						<arco-cd:isSubjectOf>
							<xsl:attribute name="rdf:resource">
                    		<xsl:value-of
								select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
                    	</xsl:attribute>
						</arco-cd:isSubjectOf>
						<xsl:if test="./SGTP">
							<arco-dd:positionOnCulturalProperty>
								<xsl:value-of select="./SGTP" />
							</arco-dd:positionOnCulturalProperty>
						</xsl:if>
					</rdf:Description>
				</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<xsl:for-each
				select="record/metadata/schede/*/*/THS/THSD">
				<xsl:if
					test="not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r'))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	            			<xsl:value-of
							select="concat($NS, 'Subject/', arco-fn:arcofy(.))" />
            		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                          <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/Subject'" />
                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(.)" />
							</xsl:call-template>
						</rdfs:label>
						<l0:name>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(.)" />
							</xsl:call-template>
						</l0:name>
						<arco-cd:isSubjectOf>
							<xsl:attribute name="rdf:resource">
                    		<xsl:value-of
								select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
                    	</xsl:attribute>
						</arco-cd:isSubjectOf>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- Subject as an individual (desu) -->
			<xsl:for-each
				select="record/metadata/schede/NU/DA/DES/DESU">
				<xsl:if
					test="not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r'))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'Subject/', arco-fn:arcofy(.))" />
            		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                          <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/Subject'" />
                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(.)" />
							</xsl:call-template>
						</rdfs:label>
						<l0:name>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(.)" />
							</xsl:call-template>
						</l0:name>
						<arco-cd:isSubjectOf>
							<xsl:attribute name="rdf:resource">
                    		<xsl:value-of
								select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
                    	</xsl:attribute>
						</arco-cd:isSubjectOf>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- Subject as an individual (aidi) -->
			<xsl:for-each
				select="record/metadata/schede/*/DA/AID/AIDI">
				<xsl:if
					test="not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r'))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'Subject/', arco-fn:arcofy(.))" />
            		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                          <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/Subject'" />
                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(.)" />
							</xsl:call-template>
						</rdfs:label>
						<l0:name>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(.)" />
							</xsl:call-template>
						</l0:name>
						<arco-cd:isSubjectOf>
							<xsl:attribute name="rdf:resource">
                    		<xsl:value-of
								select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
                    	</xsl:attribute>
						</arco-cd:isSubjectOf>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- Title as an individual for SG/SGL/SGLL -->
			<xsl:for-each
				select="record/metadata/schede/*/SG/SGL/SGLL">
				<xsl:choose>
					<xsl:when
						test="(starts-with(lower-case(normalize-space(.)), 'nr')) or (starts-with(lower-case(normalize-space(.)), 'n.r'))">
						<xsl:value-of />
					</xsl:when>
					<xsl:otherwise>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
            				<xsl:value-of
								select="concat($NS, 'Title/', $itemURI, '-', arco-fn:urify(normalize-space(.)))" />
            			</xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/context-description/Title" />
							<arco-cd:isTitleOf>
								<xsl:attribute name="rdf:resource"> 
								<xsl:value-of
									select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
							</xsl:attribute>
							</arco-cd:isTitleOf>
							<rdfs:label>
								<xsl:value-of select="normalize-space(.)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(.)" />
							</l0:name>
							<arco-cd:hasTitleType>
								<xsl:attribute name="rdf:resource">
            			<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/ParallelTitle'" />
            		</xsl:attribute>
							</arco-cd:hasTitleType>
							<xsl:if test="../SGLS">
								<arco-core:specifications>
									<xsl:value-of select="normalize-space(../SGLS)" />
								</arco-core:specifications>
							</xsl:if>
						</rdf:Description>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:for-each>
			<!-- Title as an individual for SG/SGT/SGTT -->
			<xsl:for-each
				select="record/metadata/schede/*/OG/SGT/SGTT">
				<xsl:if
					test="not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r'))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'Title/', $itemURI, '-', arco-fn:urify(normalize-space(.)))" />
            			</xsl:attribute>
						<rdf:type
							rdf:resource="https://w3id.org/arco/ontology/context-description/Title" />
						<rdfs:label>
							<xsl:value-of select="normalize-space(.)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(.)" />
						</l0:name>
						<xsl:if
							test="../SGTL and (not(starts-with(lower-case(normalize-space(../SGTL)), 'nr')) and not(starts-with(lower-case(normalize-space(../SGTL)), 'n.r')))">
							<arco-cd:hasInterpretationCriterion>
								<xsl:attribute name="rdf:resource">
	            					<xsl:value-of
									select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(../SGTL)))" />
	            				</xsl:attribute>
							</arco-cd:hasInterpretationCriterion>
							<arco-cd:isTitleOf>
								<xsl:attribute name="rdf:resource"> 
								<xsl:value-of
									select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
							</xsl:attribute>
							</arco-cd:isTitleOf>
						</xsl:if>
					</rdf:Description>
					<!-- Title source as an individual -->
					<xsl:if test="../SGTL">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                				<xsl:value-of
								select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(../SGTL)))" />
                			</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/InterpretationCriterion'" />
                        		</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(../SGTL)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(../SGTL)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<!-- Title as an individual for DA/AID/AIDT -->
			<xsl:for-each
				select="record/metadata/schede/*/DA/AID/AIDT">
				<xsl:if
					test="not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r'))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'Title/', $itemURI, '-', arco-fn:urify(normalize-space(.)))" />
						<rdf:type
							rdf:resource="https://w3id.org/arco/ontology/context-description/Title" />
            			</xsl:attribute>
						<rdfs:label>
							<xsl:value-of select="normalize-space(.)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(.)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- Title as an individual for DA/AID/AIDN -->
			<xsl:for-each
				select="record/metadata/schede/*/DA/AID/AIDN">
				<xsl:if
					test="not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r'))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'Title/', $itemURI, '-', arco-fn:urify(normalize-space(.)))" />
            			</xsl:attribute>
						<rdf:type
							rdf:resource="https://w3id.org/arco/ontology/context-description/Title" />
						<rdfs:label>
							<xsl:value-of select="normalize-space(.)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(.)" />
						</l0:name>
						<arco-cd:hasTitleType>
							<xsl:attribute name="rdf:resource">
            			<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/AlternativeTitle'" />
            		</xsl:attribute>
						</arco-cd:hasTitleType>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- Title as an individual for OG/SGT/SGTP -->
			<xsl:for-each
				select="record/metadata/schede/*/OG/SGT/SGTP">
				<xsl:if
					test="not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r'))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'Title/', $itemURI, '-', arco-fn:urify(normalize-space(.)))" />
            			</xsl:attribute>
						<rdf:type
							rdf:resource="https://w3id.org/arco/ontology/context-description/Title" />
						<rdfs:label>
							<xsl:value-of select="normalize-space(.)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(.)" />
						</l0:name>
						<arco-cd:hasTitleType>
							<xsl:attribute name="rdf:resource">
            			<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/ProperTitle'" />
            		</xsl:attribute>
						</arco-cd:hasTitleType>
						<xsl:if
							test="../SGTL and (not(starts-with(lower-case(normalize-space(../SGTL)), 'nr')) and not(starts-with(lower-case(normalize-space(../SGTL)), 'n.r')))">
							<arco-cd:hasInterpretationCriterion>
								<xsl:attribute name="rdf:resource">
	            					<xsl:value-of
									select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(../SGTL)))" />
	            				</xsl:attribute>
							</arco-cd:hasInterpretationCriterion>
						</xsl:if>
						<arco-cd:isTitleOf>
							<xsl:attribute name="rdf:resource"> 
								<xsl:value-of
								select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
							</xsl:attribute>
						</arco-cd:isTitleOf>
					</rdf:Description>
					<!-- Title source as an individual -->
					<xsl:if test="../SGTL">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                				<xsl:value-of
								select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(../SGTL)))" />
                			</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/InterpretationCriterion'" />
                        		</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(../SGTL)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(../SGTL)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<!-- Title as an individual for SG/SGL/SGLT -->
			<xsl:for-each
				select="record/metadata/schede/*/SG/SGL/SGLT">
				<xsl:choose>
					<xsl:when
						test="(starts-with(lower-case(normalize-space(.)), 'nr')) or (starts-with(lower-case(normalize-space(.)), 'n.r'))" />
					<xsl:otherwise>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
            				<xsl:value-of
								select="concat($NS, 'Title/', $itemURI, '-', arco-fn:urify(normalize-space(.)))" />
            			</xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/context-description/Title" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(.)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(.)" />
							</l0:name>
							<arco-cd:hasTitleType>
								<xsl:attribute name="rdf:resource">
            			<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/ProperTitle'" />
            		</xsl:attribute>
							</arco-cd:hasTitleType>
							<xsl:if test="../SGLS">
								<arco-core:specifications>
									<xsl:value-of select="normalize-space(../SGLS)" />
								</arco-core:specifications>
							</xsl:if>
							<arco-cd:isTitleOf>
								<xsl:attribute name="rdf:resource"> 
								<xsl:value-of
									select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
							</xsl:attribute>
							</arco-cd:isTitleOf>
						</rdf:Description>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:for-each>
			<!-- Title as an individual for SG/SGT/SGTR -->
			<xsl:for-each
				select="record/metadata/schede/*/OG/SGT/SGTR">
				<xsl:if
					test="not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r'))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'Title/', $itemURI, '-', arco-fn:urify(normalize-space(.)))" />
            			</xsl:attribute>
						<rdf:type
							rdf:resource="https://w3id.org/arco/ontology/context-description/Title" />
						<rdfs:label>
							<xsl:value-of select="normalize-space(.)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(.)" />
						</l0:name>
						<arco-cd:hasTitleType>
							<xsl:attribute name="rdf:resource">
            			<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/ParallelTitle'" />
            		</xsl:attribute>
						</arco-cd:hasTitleType>
						<xsl:if
							test="../SGTL and (not(starts-with(lower-case(normalize-space(../SGTL)), 'nr')) and not(starts-with(lower-case(normalize-space(../SGTL)), 'n.r')))">
							<arco-cd:hasInterpretationCriterion>
								<xsl:attribute name="rdf:resource">
	            					<xsl:value-of
									select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(../SGTL)))" />
	            				</xsl:attribute>
							</arco-cd:hasInterpretationCriterion>
						</xsl:if>
						<arco-cd:isTitleOf>
							<xsl:attribute name="rdf:resource"> 
								<xsl:value-of
								select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
							</xsl:attribute>
						</arco-cd:isTitleOf>
					</rdf:Description>
					<!-- Title source as an individual -->
					<xsl:if test="../SGTL">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                				<xsl:value-of
								select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(../SGTL)))" />
                			</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/InterpretationCriterion'" />
                        		</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(../SGTL)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(../SGTL)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<!-- Title as an individual for SG/SGL/SGLA -->

			<xsl:for-each
				select="record/metadata/schede/*/SG/SGL/SGLA">
				<xsl:choose>
					<xsl:when
						test="(starts-with(lower-case(normalize-space(.)), 'nr')) or (starts-with(lower-case(normalize-space(.)), 'n.r'))" />
					<xsl:otherwise>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	            				<xsl:value-of
								select="concat($NS, 'Title/', $itemURI, '-', arco-fn:urify(normalize-space(.)))" />
	            			</xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/context-description/Title" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(.)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(.)" />
							</l0:name>
							<arco-cd:hasTitleType>
								<xsl:attribute name="rdf:resource">
	            			<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/AttributedTitle'" />
	            		</xsl:attribute>
							</arco-cd:hasTitleType>
							<xsl:if test="../SGLS">
								<arco-core:specifications>
									<xsl:value-of select="normalize-space(../SGLS)" />
								</arco-core:specifications>
							</xsl:if>
							<arco-cd:isTitleOf>
								<xsl:attribute name="rdf:resource"> 
								<xsl:value-of
									select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
							</xsl:attribute>
							</arco-cd:isTitleOf>
						</rdf:Description>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:for-each>
			<!-- dating for BDM < 4.00 norm -->
			<xsl:for-each select="record/metadata/schede/BDM/AU/DTF">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
	                	<xsl:value-of select="concat($NS, 'Dating/', $itemURI, '-', position())" />
	                </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
				        	<xsl:value-of select="'https://w3id.org/arco/ontology/context-description/Dating'" />
				        </xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="it">
						<xsl:value-of select="concat('Cronologia ', position(), ' del bene culturale ', $itemURI)" />
					</rdfs:label>
					<rdfs:label xml:lang="en">
						<xsl:value-of select="concat('Dating ', position(), ' of cultural property ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of select="concat('Cronologia ', position(), ' del bene culturale ', $itemURI)" />
					</l0:name>
					<l0:name xml:lang="en">
						<xsl:value-of select="concat('Dating ', position(), ' of cultural property ', $itemURI)" />
					</l0:name>
					<arco-cd:hasDatingEvent>
						<xsl:attribute name="rdf:resource">
				        	<xsl:value-of select="concat($NS, 'Event/', $itemURI, '-creation')" />
				        </xsl:attribute>
					</arco-cd:hasDatingEvent>
					<!-- Source of dating -->
					<xsl:if test="./DTFM and (not(starts-with(lower-case(normalize-space(./DTFM)), 'nr')) and not(starts-with(lower-case(normalize-space(./DTFM)), 'n.r')))">
						<arco-cd:hasInterpretationCriterion>
							<xsl:attribute name="rdf:resource">
				            	<xsl:value-of select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./DTFM)))" />
				            </xsl:attribute>
						</arco-cd:hasInterpretationCriterion>
					</xsl:if>
				</rdf:Description>
				<!-- Source of dating as individual -->
				<xsl:if test="./DTFM and (not(starts-with(lower-case(normalize-space(./DTFM)), 'nr')) and not(starts-with(lower-case(normalize-space(./DTFM)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
				            <xsl:value-of select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./DTFM)))" />
				        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				            	<xsl:value-of select="'https://w3id.org/arco/ontology/context-description/InterpretationCriterion'" />
				            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./DTFM)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./DTFM)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- event of dating as individual -->
				<rdf:Description>
					<xsl:attribute name="rdf:about">
				                        <xsl:value-of
						select="concat($NS, 'Event/', $itemURI, '-creation')" />
				                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
							select="'https://w3id.org/italia/onto/l0/Event'" />
				                        </xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Realizzazione del bene ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Realizzazione del bene ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Creation of cultural property ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Creation of cultural property ', $itemURI)" />
					</l0:name>
					<tiapit:atTime>
						<xsl:attribute name="rdf:resource">
				                                <xsl:value-of
							select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./DTFZ)))" />
				                            </xsl:attribute>
					</tiapit:atTime>
				</rdf:Description>
				<!-- Time interval as an individual -->
				<rdf:Description>
					<xsl:attribute name="rdf:about">
				                            <xsl:value-of
						select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./DTFZ)))" />
				                        </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
				                                <xsl:value-of
							select="'https://w3id.org/italia/onto/TI/TimeInterval'" />
				                            </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of select="normalize-space(./DTFZ)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of select="normalize-space(./DTFZ)" />
					</l0:name>
					<tiapit:time>
						<xsl:value-of select="normalize-space(./DTFZ)" />
					</tiapit:time>
				</rdf:Description>
			</xsl:for-each>
			<!-- decorative apparatus -->
			<xsl:if test="record/metadata/schede/*/DA/APF/*">
				<xsl:for-each select="record/metadata/schede/*/DA/APF">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
							<xsl:value-of
							select="concat($NS, 'IconographicOrDecorativeApparatus/', $itemURI, '-decorative-', position())" />
						</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                          		<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/IconographicOrDecorativeApparatus'" />
	                       		</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Apparato decorativo ', position(), ' del bene culturale ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Apparato decorativo ', position(), ' del bene culturale ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Decorative apparatus ', position(), ' of the cultural property ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Decorative apparatus ', position(), ' of the cultural property ', $itemURI)" />
						</l0:name>
						<arco-dd:hasIconographicOrDecorativeApparatusType>
							<xsl:attribute name="rdf:resource">
								<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/DecorativeApparatus'" />
							</xsl:attribute>
						</arco-dd:hasIconographicOrDecorativeApparatusType>
						<xsl:if
							test="./APFF and (not(starts-with(lower-case(normalize-space(./APFF)), 'nr')) and not(starts-with(lower-case(normalize-space(./APFF)), 'n.r')))">
							<arco-dd:hasFunctionalPurpose>
								<xsl:attribute name="rdf:resource">
			                		<xsl:value-of
									select="concat($NS, 'FunctionalPurpose/', arco-fn:urify(normalize-space(./APFF)))" />
		 	                	</xsl:attribute>
							</arco-dd:hasFunctionalPurpose>
						</xsl:if>
						<xsl:if
							test="./APFT and (not(starts-with(lower-case(normalize-space(./APFT)), 'nr')) and not(starts-with(lower-case(normalize-space(./APFT)), 'n.r')))">
							<arco-dd:hasOrnamentalMotif>
								<xsl:attribute name="rdf:resource">
			                		<xsl:value-of
									select="concat($NS, 'OrnamentalMotif/', arco-fn:urify(normalize-space(./APFT)))" />
		 	                	</xsl:attribute>
							</arco-dd:hasOrnamentalMotif>
						</xsl:if>
						<xsl:if
							test="./APFE and (not(starts-with(lower-case(normalize-space(./APFE)), 'nr')) and not(starts-with(lower-case(normalize-space(APFE)), 'n.r')))">
							<arco-dd:hasTechnicalStatus>
								<xsl:attribute name="rdf:resource">
			                		<xsl:value-of
									select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI, '-decorative-', position())" />
		 	                	</xsl:attribute>
							</arco-dd:hasTechnicalStatus>
						</xsl:if>
					</rdf:Description>
					<xsl:if
						test="./APFF and (not(starts-with(lower-case(normalize-space(./APFF)), 'nr')) and not(starts-with(lower-case(normalize-space(./APFF)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                                <xsl:value-of
								select="concat($NS, 'FunctionalPurpose/', arco-fn:urify(normalize-space(./APFF)))" />
		                            </xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/denotative-description/FunctionalPurpose" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(./APFF)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./APFF)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<xsl:if
						test="./APFT and (not(starts-with(lower-case(normalize-space(./APFT)), 'nr')) and not(starts-with(lower-case(normalize-space(./APFT)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                                <xsl:value-of
								select="concat($NS, 'OrnamentalMotif/', arco-fn:urify(normalize-space(./APFT)))" />
		                            </xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/denotative-description/OrnamentalMotif" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(./APFT)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./APFT)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<xsl:if
						test="./APFE and (not(starts-with(lower-case(normalize-space(./APFE)), 'nr')) and not(starts-with(lower-case(normalize-space(./APFE)), 'n.r')))">

						<rdf:Description>
							<xsl:attribute name="rdf:about">
		            			<xsl:value-of
								select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI, '-decorative-', position())" />
		            		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/CulturalEntityTechnicalStatus'" />
								</xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Stato tecnico dell''apparato figurativo ', position(), ' del bene culturale ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Stato tecnico dell''apparato figurativo ', position(), ' del bene culturale ', $itemURI)" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Technical status of decorative apparatus ', position(), ' of cultural property ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Technical status of decorative apparatus ', position(), ' of cultural property ', $itemURI)" />
							</l0:name>
							<arco-dd:includesTechnicalCharacteristic>
								<xsl:attribute name="rdf:resource">
		            				<xsl:value-of
									select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(./APFE)))" />
		            			</xsl:attribute>
							</arco-dd:includesTechnicalCharacteristic>

						</rdf:Description>
						<!-- Technical detail as an individual -->
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		            			<xsl:value-of
								select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(./APFE)))" />
		            		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/TechnicalCharacteristic'" />
								</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./APFE)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./APFE)" />
							</l0:name>
							<arco-dd:isCharacteristicClassifiedBy>
								<xsl:attribute name="rdf:resource">
		            				<xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/MaterialOrTechnique'" />
		            			</xsl:attribute>
							</arco-dd:isCharacteristicClassifiedBy>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- other cultural property records -->
			<xsl:for-each select="record/metadata/schede/*/AC/ACS">
				<xsl:if test="./*">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
								<xsl:value-of
							select="concat($NS, 'CulturalPropertyRecord/', $itemURI, '-', position())" />
							</xsl:attribute>
						<arco-catalogue:describes>
							<xsl:attribute name="rdf:resource">
								 	<xsl:value-of
								select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
               		 			</xsl:attribute>
						</arco-catalogue:describes>
						<rdf:type
							rdf:resource="https://w3id.org/arco/ontology/catalogue/CulturalPropertyRecord" />
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Scheda ', position(), ' che descrive il bene culturale ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Scheda ', position(), ' che descrive il bene culturale ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Record ', position(), ' describing cultural property ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Record ', position(), ' describing cultural property ', $itemURI)" />
						</l0:name>
						<xsl:if test="./ACSC">
							<arco-catalogue:culturalPropertyRecordIdentifier>
								<xsl:value-of select="normalize-space(./ACSC)" />
							</arco-catalogue:culturalPropertyRecordIdentifier>
						</xsl:if>
						<xsl:if test="./ACSS">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./ACSS)" />
							</arco-core:note>
						</xsl:if>
						<xsl:if
							test="./ACSP and (not(starts-with(lower-case(normalize-space(./ACSP)), 'nr')) and not(starts-with(lower-case(normalize-space(./ACSP)), 'n.r')))">
							<arco-catalogue:referenceProject>
								<xsl:value-of select="normalize-space(./ACSP)" />
							</arco-catalogue:referenceProject>
						</xsl:if>
						<xsl:if
							test="./ACSW and (not(starts-with(lower-case(normalize-space(./ACSW)), 'nr')) and not(starts-with(lower-case(normalize-space(./ACSW)), 'n.r')))">
							<smapit:URL>
								<xsl:value-of select="normalize-space(./ACSW)" />
							</smapit:URL>
						</xsl:if>
						<xsl:if
							test="./ACSE and (not(starts-with(lower-case(normalize-space(./ACSE)), 'nr')) and not(starts-with(lower-case(normalize-space(./ACSE)), 'n.r')))">
							<arco-cd:hasCulturalPropertyRecordResponsibleAgent>
								<xsl:attribute name="rdf:resource">
			                				<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(./ACSE))" />
			                			</xsl:attribute>
							</arco-cd:hasCulturalPropertyRecordResponsibleAgent>
							<arco-core:hasAgentRole>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-record-', position(), '-responsible-agent')" />
								</xsl:attribute>
							</arco-core:hasAgentRole>
						</xsl:if>
					</rdf:Description>
					<!-- agent role as an individual -->
					<xsl:if
						test="./ACSE and (not(starts-with(lower-case(normalize-space(./ACSE)), 'nr')) and not(starts-with(lower-case(normalize-space(./ACSE)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
				                        		<xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-record-', position(), '-responsible-agent')" />
				                    		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/core/AgentRole'" />
						                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Agente responsabile della scheda ', position(), ' che descrive il bene culturale ', $itemURI, ': ', normalize-space(./ACSE))" />
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Responsible agent for record ', position(), ' describing cultural property ', $itemURI, ': ', normalize-space(./ACSE))" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Agente responsabile della scheda ', position(), ' che descrive il bene culturale ', $itemURI, ': ', normalize-space(./ACSE))" />
							</l0:name>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Responsible agent for record ', position(), ' describing cultural property ', $itemURI, ': ', normalize-space(./ACSE))" />
							</l0:name>
							<arco-core:hasRole>
								<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
									select="concat($NS, 'Role/RecordResponsibleAgent')" />
						                        </xsl:attribute>
							</arco-core:hasRole>
							<arco-core:hasAgent>
								<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(./ACSE))" />
						                        </xsl:attribute>
							</arco-core:hasAgent>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
						                        <xsl:value-of
								select="concat($NS, 'Role/RecordResponsibleAgent')" />
						                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/Role'" />
						                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="'Agente responsabile di scheda'" />
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:value-of select="'Record responsible agent'" />
							</rdfs:label>
							<arco-core:isRoleOf>
								<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-record-', position(), '-responsible-agent')" />
						                        </xsl:attribute>
							</arco-core:isRoleOf>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
						                        <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./ACSE))" />
						                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
						                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./ACSE)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./ACSE)" />
							</l0:name>
							<arco-core:isAgentOf>
								<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-record-', position(), '-responsible-agent')" />
						                        </xsl:attribute>
							</arco-core:isAgentOf>
						</rdf:Description>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<!-- reference coin legend (NU) -->
			<xsl:if
				test="record/metadata/schede/NU/OG/OGT/OGTL">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
							<xsl:value-of
						select="concat($NS, 'ReferenceCoinLegend/', arco-fn:urify(normalize-space(record/metadata/schede/NU/OG/OGT/OGTL)))" />
						</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
	                          		<xsl:value-of
							select="'https://w3id.org/arco/ontology/arco/ReferenceCoinLegend'" />
	                       	</xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/NU/OG/OGT/OGTL)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/NU/OG/OGT/OGTL)" />
					</l0:name>
				</rdf:Description>
			</xsl:if>
			<!-- cultural property cataloguing category -->
			<xsl:if test="record/metadata/schede/*/OG/OGT/OGTV">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
							<xsl:value-of
						select="concat($NS, 'CulturalPropertyCataloguingCategory/', arco-fn:urify(normalize-space(record/metadata/schede/*/OG/OGT/OGTV)))" />
						</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
	                          		<xsl:value-of
							select="'https://w3id.org/arco/ontology/arco/CulturalPropertyCataloguingCategory'" />
	                       	</xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/OG/OGT/OGTV)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/OG/OGT/OGTV)" />
					</l0:name>
				</rdf:Description>
			</xsl:if>
			<!-- relation with preparatory or final work (RO/ROF) -->
			<xsl:if test="record/metadata/schede/*/RO/ROF">
				<xsl:for-each select="record/metadata/schede/*/RO/ROF">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
								<xsl:value-of
							select="concat($NS, 'RelatedWorkSituation/', $itemURI, '-preparatory-final-work-', position())" />
							</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                          		<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/RelatedWorkSituation'" />
	                       		</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Rapporto ', position(), ' tra il bene culturale ', $itemURI, ' e opera originale o finale')" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Rapporto ', position(), ' tra il bene culturale ', $itemURI, ' e opera originale o finale')" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Relation ', position(), ' between the cultural property ', $itemURI, ' and preparatory or final work')" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Relation ', position(), ' between the cultural property ', $itemURI, ' and preparatory or final work')" />
						</l0:name>
						<xsl:choose>
							<xsl:when
								test="lower-case(normalize-space(./ROFF))='calco' or lower-case(normalize-space(./ROFF))='calco parziale' or lower-case(normalize-space(./ROFF))='copia' or lower-case(normalize-space(./ROFF))='copia con varianti' or lower-case(normalize-space(./ROFF))='copia parziale' or lower-case(normalize-space(./ROFF))='derivazione' or lower-case(normalize-space(./ROFF))='derivazione con varianti' or lower-case(normalize-space(./ROFF))='derivazione parziale' or lower-case(normalize-space(./ROFF))='imitazione' or lower-case(normalize-space(./ROFF))='remake' or lower-case(normalize-space(./ROFF))='replica' or lower-case(normalize-space(./ROFF))='replica parziale' or lower-case(normalize-space(./ROFF))='replica con varianti' or lower-case(normalize-space(./ROFF))='positivo' or lower-case(normalize-space(./ROFF))='particolare' or lower-case(normalize-space(./ROFF))='fotomontaggio'">
								<arco-cd:involvesRelatedWork>
									<xsl:attribute name="rdf:resource">
											<xsl:value-of
										select="concat($NS, 'PreparatoryWork/', $itemURI, '-', arco-fn:urify(normalize-space(./ROFO)))" />
										</xsl:attribute>
								</arco-cd:involvesRelatedWork>
							</xsl:when>
							<xsl:when
								test="lower-case(normalize-space(./ROFF))='bozzetto' or lower-case(normalize-space(./ROFF))='bozzetto parziale' or lower-case(normalize-space(./ROFF))='cartone' or lower-case(normalize-space(./ROFF))='cartone parziale' or lower-case(normalize-space(./ROFF))='disegno preparatorio parziale' or lower-case(normalize-space(./ROFF))='disegno preparatorio' or lower-case(normalize-space(./ROFF))='matrice' or lower-case(normalize-space(./ROFF))='matrice parziale' or lower-case(normalize-space(./ROFF))='modellino' or lower-case(normalize-space(./ROFF))='modellino parziale' or lower-case(normalize-space(./ROFF))='modello' or lower-case(normalize-space(./ROFF))='modello parziale' or lower-case(normalize-space(./ROFF))='modello in cera' or lower-case(normalize-space(./ROFF))='progetto' or lower-case(normalize-space(./ROFF))='prototipo' or lower-case(normalize-space(./ROFF))='prova' or lower-case(normalize-space(./ROFF))='schizzo' or lower-case(normalize-space(./ROFF))='sinopia' or lower-case(normalize-space(./ROFF))='sinopia parziale' or lower-case(normalize-space(./ROFF))='negativo' or lower-case(normalize-space(./ROFF))='internegativo' or lower-case(normalize-space(./ROFF))='prova a contatto' or lower-case(normalize-space(./ROFF))='prova di stampa' or lower-case(normalize-space(./ROFF))='prova intermedia' or lower-case(normalize-space(./ROFF))='prova in controparte' or lower-case(normalize-space(./ROFF))='prova finale' or lower-case(normalize-space(./ROFF))='provino' or lower-case(normalize-space(./ROFF))='maquette'">
								<arco-cd:involvesRelatedWork>
									<xsl:attribute name="rdf:resource">
											<xsl:value-of
										select="concat($NS, 'FinalWork/', $itemURI, '-', arco-fn:urify(normalize-space(./ROFO)))" />
										</xsl:attribute>
								</arco-cd:involvesRelatedWork>
							</xsl:when>
							<xsl:otherwise>
								<arco-cd:involvesRelatedWork>
									<xsl:attribute name="rdf:resource">
											<xsl:value-of
										select="concat($NS, 'PreparatoryOrFinalWork/', $itemURI, '-', arco-fn:urify(normalize-space(./ROFO)))" />
										</xsl:attribute>
								</arco-cd:involvesRelatedWork>
							</xsl:otherwise>
						</xsl:choose>
						<xsl:if
							test="./ROFF and (not(starts-with(lower-case(normalize-space(./ROFF)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFF)), 'n.r')))">
							<arco-cd:hasCulturalPropertyStage>
								<xsl:attribute name="rdf:resource">
										<xsl:value-of
									select="concat($NS, 'CulturalPropertyStage/', arco-fn:urify(normalize-space(./ROFF)))" />
									</xsl:attribute>
							</arco-cd:hasCulturalPropertyStage>
						</xsl:if>
						<xsl:if test="./ROFP">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./ROFP)" />
							</arco-core:note>
						</xsl:if>
					</rdf:Description>
					<!-- preparatory work, final work and preparatory or final work as individuals -->
					<xsl:choose>
						<!-- preparatory work as an individual -->
						<xsl:when
							test="lower-case(normalize-space(./ROFF))='calco' or lower-case(normalize-space(./ROFF))='calco parziale' or lower-case(normalize-space(./ROFF))='copia' or lower-case(normalize-space(./ROFF))='copia con varianti' or lower-case(normalize-space(./ROFF))='copia parziale' or lower-case(normalize-space(./ROFF))='derivazione' or lower-case(normalize-space(./ROFF))='derivazione con varianti' or lower-case(normalize-space(./ROFF))='derivazione parziale' or lower-case(normalize-space(./ROFF))='imitazione' or lower-case(normalize-space(./ROFF))='remake' or lower-case(normalize-space(./ROFF))='replica' or lower-case(normalize-space(./ROFF))='replica parziale' or lower-case(normalize-space(./ROFF))='replica con varianti' or lower-case(normalize-space(./ROFF))='positivo' or lower-case(normalize-space(./ROFF))='particolare' or lower-case(normalize-space(./ROFF))='fotomontaggio'">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
										<xsl:value-of
									select="concat($NS, 'PreparatoryWork/', $itemURI, '-', arco-fn:urify(normalize-space(./ROFO)))" />
									</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
		                          		<xsl:value-of
										select="'https://w3id.org/arco/ontology/context-description/PreparatoryWork'" />
		                       		</xsl:attribute>
								</rdf:type>
								<rdfs:label xml:lang="it">
									<xsl:value-of
										select="concat('Opera originale ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(./ROFO))" />
								</rdfs:label>
								<l0:name xml:lang="it">
									<xsl:value-of
										select="concat('Opera originale ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(./ROFO))" />
								</l0:name>
								<rdfs:label xml:lang="en">
									<xsl:value-of
										select="concat('Preparatory work ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./ROFO))" />
								</rdfs:label>
								<l0:name xml:lang="en">
									<xsl:value-of
										select="concat('Preparatory work ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./ROFO))" />
								</l0:name>
								<xsl:if
									test="./ROFS and (not(starts-with(lower-case(normalize-space(./ROFS)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFS)), 'n.r')))">
									<arco-cd:hasSubject>
										<xsl:attribute name="rdf:resource">
											<xsl:value-of
											select="concat($NS, 'Subject/', arco-fn:arcofy(./ROFS))" />
										</xsl:attribute>
									</arco-cd:hasSubject>
								</xsl:if>
								<xsl:if
									test="./ROFR and (not(starts-with(lower-case(normalize-space(./ROFR)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFR)), 'n.r')))">
									<arco-cd:preparatoryOrFinalWorkPreviousLocation>
										<xsl:value-of select="normalize-space(./ROFR)" />
									</arco-cd:preparatoryOrFinalWorkPreviousLocation>
								</xsl:if>
								<xsl:if
									test="./ROFC and (not(starts-with(lower-case(normalize-space(./ROFC)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFC)), 'n.r')))">
									<arco-cd:relatedWorkLocation>
										<xsl:value-of select="normalize-space(./ROFC)" />
									</arco-cd:relatedWorkLocation>
								</xsl:if>
								<xsl:if
									test="./ROFX and (not(starts-with(lower-case(normalize-space(./ROFX)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFX)), 'n.r')))">
									<arco-cd:preparatoryOrFinalWorkRecordIdentifier>
										<xsl:value-of select="normalize-space(./ROFX)" />
									</arco-cd:preparatoryOrFinalWorkRecordIdentifier>
								</xsl:if>
								<xsl:if
									test="./ROFI and (not(starts-with(lower-case(normalize-space(./ROFI)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFI)), 'n.r')))">
									<arco-cd:hasInventory>
										<xsl:attribute name="rdf:resource">
											<xsl:value-of
											select="concat($NS, 'Inventory/', $itemURI, '-preparatory-final-work-inventory-', arco-fn:urify(normalize-space(./ROFI)))" />
										</xsl:attribute>
									</arco-cd:hasInventory>
								</xsl:if>
								<xsl:if
									test="./ROFT and (not(starts-with(lower-case(normalize-space(./ROFT)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFT)), 'n.r')))">
									<arco-cd:hasTitle>
										<xsl:attribute name="rdf:resource">
											<xsl:value-of
											select="concat($NS, 'Title/', $itemURI, '-preparatory-final-work-title-', arco-fn:urify(normalize-space(./ROFT)))" />
										</xsl:attribute>
									</arco-cd:hasTitle>
								</xsl:if>
								<xsl:if
									test="./ROFD and (not(starts-with(lower-case(normalize-space(./ROFD)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFD)), 'n.r')))">
									<arco-cd:hasDating>
										<xsl:attribute name="rdf:resource">
											<xsl:value-of
											select="concat($NS, 'Dating/', $itemURI, '-', arco-fn:urify(normalize-space(./ROFO)))" />						
										</xsl:attribute>
									</arco-cd:hasDating>
								</xsl:if>
								<xsl:if
									test="./ROFA and (not(starts-with(lower-case(normalize-space(./ROFA)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFA)), 'n.r')))">
									<arco-cd:hasAuthor>
										<xsl:attribute name="rdf:resource">
			            					<xsl:value-of
											select="concat($NS, 'Agent/', arco-fn:arcofy(./ROFA))" />
			            				</xsl:attribute>
									</arco-cd:hasAuthor>
									<dc:creator>
										<xsl:attribute name="rdf:resource">
			            					<xsl:value-of
											select="concat($NS, 'Agent/', arco-fn:arcofy(./ROFA))" />
			            				</xsl:attribute>
									</dc:creator>
									<pico:author>
										<xsl:attribute name="rdf:resource">
			            					<xsl:value-of
											select="concat($NS, 'Agent/', arco-fn:arcofy(./ROFA))" />
			            				</xsl:attribute>
									</pico:author>
								</xsl:if>
							</rdf:Description>
						</xsl:when>
						<!-- final work as an individual -->
						<xsl:when
							test="lower-case(normalize-space(./ROFF))='bozzetto' or lower-case(normalize-space(./ROFF))='bozzetto parziale' or lower-case(normalize-space(./ROFF))='cartone' or lower-case(normalize-space(./ROFF))='cartone parziale' or lower-case(normalize-space(./ROFF))='disegno preparatorio parziale' or lower-case(normalize-space(./ROFF))='disegno preparatorio' or lower-case(normalize-space(./ROFF))='matrice' or lower-case(normalize-space(./ROFF))='matrice parziale' or lower-case(normalize-space(./ROFF))='modellino' or lower-case(normalize-space(./ROFF))='modellino parziale' or lower-case(normalize-space(./ROFF))='modello' or lower-case(normalize-space(./ROFF))='modello parziale' or lower-case(normalize-space(./ROFF))='modello in cera' or lower-case(normalize-space(./ROFF))='progetto' or lower-case(normalize-space(./ROFF))='prototipo' or lower-case(normalize-space(./ROFF))='prova' or lower-case(normalize-space(./ROFF))='schizzo' or lower-case(normalize-space(./ROFF))='sinopia' or lower-case(normalize-space(./ROFF))='sinopia parziale' or lower-case(normalize-space(./ROFF))='negativo' or lower-case(normalize-space(./ROFF))='internegativo' or lower-case(normalize-space(./ROFF))='prova a contatto' or lower-case(normalize-space(./ROFF))='prova di stampa' or lower-case(normalize-space(./ROFF))='prova intermedia' or lower-case(normalize-space(./ROFF))='prova in controparte' or lower-case(normalize-space(./ROFF))='prova finale' or lower-case(normalize-space(./ROFF))='provino' or lower-case(normalize-space(./ROFF))='maquette'">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
									<xsl:value-of
									select="concat($NS, 'FinalWork/', $itemURI, '-', arco-fn:urify(normalize-space(./ROFO)))" />
								</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
	                          		<xsl:value-of
										select="'https://w3id.org/arco/ontology/context-description/FinalWork'" />
	                       		</xsl:attribute>
								</rdf:type>
								<rdfs:label xml:lang="it">
									<xsl:value-of
										select="concat('Opera finale ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(./ROFO))" />
								</rdfs:label>
								<l0:name xml:lang="it">
									<xsl:value-of
										select="concat('Opera finale ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(./ROFO))" />
								</l0:name>
								<rdfs:label xml:lang="en">
									<xsl:value-of
										select="concat('Final work ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./ROFO))" />
								</rdfs:label>
								<l0:name xml:lang="en">
									<xsl:value-of
										select="concat('Final work ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./ROFO))" />
								</l0:name>
								<xsl:if
									test="./ROFS and (not(starts-with(lower-case(normalize-space(./ROFS)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFS)), 'n.r')))">
									<arco-cd:hasSubject>
										<xsl:attribute name="rdf:resource">
											<xsl:value-of
											select="concat($NS, 'Subject/', arco-fn:arcofy(./ROFS))" />
										</xsl:attribute>
									</arco-cd:hasSubject>
								</xsl:if>
								<xsl:if
									test="./ROFR and (not(starts-with(lower-case(normalize-space(./ROFR)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFR)), 'n.r')))">
									<arco-cd:preparatoryOrFinalWorkPreviousLocation>
										<xsl:value-of select="normalize-space(./ROFR)" />
									</arco-cd:preparatoryOrFinalWorkPreviousLocation>
								</xsl:if>
								<xsl:if
									test="./ROFC and (not(starts-with(lower-case(normalize-space(./ROFC)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFC)), 'n.r')))">
									<arco-cd:relatedWorkLocation>
										<xsl:value-of select="normalize-space(./ROFC)" />
									</arco-cd:relatedWorkLocation>
								</xsl:if>
								<xsl:if
									test="./ROFX and (not(starts-with(lower-case(normalize-space(./ROFX)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFX)), 'n.r')))">
									<arco-cd:preparatoryOrFinalWorkRecordIdentifier>
										<xsl:value-of select="normalize-space(./ROFX)" />
									</arco-cd:preparatoryOrFinalWorkRecordIdentifier>
								</xsl:if>
								<xsl:if
									test="./ROFI and (not(starts-with(lower-case(normalize-space(./ROFI)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFI)), 'n.r')))">
									<arco-cd:hasInventory>
										<xsl:attribute name="rdf:resource">
											<xsl:value-of
											select="concat($NS, 'Inventory/', $itemURI, '-preparatory-final-work-inventory-', arco-fn:urify(normalize-space(./ROFI)))" />
										</xsl:attribute>
									</arco-cd:hasInventory>
								</xsl:if>
								<xsl:if
									test="./ROFT and (not(starts-with(lower-case(normalize-space(./ROFT)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFT)), 'n.r')))">
									<arco-cd:hasTitle>
										<xsl:attribute name="rdf:resource">
											<xsl:value-of
											select="concat($NS, 'Title/', $itemURI, '-preparatory-final-work-title-', arco-fn:urify(normalize-space(./ROFT)))" />
										</xsl:attribute>
									</arco-cd:hasTitle>
								</xsl:if>
								<xsl:if
									test="./ROFD and (not(starts-with(lower-case(normalize-space(./ROFD)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFD)), 'n.r')))">
									<arco-cd:hasDating>
										<xsl:attribute name="rdf:resource">
											<xsl:value-of
											select="concat($NS, 'Dating/', $itemURI, '-', arco-fn:urify(normalize-space(./ROFO)))" />						
										</xsl:attribute>
									</arco-cd:hasDating>
								</xsl:if>
								<xsl:if
									test="./ROFA and (not(starts-with(lower-case(normalize-space(./ROFA)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFA)), 'n.r')))">
									<arco-cd:hasAuthor>
										<xsl:attribute name="rdf:resource">
			            					<xsl:value-of
											select="concat($NS, 'Agent/', arco-fn:arcofy(./ROFA))" />
			            				</xsl:attribute>
									</arco-cd:hasAuthor>
									<dc:creator>
										<xsl:attribute name="rdf:resource">
			            					<xsl:value-of
											select="concat($NS, 'Agent/', arco-fn:arcofy(./ROFA))" />
			            				</xsl:attribute>
									</dc:creator>
									<pico:author>
										<xsl:attribute name="rdf:resource">
			            					<xsl:value-of
											select="concat($NS, 'Agent/', arco-fn:arcofy(./ROFA))" />
			            				</xsl:attribute>
									</pico:author>
								</xsl:if>
							</rdf:Description>
						</xsl:when>
						<!-- final or preparatory work as an individual -->
						<xsl:otherwise>
							<rdf:Description>
								<xsl:attribute name="rdf:about">
										<xsl:value-of
									select="concat($NS, 'PreparatoryOrFinalWork/', $itemURI, '-', arco-fn:urify(normalize-space(./ROFO)))" />
									</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
		                          		<xsl:value-of
										select="'https://w3id.org/arco/ontology/context-description/PreparatoryOrFinalWork'" />
		                       		</xsl:attribute>
								</rdf:type>
								<rdfs:label xml:lang="it">
									<xsl:value-of
										select="concat('Opera originale o finale ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(./ROFO))" />
								</rdfs:label>
								<l0:name xml:lang="it">
									<xsl:value-of
										select="concat('Opera originale o finale ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(./ROFO))" />
								</l0:name>
								<rdfs:label xml:lang="en">
									<xsl:value-of
										select="concat('Preparatory or final work ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./ROFO))" />
								</rdfs:label>
								<l0:name xml:lang="en">
									<xsl:value-of
										select="concat('Preparatory or final work ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./ROFO))" />
								</l0:name>
								<xsl:if
									test="./ROFS and (not(starts-with(lower-case(normalize-space(./ROFS)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFS)), 'n.r')))">
									<arco-cd:hasSubject>
										<xsl:attribute name="rdf:resource">
											<xsl:value-of
											select="concat($NS, 'Subject/', arco-fn:arcofy(./ROFS))" />
										</xsl:attribute>
									</arco-cd:hasSubject>
								</xsl:if>
								<xsl:if
									test="./ROFR and (not(starts-with(lower-case(normalize-space(./ROFR)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFR)), 'n.r')))">
									<arco-cd:preparatoryOrFinalWorkPreviousLocation>
										<xsl:value-of select="normalize-space(./ROFR)" />
									</arco-cd:preparatoryOrFinalWorkPreviousLocation>
								</xsl:if>
								<xsl:if
									test="./ROFC and (not(starts-with(lower-case(normalize-space(./ROFC)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFC)), 'n.r')))">
									<arco-cd:relatedWorkLocation>
										<xsl:value-of select="normalize-space(./ROFC)" />
									</arco-cd:relatedWorkLocation>
								</xsl:if>
								<xsl:if
									test="./ROFX and (not(starts-with(lower-case(normalize-space(./ROFX)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFX)), 'n.r')))">
									<arco-cd:preparatoryOrFinalWorkRecordIdentifier>
										<xsl:value-of select="normalize-space(./ROFX)" />
									</arco-cd:preparatoryOrFinalWorkRecordIdentifier>
								</xsl:if>
								<xsl:if
									test="./ROFI and (not(starts-with(lower-case(normalize-space(./ROFI)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFI)), 'n.r')))">
									<arco-cd:hasInventory>
										<xsl:attribute name="rdf:resource">
											<xsl:value-of
											select="concat($NS, 'Inventory/', $itemURI, '-preparatory-final-work-inventory-', arco-fn:urify(normalize-space(./ROFI)))" />
										</xsl:attribute>
									</arco-cd:hasInventory>
								</xsl:if>
								<xsl:if
									test="./ROFT and (not(starts-with(lower-case(normalize-space(./ROFT)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFT)), 'n.r')))">
									<arco-cd:hasTitle>
										<xsl:attribute name="rdf:resource">
											<xsl:value-of
											select="concat($NS, 'Title/', $itemURI, '-preparatory-final-work-title-', arco-fn:urify(normalize-space(./ROFT)))" />
										</xsl:attribute>
									</arco-cd:hasTitle>
								</xsl:if>
								<xsl:if
									test="./ROFD and (not(starts-with(lower-case(normalize-space(./ROFD)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFD)), 'n.r')))">
									<arco-cd:hasDating>
										<xsl:attribute name="rdf:resource">
											<xsl:value-of
											select="concat($NS, 'Dating/', $itemURI, '-', arco-fn:urify(normalize-space(./ROFO)))" />						
										</xsl:attribute>
									</arco-cd:hasDating>
								</xsl:if>
								<xsl:if
									test="./ROFA and (not(starts-with(lower-case(normalize-space(./ROFA)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFA)), 'n.r')))">
									<arco-cd:hasAuthor>
										<xsl:attribute name="rdf:resource">
			            					<xsl:value-of
											select="concat($NS, 'Agent/', arco-fn:arcofy(./ROFA))" />
			            				</xsl:attribute>
									</arco-cd:hasAuthor>
									<dc:creator>
										<xsl:attribute name="rdf:resource">
			            					<xsl:value-of
											select="concat($NS, 'Agent/', arco-fn:arcofy(./ROFA))" />
			            				</xsl:attribute>
									</dc:creator>
									<pico:author>
										<xsl:attribute name="rdf:resource">
			            					<xsl:value-of
											select="concat($NS, 'Agent/', arco-fn:arcofy(./ROFA))" />
			            				</xsl:attribute>
									</pico:author>
								</xsl:if>
							</rdf:Description>
						</xsl:otherwise>
					</xsl:choose>
					<!-- cultural property stage as an individual -->
					<xsl:if
						test="./ROFF and (not(starts-with(lower-case(normalize-space(./ROFF)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFF)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
										<xsl:value-of
								select="concat($NS, 'CulturalPropertyStage/', arco-fn:urify(normalize-space(./ROFF)))" />
									</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
			                          		<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/CulturalPropertyStage'" />
			                       		</xsl:attribute>
							</rdf:type>
							<l0:name>
								<xsl:value-of select="normalize-space(./ROFF)" />
							</l0:name>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./ROFF)" />
							</rdfs:label>
						</rdf:Description>
					</xsl:if>
					<!-- subject of preparatory or final work as an individual -->
					<xsl:if
						test="./ROFS and (not(starts-with(lower-case(normalize-space(./ROFS)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFS)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
				            			<xsl:value-of
								select="concat($NS, 'Subject/', arco-fn:arcofy(./ROFS))" />
				            		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
				                          <xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/Subject'" />
				                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:call-template name="CamelCase">
									<xsl:with-param name="text"
										select="normalize-space(./ROFS)" />
								</xsl:call-template>
							</rdfs:label>
							<l0:name>
								<xsl:call-template name="CamelCase">
									<xsl:with-param name="text"
										select="normalize-space(./ROFS)" />
								</xsl:call-template>
							</l0:name>
							<arco-cd:isSubjectOf>
								<xsl:attribute name="rdf:resource">
				                    		<xsl:choose>
				                    			<xsl:when
									test="lower-case(normalize-space(./ROFF))='calco' or lower-case(normalize-space(./ROFF))='calco parziale' or lower-case(normalize-space(./ROFF))='copia' or lower-case(normalize-space(./ROFF))='copia con varianti' or lower-case(normalize-space(./ROFF))='copia parziale' or lower-case(normalize-space(./ROFF))='derivazione' or lower-case(normalize-space(./ROFF))='derivazione con varianti' or lower-case(normalize-space(./ROFF))='derivazione parziale' or lower-case(normalize-space(./ROFF))='imitazione' or lower-case(normalize-space(./ROFF))='remake' or lower-case(normalize-space(./ROFF))='replica' or lower-case(normalize-space(./ROFF))='replica parziale' or lower-case(normalize-space(./ROFF))='replica con varianti'">
				                    				<xsl:value-of
									select="concat($NS, 'PreparatoryWork/', $itemURI, '-', arco-fn:urify(normalize-space(./ROFO)))" />
				                    			</xsl:when>
				                    			<xsl:when
									test="lower-case(normalize-space(./ROFF))='bozzetto' or lower-case(normalize-space(./ROFF))='bozzetto parziale' or lower-case(normalize-space(./ROFF))='cartone' or lower-case(normalize-space(./ROFF))='cartone parziale' or lower-case(normalize-space(./ROFF))='disegno preparatorio parziale' or lower-case(normalize-space(./ROFF))='disegno preparatorio' or lower-case(normalize-space(./ROFF))='matrice' or lower-case(normalize-space(./ROFF))='matrice parziale' or lower-case(normalize-space(./ROFF))='modellino' or lower-case(normalize-space(./ROFF))='modellino parziale' or lower-case(normalize-space(./ROFF))='modello' or lower-case(normalize-space(./ROFF))='modello parziale' or lower-case(normalize-space(./ROFF))='modello in cera' or lower-case(normalize-space(./ROFF))='progetto' or lower-case(normalize-space(./ROFF))='prototipo' or lower-case(normalize-space(./ROFF))='prova' or lower-case(normalize-space(./ROFF))='schizzo' or lower-case(normalize-space(./ROFF))='sinopia' or lower-case(normalize-space(./ROFF))='sinopia parziale' or lower-case(normalize-space(./ROFF))='negativo' or lower-case(normalize-space(./ROFF))='internegativo' or lower-case(normalize-space(./ROFF))='prova a contatto' or lower-case(normalize-space(./ROFF))='prova di stampa' or lower-case(normalize-space(./ROFF))='prova intermedia' or lower-case(normalize-space(./ROFF))='prova in controparte' or lower-case(normalize-space(./ROFF))='prova finale' or lower-case(normalize-space(./ROFF))='provino' or lower-case(normalize-space(./ROFF))='maquette'">
				                    				<xsl:value-of
									select="concat($NS, 'FinalWork/', $itemURI, '-', arco-fn:urify(normalize-space(./ROFO)))" />
				                    			</xsl:when>
				                    			<xsl:otherwise>
				                    				<xsl:value-of
									select="concat($NS, 'PreparatoryOrFinalWork/', $itemURI, '-', arco-fn:urify(normalize-space(./ROFO)))" />
				                    			</xsl:otherwise>
				                    		</xsl:choose>
				                    	</xsl:attribute>
							</arco-cd:isSubjectOf>
						</rdf:Description>
					</xsl:if>
					<!-- inventory about preparatory or final work as an individual -->
					<xsl:if
						test="./ROFI and (not(starts-with(lower-case(normalize-space(./ROFI)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFI)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
				            			<xsl:value-of
								select="concat($NS, 'Inventory/', $itemURI, '-preparatory-final-work-inventory-', arco-fn:urify(normalize-space(./ROFI)))" />
				            		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
				                          <xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/Inventory'" />
				                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Inventory ', normalize-space(./ROFI), ' of preparatory or final work of cultural property ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Inventory ', normalize-space(./ROFI), ' of preparatory or final work of cultural property ', $itemURI)" />
							</l0:name>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Inventario ', normalize-space(./ROFI), ' dell''opera originale o finale del bene ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Inventario ', normalize-space(./ROFI), ' dell''opera originale o finale del bene ', $itemURI)" />
							</l0:name>
							<arco-cd:inventoryIdentifier>
								<xsl:value-of select="normalize-space(./ROFI)" />
							</arco-cd:inventoryIdentifier>
						</rdf:Description>
					</xsl:if>
					<!-- preparatory or final work title as an individual -->
					<xsl:if
						test="./ROFT and (not(starts-with(lower-case(normalize-space(./ROFT)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFT)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	            						<xsl:value-of
								select="concat($NS, 'Title/', $itemURI, '-preparatory-final-work-title-', arco-fn:urify(normalize-space(./ROFT)))" />
	            					</xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/context-description/Title" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(./ROFT)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./ROFT)" />
							</l0:name>
							<arco-cd:hasTitleType>
								<xsl:attribute name="rdf:resource">
					            			<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/ProperTitle'" />
					            		</xsl:attribute>
							</arco-cd:hasTitleType>
						</rdf:Description>
					</xsl:if>
					<!-- dating as an individual -->
					<xsl:if
						test="./ROFD and (not(starts-with(lower-case(normalize-space(./ROFD)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFD)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
				                        <xsl:value-of
								select="concat($NS, 'Dating/', $itemURI, '-', arco-fn:urify(normalize-space(./ROFO)))" />
				                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/Dating'" />
				                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Cronologia dell''opera originale o finale ', position(), ' del bene ', $itemURI)" />
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Dating of preparatory or final work ', position(), ' of cultural property ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Cronologia dell''opera originale o finale ', position(), ' del bene ', $itemURI)" />
							</l0:name>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Dating of preparatory or final work ', position(), ' of cultural property ', $itemURI)" />
							</l0:name>
							<arco-cd:hasDatingEvent>
								<xsl:attribute name="rdf:resource">
				                           <xsl:value-of
									select="concat($NS, 'Event/', $itemURI, '-', arco-fn:urify(normalize-space(./ROFO)), '-creation')" />
				                        </xsl:attribute>
							</arco-cd:hasDatingEvent>
							<!-- Source of dating -->
							<xsl:if
								test="./ROFM and (not(starts-with(lower-case(normalize-space(./ROFM)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFM)), 'n.r')))">
								<arco-cd:hasInterpretationCriterion>
									<xsl:attribute name="rdf:resource">
				                              <xsl:value-of
										select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./ROFM)))" />
				                         </xsl:attribute>
								</arco-cd:hasInterpretationCriterion>
							</xsl:if>
						</rdf:Description>
						<!-- Source of dating as individual -->
						<xsl:if
							test="./ROFM and (not(starts-with(lower-case(normalize-space(./ROFM)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFM)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
				                             <xsl:value-of
									select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./ROFM)))" />
				                        </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
				                                <xsl:value-of
										select="'https://w3id.org/arco/ontology/context-description/InterpretationCriterion'" />
				                            </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(./ROFM)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./ROFM)" />
								</l0:name>
							</rdf:Description>
						</xsl:if>
						<!-- event of dating as individual -->
						<rdf:Description>
							<xsl:attribute name="rdf:about">
				                        <xsl:value-of
								select="concat($NS, 'Event/', $itemURI, '-', arco-fn:urify(normalize-space(./ROFO)), '-creation')" />
				                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Event'" />
				                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Realizzazione dell''opera originale o finale ', position(), ' del bene ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Realizzazione dell''opera originale o finale ', position(), ' del bene ', $itemURI)" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Creation of preparatory or final work ', position(), ' of cultural property ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Creation of preparatory or final work ', position(), ' of cultural property ', $itemURI)" />
							</l0:name>
							<tiapit:atTime>
								<xsl:attribute name="rdf:resource">
				                                <xsl:value-of
									select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./ROFD)))" />
				                            </xsl:attribute>
							</tiapit:atTime>
						</rdf:Description>
						<!-- Time interval as an individual -->
						<rdf:Description>
							<xsl:attribute name="rdf:about">
				                            <xsl:value-of
								select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./ROFD)))" />
				                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
				                                <xsl:value-of
									select="'https://w3id.org/italia/onto/TI/TimeInterval'" />
				                            </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./ROFD)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./ROFD)" />
							</l0:name>
							<tiapit:time>
								<xsl:value-of select="normalize-space(./ROFD)" />
							</tiapit:time>
						</rdf:Description>
					</xsl:if>
					<xsl:if
						test="./ROFA and (not(starts-with(lower-case(normalize-space(./ROFA)), 'nr')) and not(starts-with(lower-case(normalize-space(./ROFA)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
				            				<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./ROFA))" />
				            			</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
				            					<xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
				            				</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./ROFA)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./ROFA)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- relation with copy (RO/COP) -->
			<xsl:if
				test="record/metadata/schede/*/RO/COP or record/metadata/schede/*/RO/CRF/CRFT='copia'">
				<xsl:for-each
					select="record/metadata/schede/*/RO/COP | record/metadata/schede/*/RO/CRF">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
								<xsl:value-of
							select="concat($NS, 'RelatedWorkSituation/', $itemURI, '-copy-', position())" />
							</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                          		<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/RelatedWorkSituation'" />
	                       		</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Rapporto ', position(), ' tra il bene culturale ', $itemURI, ' e copia')" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Rapporto ', position(), ' tra il bene culturale ', $itemURI, ' e copia')" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Relation ', position(), ' between the cultural property ', $itemURI, ' and copy')" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Relation ', position(), ' between the cultural property ', $itemURI, ' and copy')" />
						</l0:name>
						<arco-cd:involvesRelatedWork>
							<xsl:attribute name="rdf:resource">
									<xsl:value-of
								select="concat($NS, 'Copy/', $itemURI, '-copy-', position())" />
								</xsl:attribute>
						</arco-cd:involvesRelatedWork>
						<xsl:if
							test="../CRF/CRFS and (not(starts-with(lower-case(normalize-space(../CRF/CRFS)), 'nr')) and not(starts-with(lower-case(normalize-space(../CRF/CRFS)), 'n.r')))">
							<arco-core:note>
								<xsl:value-of select="normalize-space(../CRF/CRFS)" />
							</arco-core:note>
						</xsl:if>
					</rdf:Description>
					<!-- copy as an individual -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
										<xsl:value-of
							select="concat($NS, 'Copy/', $itemURI, '-copy-', position())" />
									</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
		                          		<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/Copy'" />
		                       		</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Copia ', position(), ' del bene culturale ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Copia ', position(), ' del bene culturale ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Copy ', position(), ' of cultural property ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Copy ', position(), ' of cultural property ', $itemURI)" />
						</l0:name>
						<xsl:if
							test="./COPR and (not(starts-with(lower-case(normalize-space(./COPR)), 'nr')) and not(starts-with(lower-case(normalize-space(./COPR)), 'n.r')))">
							<arco-cd:hasReferenceCatalogue>
								<xsl:attribute name="rdf:resource">
											<xsl:value-of
									select="concat($NS, 'ReferenceCatalogue/', $itemURI, '-reference-catalogue-', position())" />
										</xsl:attribute>
							</arco-cd:hasReferenceCatalogue>
						</xsl:if>
						<xsl:if
							test="./COPA and (not(starts-with(lower-case(normalize-space(./COPA)), 'nr')) and not(starts-with(lower-case(normalize-space(./COPA)), 'n.r')))">
							<arco-cd:hasAuthor>
								<xsl:attribute name="rdf:resource">
			            			<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./COPA))" />
			            		</xsl:attribute>
							</arco-cd:hasAuthor>
							<dc:creator>
								<xsl:attribute name="rdf:resource">
			            			<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./COPA))" />
			            		</xsl:attribute>
							</dc:creator>
							<pico:author>
								<xsl:attribute name="rdf:resource">
			            			<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./COPA))" />
			            		</xsl:attribute>
							</pico:author>
						</xsl:if>
						<xsl:if
							test="../CRF/CRFN or ../CRF/CRFB and (not(starts-with(lower-case(normalize-space(../CRF/CRFN)), 'nr')) and not(starts-with(lower-case(normalize-space(../CRF/CRFN)), 'n.r'))) and (not(starts-with(lower-case(normalize-space(../CRF/CRFB)), 'nr')) and not(starts-with(lower-case(normalize-space(../CRF/CRFB)), 'n.r')))">
							<arco-cd:hasAuthor>
								<xsl:attribute name="rdf:resource">
			            			<xsl:choose>
			            				<xsl:when test="../CRF/CRFN">
			            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(../CRF/CRFN))" />
			            				</xsl:when>
			            				<xsl:otherwise>
			            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(../CRF/CRFB))" />
			            				</xsl:otherwise>
			            			</xsl:choose>
			            		</xsl:attribute>
							</arco-cd:hasAuthor>
							<dc:creator>
								<xsl:attribute name="rdf:resource">
			            			<xsl:choose>
			            				<xsl:when test="../CRF/CRFN">
			            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(../CRF/CRFN))" />
			            				</xsl:when>
			            				<xsl:otherwise>
			            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(../CRF/CRFB))" />
			            				</xsl:otherwise>
			            			</xsl:choose>
			            		</xsl:attribute>
							</dc:creator>
							<pico:author>
								<xsl:attribute name="rdf:resource">
			            			<xsl:choose>
			            				<xsl:when test="../CRF/CRFN">
			            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(../CRF/CRFN))" />
			            				</xsl:when>
			            				<xsl:otherwise>
			            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(../CRF/CRFB))" />
			            				</xsl:otherwise>
			            			</xsl:choose>
			            		</xsl:attribute>
							</pico:author>
						</xsl:if>
						<xsl:if
							test="../CRF/CRFC and (not(starts-with(lower-case(normalize-space(../CRF/CRFC)), 'nr')) and not(starts-with(lower-case(normalize-space(../CRF/CRFC)), 'n.r')))">
							<arco-cd:relatedWorkLocation>
								<xsl:value-of select="normalize-space(../CRF/CRFC)" />
							</arco-cd:relatedWorkLocation>
						</xsl:if>
					</rdf:Description>
					<!-- reference catalogue as an individual -->
					<xsl:if
						test="./COPR and (not(starts-with(lower-case(normalize-space(./COPR)), 'nr')) and not(starts-with(lower-case(normalize-space(./COPR)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
											<xsl:value-of
								select="concat($NS, 'ReferenceCatalogue/', $itemURI, '-reference-catalogue-', position())" />
										</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
				            					<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/ReferenceCatalogue'" />
				            				</xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Repertorio della copia ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(./COPR))" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Repertorio della copia ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(./COPR))" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Reference catalogue of copy ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./COPR))" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Reference catalogue of copy ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./COPR))" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- author of copy (RO/COP/COPA) as an individual -->
					<xsl:if
						test="./COPA and (not(starts-with(lower-case(normalize-space(./COPA)), 'nr')) and not(starts-with(lower-case(normalize-space(./COPA)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
				            				<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./COPA))" />
				            			</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
				            					<xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
				            				</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./COPA)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./COPA)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- author of copy (RO/CRF/CRFN or RO/CRF/CRFB) as an individual -->
					<xsl:if
						test="../CRF/CRFN or ../CRF/CRFB and (not(starts-with(lower-case(normalize-space(../CRF/CRFN)), 'nr')) and not(starts-with(lower-case(normalize-space(../CRF/CRFN)), 'n.r'))) and (not(starts-with(lower-case(normalize-space(../CRF/CRFB)), 'nr')) and not(starts-with(lower-case(normalize-space(../CRF/CRFB)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
				            				<xsl:choose>
			            					<xsl:when test="../CRF/CRFN">
			            						<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(../CRF/CRFN))" />
			            					</xsl:when>
			            					<xsl:otherwise>
			            						<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(../CRF/CRFB))" />
			            					</xsl:otherwise>
			            				</xsl:choose>
				            			</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
				                                <xsl:choose>
				                                	<xsl:when
									test="lower-case(normalize-space(../CRF/CRFP))='p'">
                                        				<xsl:value-of
									select="'https://w3id.org/italia/onto/CPV/Person'" />
                                    				</xsl:when>
				                                    <xsl:when
									test="lower-case(normalize-space(../CRF/CRFP))='e'">
				                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/COV/Organization'" />
				                                    </xsl:when>
				                                    <xsl:when
									test="../CRF/CRFN">
				                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/CPV/Person'" />
				                                    </xsl:when>
				                                    <xsl:when
									test="../CRF/CRFB">
				                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/COV/Organization'" />
				                                    </xsl:when>
				                                    <xsl:otherwise>
				                                    	<xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
				                                    </xsl:otherwise>
				                                </xsl:choose>
                            				</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:choose>
									<xsl:when test="../CRF/CRFN">
										<xsl:value-of
											select="normalize-space(../CRF/CRFN)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="normalize-space(../CRF/CRFB)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<l0:name>
								<xsl:choose>
									<xsl:when test="../CRF/CRFN">
										<xsl:value-of
											select="normalize-space(../CRF/CRFN)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="normalize-space(../CRF/CRFB)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<xsl:if
								test="../CRF/CRFH and (not(starts-with(lower-case(normalize-space(../CRF/CRFH)), 'nr')) and not(starts-with(lower-case(normalize-space(../CRF/CRFH)), 'n.r')))">
								<arco-cd:agentLocalIdentifier>
									<xsl:value-of select="../CRF/CRFH" />
								</arco-cd:agentLocalIdentifier>
							</xsl:if>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- relation with a generic derivated work (if RO/CRF/CRFT != 'replica' 
				or 'contraffazione' or 'controtipo' or 'reimpiego' or 'copia') -->
			<xsl:if
				test="record/metadata/schede/*/RO/CRF and not(record/metadata/schede/*/RO/CRF/CRFT='copia' or record/metadata/schede/*/RO/CRF/CRFT='contraffazione' or record/metadata/schede/*/RO/CRF/CRFT='controtipo' or record/metadata/schede/*/RO/CRF/CRFT='replica' or record/metadata/schede/*/RO/CRF/CRFT='reimpiego')">
				<xsl:for-each select="record/metadata/schede/*/RO/CRF">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
								<xsl:value-of
							select="concat($NS, 'RelatedWorkSituation/', $itemURI, '-derivated-work-', position())" />
							</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                          		<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/RelatedWorkSituation'" />
	                       		</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Rapporto ', position(), ' tra il bene culturale ', $itemURI, ' e opera derivata')" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Rapporto ', position(), ' tra il bene culturale ', $itemURI, ' e opera derivata')" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Relation ', position(), ' between the cultural property ', $itemURI, ' and derivated work')" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Relation ', position(), ' between the cultural property ', $itemURI, ' and derivated work')" />
						</l0:name>
						<arco-cd:involvesRelatedWork>
							<xsl:attribute name="rdf:resource">
									<xsl:value-of
								select="concat($NS, 'DerivatedWork/', $itemURI, '-derivated-work-', position())" />
								</xsl:attribute>
						</arco-cd:involvesRelatedWork>
						<xsl:if
							test="./CRFS and (not(starts-with(lower-case(normalize-space(./CRFS)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFS)), 'n.r')))">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./CRFS)" />
							</arco-core:note>
						</xsl:if>
					</rdf:Description>
					<!-- derivated work as an individual -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
										<xsl:value-of
							select="concat($NS, 'DerivatedWork/', $itemURI, '-derivated-work-', position())" />
									</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
		                          		<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/DerivatedWork'" />
		                       		</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Opera derivata ', position(), ' del bene culturale ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Opera derivata ', position(), ' del bene culturale ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Derivated work ', position(), ' of cultural property ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Derivated work ', position(), ' of cultural property ', $itemURI)" />
						</l0:name>
						<xsl:if
							test="./CRFT and (not(starts-with(lower-case(normalize-space(./CRFT)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFT)), 'n.r')))">
							<arco-cd:hasDerivatedWorkType>
								<xsl:attribute name="rdf:resource">
										<xsl:value-of
									select="concat($NS, 'DerivatedWorkType/', arco-fn:urify(normalize-space(./CRFT)))" />
									</xsl:attribute>
							</arco-cd:hasDerivatedWorkType>
						</xsl:if>
						<xsl:if
							test="./CRFN or ./CRFB and (not(starts-with(lower-case(normalize-space(./CRFN)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFN)), 'n.r')) and not(starts-with(lower-case(normalize-space(./CRFB)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFB)), 'n.r')))">
							<arco-cd:hasAuthor>
								<xsl:attribute name="rdf:resource">
			            			<xsl:choose>
			            				<xsl:when test="./CRFN">
			            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFN))" />
			            				</xsl:when>
			            				<xsl:otherwise>
			            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFB))" />
			            				</xsl:otherwise>
			            			</xsl:choose>
			            		</xsl:attribute>
							</arco-cd:hasAuthor>
							<dc:creator>
								<xsl:attribute name="rdf:resource">
			            			<xsl:choose>
			            				<xsl:when test="./CRFN">
			            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFN))" />
			            				</xsl:when>
			            				<xsl:otherwise>
			            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFB))" />
			            				</xsl:otherwise>
			            			</xsl:choose>
			            		</xsl:attribute>
							</dc:creator>
							<pico:author>
								<xsl:attribute name="rdf:resource">
			            			<xsl:choose>
			            				<xsl:when test="./CRFN">
			            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFN))" />
			            				</xsl:when>
			            				<xsl:otherwise>
			            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFB))" />
			            				</xsl:otherwise>
			            			</xsl:choose>
			            		</xsl:attribute>
							</pico:author>
						</xsl:if>
						<xsl:if
							test="./CRFC and (not(starts-with(lower-case(normalize-space(./CRFC)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFC)), 'n.r')))">
							<arco-cd:relatedWorkLocation>
								<xsl:value-of select="normalize-space(./CRFC)" />
							</arco-cd:relatedWorkLocation>
						</xsl:if>
					</rdf:Description>
					<!-- author of derivated work as an individual -->
					<xsl:if
						test="./CRFN or ./CRFB and (not(starts-with(lower-case(normalize-space(./CRFN)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFN)), 'n.r')) and not(starts-with(lower-case(normalize-space(./CRFB)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFB)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
				            				<xsl:choose>
			            					<xsl:when test="./CRFN">
			            						<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFN))" />
			            					</xsl:when>
			            					<xsl:otherwise>
			            						<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFB))" />
			            					</xsl:otherwise>
			            				</xsl:choose>
				            			</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
				                                <xsl:choose>
				                                	<xsl:when
									test="lower-case(normalize-space(./CRFP))='p'">
                                        				<xsl:value-of
									select="'https://w3id.org/italia/onto/CPV/Person'" />
                                    				</xsl:when>
				                                    <xsl:when
									test="lower-case(normalize-space(./CRFP))='e'">
				                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/COV/Organization'" />
				                                    </xsl:when>
				                                    <xsl:when
									test="./CRFN">
				                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/CPV/Person'" />
				                                    </xsl:when>
				                                    <xsl:when
									test="./CRFB">
				                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/COV/Organization'" />
				                                    </xsl:when>
				                                    <xsl:otherwise>
				                                    	<xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
				                                    </xsl:otherwise>
				                                </xsl:choose>
                            				</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:choose>
									<xsl:when test="./CRFN">
										<xsl:value-of select="normalize-space(./CRFN)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="normalize-space(./CRFB)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<l0:name>
								<xsl:choose>
									<xsl:when test="./CRFN">
										<xsl:value-of select="normalize-space(./CRFN)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="normalize-space(./CRFB)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<xsl:if
								test="./CRFH and (not(starts-with(lower-case(normalize-space(./CRFH)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFH)), 'n.r')))">
								<arco-cd:agentLocalIdentifier>
									<xsl:value-of select="normalize-space(./CRFH)" />
								</arco-cd:agentLocalIdentifier>
							</xsl:if>
						</rdf:Description>
					</xsl:if>
					<!-- derivated work type as an individual -->
					<xsl:if
						test="./CRFT and (not(starts-with(lower-case(normalize-space(./CRFT)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFT)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
					            				<xsl:value-of
								select="concat($NS, 'DerivatedWorkType/', arco-fn:urify(normalize-space(./CRFT)))" />
					            			</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
					            					<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/DerivatedWorkType'" />
					            				</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./CRFT)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./CRFT)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- relation with a particular type of derivated work: forgery -->
			<xsl:if
				test="record/metadata/schede/*/RO/CRF/CFRT='contraffazione'">
				<xsl:for-each select="record/metadata/schede/*/RO/CRF">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
								<xsl:value-of
							select="concat($NS, 'RelatedWorkSituation/', $itemURI, '-forgery-', position())" />
							</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                          		<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/RelatedWorkSituation'" />
	                       		</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Rapporto ', position(), ' tra il bene culturale ', $itemURI, ' e contraffazione')" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Rapporto ', position(), ' tra il bene culturale ', $itemURI, ' e contraffazione')" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Relation ', position(), ' between the cultural property ', $itemURI, ' and forgery')" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Relation ', position(), ' between the cultural property ', $itemURI, ' and forgery')" />
						</l0:name>
						<arco-cd:involvesRelatedWork>
							<xsl:attribute name="rdf:resource">
									<xsl:value-of
								select="concat($NS, 'Forgery/', $itemURI, '-forgery-', position())" />
								</xsl:attribute>
						</arco-cd:involvesRelatedWork>
						<xsl:if test="./CRFS">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./CRFS)" />
							</arco-core:note>
						</xsl:if>
					</rdf:Description>
					<!-- forgery as an individual -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
								<xsl:value-of
							select="concat($NS, 'Forgery/', $itemURI, '-forgery-', position())" />
							</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                          		<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/Forgery'" />
	                       		</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Contraffazione ', position(), ' del bene culturale ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Contraffazione ', position(), ' del bene culturale ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Forgery ', position(), ' of cultural property ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Forgery ', position(), ' of cultural property ', $itemURI)" />
						</l0:name>
						<xsl:if test="./CRFN or ./CRFB and (not(starts-with(lower-case(normalize-space(./CRFN)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFN)), 'n.r')) and not(starts-with(lower-case(normalize-space(./CRFB)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFB)), 'n.r')))">
							<arco-cd:hasAuthor>
								<xsl:attribute name="rdf:resource">
		            				<xsl:choose>
		            					<xsl:when test="./CRFN">
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFN))" />
		            					</xsl:when>
		            					<xsl:otherwise>
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFB))" />
		            					</xsl:otherwise>
		            				</xsl:choose>
		            			</xsl:attribute>
							</arco-cd:hasAuthor>
							<dc:creator>
								<xsl:attribute name="rdf:resource">
		            				<xsl:choose>
		            					<xsl:when test="./CRFN">
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFN))" />
		            					</xsl:when>
		            					<xsl:otherwise>
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFB))" />
		            					</xsl:otherwise>
		            				</xsl:choose>
		            			</xsl:attribute>
							</dc:creator>
							<pico:author>
								<xsl:attribute name="rdf:resource">
		            				<xsl:choose>
		            					<xsl:when test="./CRFN">
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFN))" />
		            					</xsl:when>
		            					<xsl:otherwise>
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFB))" />
		            					</xsl:otherwise>
		            				</xsl:choose>
		            			</xsl:attribute>
							</pico:author>
						</xsl:if>
						<xsl:if
							test="./CRFC and (not(starts-with(lower-case(normalize-space(./CRFC)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFC)), 'n.r')))">
							<arco-cd:relatedWorkLocation>
								<xsl:value-of select="normalize-space(./CRFC)" />
							</arco-cd:relatedWorkLocation>
						</xsl:if>
					</rdf:Description>
					<!-- author of forgery as an individual -->
					<xsl:if
						test="./CRFN or ./CRFB and (not(starts-with(lower-case(normalize-space(./CRFN)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFN)), 'n.r')) and not(starts-with(lower-case(normalize-space(./CRFB)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFB)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
			            				<xsl:choose>
		            					<xsl:when test="./CRFN">
		            						<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFN))" />
		            					</xsl:when>
		            					<xsl:otherwise>
		            						<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFB))" />
		            					</xsl:otherwise>
		            				</xsl:choose>
			            			</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
			                                <xsl:choose>
			                                	<xsl:when
									test="lower-case(normalize-space(./CRFP))='p'">
                                       				<xsl:value-of
									select="'https://w3id.org/italia/onto/CPV/Person'" />
                                   				</xsl:when>
			                                    <xsl:when
									test="lower-case(normalize-space(./CRFP))='e'">
			                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/COV/Organization'" />
			                                    </xsl:when>
			                                    <xsl:when test="./CRFN">
			                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/CPV/Person'" />
			                                    </xsl:when>
			                                    <xsl:when test="./CRFB">
			                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/COV/Organization'" />
			                                    </xsl:when>
			                                    <xsl:otherwise>
			                                    	<xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
			                                    </xsl:otherwise>
			                                </xsl:choose>
                           				</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:choose>
									<xsl:when test="./CRFN">
										<xsl:value-of select="normalize-space(./CRFN)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="normalize-space(./CRFB)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<l0:name>
								<xsl:choose>
									<xsl:when test="./CRFN">
										<xsl:value-of select="normalize-space(./CRFN)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="normalize-space(./CRFB)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<xsl:if
								test="./CRFH and (not(starts-with(lower-case(normalize-space(./CRFH)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFH)), 'n.r')))">
								<arco-cd:agentLocalIdentifier>
									<xsl:value-of select="normalize-space(./CRFH)" />
								</arco-cd:agentLocalIdentifier>
							</xsl:if>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- relation with a particular type of derivated work: facsimile -->
			<xsl:if
				test="record/metadata/schede/*/RO/CRF/CFRT='controtipo'">
				<xsl:for-each select="record/metadata/schede/*/RO/CRF">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
								<xsl:value-of
							select="concat($NS, 'RelatedWorkSituation/', $itemURI, '-facsimile-', position())" />
							</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                          		<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/RelatedWorkSituation'" />
	                       		</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Rapporto ', position(), ' tra il bene culturale ', $itemURI, ' e controtipo')" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Rapporto ', position(), ' tra il bene culturale ', $itemURI, ' e controtipo')" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Relation ', position(), ' between the cultural property ', $itemURI, ' and facsimile')" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Relation ', position(), ' between the cultural property ', $itemURI, ' and facsimile')" />
						</l0:name>
						<arco-cd:involvesRelatedWork>
							<xsl:attribute name="rdf:resource">
									<xsl:value-of
								select="concat($NS, 'Facsimile/', $itemURI, '-facsimile-', position())" />
								</xsl:attribute>
						</arco-cd:involvesRelatedWork>
						<xsl:if test="./CRFS">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./CRFS)" />
							</arco-core:note>
						</xsl:if>
					</rdf:Description>
					<!-- facsimile as an individual -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
								<xsl:value-of
							select="concat($NS, 'Facsimile/', $itemURI, '-facsimile-', position())" />
							</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                          		<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/Facsimile'" />
	                       		</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Controtipo ', position(), ' del bene culturale ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Controtipo ', position(), ' del bene culturale ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Facsimile ', position(), ' of cultural property ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Facsimile ', position(), ' of cultural property ', $itemURI)" />
						</l0:name>
						<xsl:if test="./CRFN or ./CRFB and (not(starts-with(lower-case(normalize-space(./CRFN)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFN)), 'n.r')) and not(starts-with(lower-case(normalize-space(./CRFB)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFB)), 'n.r')))">
							<arco-cd:hasAuthor>
								<xsl:attribute name="rdf:resource">
		            				<xsl:choose>
		            					<xsl:when test="./CRFN">
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFN))" />
		            					</xsl:when>
		            					<xsl:otherwise>
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFB))" />
		            					</xsl:otherwise>
		            				</xsl:choose>
		            			</xsl:attribute>
							</arco-cd:hasAuthor>
							<dc:creator>
								<xsl:attribute name="rdf:resource">
		            				<xsl:choose>
		            					<xsl:when test="./CRFN">
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFN))" />
		            					</xsl:when>
		            					<xsl:otherwise>
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFB))" />
		            					</xsl:otherwise>
		            				</xsl:choose>
		            			</xsl:attribute>
							</dc:creator>
							<pico:author>
								<xsl:attribute name="rdf:resource">
		            				<xsl:choose>
		            					<xsl:when test="./CRFN">
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFN))" />
		            					</xsl:when>
		            					<xsl:otherwise>
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFB))" />
		            					</xsl:otherwise>
		            				</xsl:choose>
		            			</xsl:attribute>
							</pico:author>
						</xsl:if>
						<xsl:if test="./CRFC">
							<arco-cd:relatedWorkLocation>
								<xsl:value-of select="normalize-space(./CRFC)" />
							</arco-cd:relatedWorkLocation>
						</xsl:if>
					</rdf:Description>
					<!-- author of facsimile as an individual -->
					<xsl:if
						test="./CRFN or ./CRFB and (not(starts-with(lower-case(normalize-space(./CRFN)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFN)), 'n.r')) and not(starts-with(lower-case(normalize-space(./CRFB)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFB)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
			            				<xsl:choose>
		            					<xsl:when test="./CRFN">
		            						<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFN))" />
		            					</xsl:when>
		            					<xsl:otherwise>
		            						<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFB))" />
		            					</xsl:otherwise>
		            				</xsl:choose>
			            			</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
			                                <xsl:choose>
			                                	<xsl:when
									test="lower-case(normalize-space(./CRFP))='p'">
                                       				<xsl:value-of
									select="'https://w3id.org/italia/onto/CPV/Person'" />
                                   				</xsl:when>
			                                    <xsl:when
									test="lower-case(normalize-space(./CRFP))='e'">
			                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/COV/Organization'" />
			                                    </xsl:when>
			                                    <xsl:when test="./CRFN">
			                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/CPV/Person'" />
			                                    </xsl:when>
			                                    <xsl:when test="./CRFB">
			                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/COV/Organization'" />
			                                    </xsl:when>
			                                    <xsl:otherwise>
			                                    	<xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
			                                    </xsl:otherwise>
			                                </xsl:choose>
                           				</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:choose>
									<xsl:when test="./CRFN">
										<xsl:value-of select="normalize-space(./CRFN)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="normalize-space(./CRFB)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<l0:name>
								<xsl:choose>
									<xsl:when test="./CRFN">
										<xsl:value-of select="normalize-space(./CRFN)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="normalize-space(./CRFB)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<xsl:if
								test="./CRFH and (not(starts-with(lower-case(normalize-space(./CRFH)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFH)), 'n.r')))">
								<arco-cd:agentLocalIdentifier>
									<xsl:value-of select="normalize-space(./CRFH)" />
								</arco-cd:agentLocalIdentifier>
							</xsl:if>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- relation with a particular type of derivated work: same author copy -->
			<xsl:if test="record/metadata/schede/*/RO/CRF/CFRT='replica'">
				<xsl:for-each select="record/metadata/schede/*/RO/CRF">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
								<xsl:value-of
							select="concat($NS, 'RelatedWorkSituation/', $itemURI, '-same-author-copy-', position())" />
							</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                          		<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/RelatedWorkSituation'" />
	                       		</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Rapporto ', position(), ' tra il bene culturale ', $itemURI, ' e replica')" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Rapporto ', position(), ' tra il bene culturale ', $itemURI, ' e replica')" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Relation ', position(), ' between the cultural property ', $itemURI, ' and copy by the same author')" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Relation ', position(), ' between the cultural property ', $itemURI, ' and copy by the same author')" />
						</l0:name>
						<arco-cd:involvesRelatedWork>
							<xsl:attribute name="rdf:resource">
									<xsl:value-of
								select="concat($NS, 'SameAuthorCopy/', $itemURI, '-same-author-copy-', position())" />
								</xsl:attribute>
						</arco-cd:involvesRelatedWork>
						<xsl:if test="./CRFS">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./CRFS)" />
							</arco-core:note>
						</xsl:if>
					</rdf:Description>
					<!-- same author copy as an individual -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
								<xsl:value-of
							select="concat($NS, 'SameAuthorCopy/', $itemURI, '-same-author-copy-', position())" />
							</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                          		<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/SameAuthorCopy'" />
	                       		</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Replica ', position(), ' del bene culturale ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Replica ', position(), ' del bene culturale ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Copy ', position(), ' by the same author of cultural property ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Copy ', position(), ' by the same author of cultural property ', $itemURI)" />
						</l0:name>
						<xsl:if test="./CRFN or ./CRFB and (not(starts-with(lower-case(normalize-space(./CRFN)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFN)), 'n.r')) and not(starts-with(lower-case(normalize-space(./CRFB)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFB)), 'n.r')))">
							<arco-cd:hasAuthor>
								<xsl:attribute name="rdf:resource">
		            				<xsl:choose>
		            					<xsl:when test="./CRFN">
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFN	))" />
		            					</xsl:when>
		            					<xsl:otherwise>
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFB))" />
		            					</xsl:otherwise>
		            				</xsl:choose>
		            			</xsl:attribute>
							</arco-cd:hasAuthor>
							<dc:creator>
								<xsl:attribute name="rdf:resource">
		            				<xsl:choose>
		            					<xsl:when test="./CRFN">
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFN	))" />
		            					</xsl:when>
		            					<xsl:otherwise>
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFB))" />
		            					</xsl:otherwise>
		            				</xsl:choose>
		            			</xsl:attribute>
							</dc:creator>
							<pico:author>
								<xsl:attribute name="rdf:resource">
		            				<xsl:choose>
		            					<xsl:when test="./CRFN">
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFN	))" />
		            					</xsl:when>
		            					<xsl:otherwise>
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFB))" />
		            					</xsl:otherwise>
		            				</xsl:choose>
		            			</xsl:attribute>
							</pico:author>
						</xsl:if>
						<xsl:if
							test="./CRFC and (not(starts-with(lower-case(normalize-space(./CRFC)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFC)), 'n.r')))">
							<arco-cd:relatedWorkLocation>
								<xsl:value-of select="normalize-space(./CRFC)" />
							</arco-cd:relatedWorkLocation>
						</xsl:if>
					</rdf:Description>
					<!-- author of same author copy as an individual -->
					<xsl:if
						test="./CRFN or ./CRFB and (not(starts-with(lower-case(normalize-space(./CRFN)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFN)), 'n.r')) and not(starts-with(lower-case(normalize-space(./CRFB)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFB)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
			            				<xsl:choose>
		            					<xsl:when test="./CRFN">
		            						<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFN))" />
		            					</xsl:when>
		            					<xsl:otherwise>
		            						<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./CRFB))" />
		            					</xsl:otherwise>
		            				</xsl:choose>
			            			</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
			                                <xsl:choose>
			                                	<xsl:when
									test="lower-case(normalize-space(./CRFP))='p'">
                                       				<xsl:value-of
									select="'https://w3id.org/italia/onto/CPV/Person'" />
                                   				</xsl:when>
			                                    <xsl:when
									test="lower-case(normalize-space(./CRFP))='e'">
			                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/COV/Organization'" />
			                                    </xsl:when>
			                                    <xsl:when test="./CRFN">
			                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/CPV/Person'" />
			                                    </xsl:when>
			                                    <xsl:when test="./CRFB">
			                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/COV/Organization'" />
			                                    </xsl:when>
			                                    <xsl:otherwise>
			                                    	<xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
			                                    </xsl:otherwise>
			                                </xsl:choose>
                           				</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:choose>
									<xsl:when test="./CRFN">
										<xsl:value-of select="normalize-space(./CRFN)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="normalize-space(./CRFB)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<l0:name>
								<xsl:choose>
									<xsl:when test="./CRFN">
										<xsl:value-of select="normalize-space(./CRFN)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="normalize-space(./CRFB)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<xsl:if
								test="./CRFH and (not(starts-with(lower-case(normalize-space(./CRFH)), 'nr')) and not(starts-with(lower-case(normalize-space(./CRFH)), 'n.r')))">
								<arco-cd:agentLocalIdentifier>
									<xsl:value-of select="normalize-space(./CRFH)" />
								</arco-cd:agentLocalIdentifier>
							</xsl:if>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- relation with a particular type of derivated work: reuse -->
			<xsl:if
				test="record/metadata/schede/*/RO/REI or record/metadata/schede/*/RO/RIU or record/metadata/schede/*/RO/CRF/CFRT='reimpiego'">
				<xsl:for-each
					select="record/metadata/schede/*/RO/REI | record/metadata/schede/*/RO/RIU | record/metadata/schede/*/RO/CRF">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
								<xsl:value-of
							select="concat($NS, 'RelatedWorkSituation/', $itemURI, '-reuse-', position())" />
							</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                          		<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/RelatedWorkSituation'" />
	                       		</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Rapporto ', position(), ' tra il bene culturale ', $itemURI, ' e riuso')" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Rapporto ', position(), ' tra il bene culturale ', $itemURI, ' e riuso')" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Relation ', position(), ' between the cultural property ', $itemURI, ' and reuse')" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Relation ', position(), ' between the cultural property ', $itemURI, ' and reuse')" />
						</l0:name>
						<arco-cd:involvesRelatedWork>
							<xsl:attribute name="rdf:resource">
									<xsl:value-of
								select="concat($NS, 'Reuse/', $itemURI, '-reuse-', position())" />
								</xsl:attribute>
						</arco-cd:involvesRelatedWork>
						<xsl:if test="../CRF/CRFS">
							<arco-core:note>
								<xsl:value-of select="normalize-space(../CRF/CRFS)" />
							</arco-core:note>
						</xsl:if>
						<xsl:if test="../REIS">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./REIS)" />
							</arco-core:note>
						</xsl:if>
					</rdf:Description>
					<!-- reuse as an individual -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
								<xsl:value-of
							select="concat($NS, 'Reuse/', $itemURI, '-reuse-', position())" />
							</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                          		<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/Reuse'" />
	                       		</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Riuso ', position(), ' del bene culturale ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Riuso ', position(), ' del bene culturale ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Reuse ', position(), ' of cultural property ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Reuse ', position(), ' of cultural property ', $itemURI)" />
						</l0:name>
						<xsl:if test="../CRF/CRFN or ../CRF/CRFB and (not(starts-with(lower-case(normalize-space(../CRF/CRFN)), 'nr')) and not(starts-with(lower-case(normalize-space(../CRF/CRFN)), 'n.r')) and not(starts-with(lower-case(normalize-space(../CRF/CRFB)), 'nr')) and not(starts-with(lower-case(normalize-space(../CRF/CRFB)), 'n.r')))">
							<arco-cd:hasAuthor>
								<xsl:attribute name="rdf:resource">
		            				<xsl:choose>
		            					<xsl:when test="./CRFN">
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(../CRF/CRFN))" />
		            					</xsl:when>
		            					<xsl:otherwise>
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(../CRF/CRFB))" />
		            					</xsl:otherwise>
		            				</xsl:choose>
		            			</xsl:attribute>
							</arco-cd:hasAuthor>
							<dc:creator>
								<xsl:attribute name="rdf:resource">
		            				<xsl:choose>
		            					<xsl:when test="./CRFN">
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(../CRF/CRFN))" />
		            					</xsl:when>
		            					<xsl:otherwise>
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(../CRF/CRFB))" />
		            					</xsl:otherwise>
		            				</xsl:choose>
		            			</xsl:attribute>
							</dc:creator>
							<pico:author>
								<xsl:attribute name="rdf:resource">
		            				<xsl:choose>
		            					<xsl:when test="./CRFN">
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(../CRF/CRFN))" />
		            					</xsl:when>
		            					<xsl:otherwise>
		            						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(../CRF/CRFB))" />
		            					</xsl:otherwise>
		            				</xsl:choose>
		            			</xsl:attribute>
							</pico:author>
						</xsl:if>
						<xsl:if
							test="../CRF/CRFC and (not(starts-with(lower-case(normalize-space(../CRF/CRFC)), 'nr')) and not(starts-with(lower-case(normalize-space(../CRF/CRFC)), 'n.r')))">
							<arco-cd:relatedWorkLocation>
								<xsl:value-of select="normalize-space(../CRF/CRFC)" />
							</arco-cd:relatedWorkLocation>
						</xsl:if>
						<xsl:if test="./REID or ../RIU/RIUD">
							<tiapit:time>
								<xsl:choose>
									<xsl:when test="./REID">
										<xsl:value-of select="normalize-space(./REID)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="normalize-space(../RIU/RIUD)" />
									</xsl:otherwise>
								</xsl:choose>
							</tiapit:time>
						</xsl:if>
						<xsl:if
							test="./REIT or ../RIU/RIUT and (not(starts-with(lower-case(normalize-space(./REIT)), 'nr')) and not(starts-with(lower-case(normalize-space(./REIT)), 'n.r')) and not(starts-with(lower-case(normalize-space(../RIU/RIUT)), 'nr')) and not(starts-with(lower-case(normalize-space(../RIU/RIUT)), 'n.r')))">
							<arco-cd:hasDerivatedWorkType>
								<xsl:attribute name="rdf:resource">
									<xsl:choose>
										<xsl:when test="./REIT">
											<xsl:value-of
									select="concat($NS, 'DerivatedWorkType/', arco-fn:urify(normalize-space(./REIT)))" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of
									select="concat($NS, 'DerivatedWorkType/', arco-fn:urify(normalize-space(../RIU/RIUT)))" />
										</xsl:otherwise>
									</xsl:choose>
									</xsl:attribute>
							</arco-cd:hasDerivatedWorkType>
						</xsl:if>
					</rdf:Description>
					<!-- derivated work type as an individual -->
					<xsl:if
						test="./REIT or ../RIU/RIUT and (not(starts-with(lower-case(normalize-space(./REIT)), 'nr')) and not(starts-with(lower-case(normalize-space(./REIT)), 'n.r')) and not(starts-with(lower-case(normalize-space(../RIU/RIUT)), 'nr')) and not(starts-with(lower-case(normalize-space(../RIU/RIUT)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
					            				<xsl:choose>
													<xsl:when test="./REIT">
														<xsl:value-of
								select="concat($NS, 'DerivatedWorkType/', arco-fn:urify(normalize-space(./REIT)))" />
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of
								select="concat($NS, 'DerivatedWorkType/', arco-fn:urify(normalize-space(../RIU/RIUT)))" />
													</xsl:otherwise>
												</xsl:choose>
					            			</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
					            					<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/DerivatedWorkType'" />
					            				</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:choose>
									<xsl:when test="./REIT">
										<xsl:value-of select="normalize-space(./REIT)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="normalize-space(../RIU/RIUD)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<l0:name>
								<xsl:choose>
									<xsl:when test="./REIT">
										<xsl:value-of select="normalize-space(./REIT)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="normalize-space(../RIU/RIUD)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- author of reuse as an individual -->
					<xsl:if
						test="../CRF/CRFN or ../CRF/CRFB and (not(starts-with(lower-case(normalize-space(../CRF/CRFN)), 'nr')) and not(starts-with(lower-case(normalize-space(../CRF/CRFN)), 'n.r')) and not(starts-with(lower-case(normalize-space(../CRF/CRFB)), 'nr')) and not(starts-with(lower-case(normalize-space(../CRF/CRFB)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
			            				<xsl:choose>
		            					<xsl:when test="../CRF/CRFN">
		            						<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(../CRF/CRFN))" />
		            					</xsl:when>
		            					<xsl:otherwise>
		            						<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(../CRF/CRFB))" />
		            					</xsl:otherwise>
		            				</xsl:choose>
			            			</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
			                                <xsl:choose>
			                                	<xsl:when
									test="lower-case(normalize-space(../CRF/CRFP))='p'">
                                       				<xsl:value-of
									select="'https://w3id.org/italia/onto/CPV/Person'" />
                                   				</xsl:when>
			                                    <xsl:when
									test="lower-case(normalize-space(../CRF/CRFP))='e'">
			                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/COV/Organization'" />
			                                    </xsl:when>
			                                    <xsl:when
									test="../CRF/CRFN">
			                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/CPV/Person'" />
			                                    </xsl:when>
			                                    <xsl:when
									test="../CRF/CRFB">
			                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/COV/Organization'" />
			                                    </xsl:when>
			                                    <xsl:otherwise>
			                                    	<xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
			                                    </xsl:otherwise>
			                                </xsl:choose>
                           				</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:choose>
									<xsl:when test="../CRF/CRFN">
										<xsl:value-of
											select="normalize-space(../CRF/CRFN)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="normalize-space(../CRF/CRFB)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<l0:name>
								<xsl:choose>
									<xsl:when test="../CRF/CRFN">
										<xsl:value-of
											select="normalize-space(../CRF/CRFN)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="normalize-space(../CRF/CRFB)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<xsl:if
								test="../CRF/CRFH and (not(starts-with(lower-case(normalize-space(../CRF/CRFH)), 'nr')) and not(starts-with(lower-case(normalize-space(../CRF/CRFH)), 'n.r')))">
								<arco-cd:agentLocalIdentifier>
									<xsl:value-of select="../CRF/CRFH" />
								</arco-cd:agentLocalIdentifier>
							</xsl:if>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- relation with a particular type of derivated work: print in publication 
				(S) -->
			<xsl:if test="record/metadata/schede/*/RO/ADL">
				<xsl:for-each select="record/metadata/schede/*/RO/ADL">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
			                            <xsl:value-of
							select="concat($NS, 'RelatedWorkSituation/', $itemURI, '-print-in-publication-', position())" />
			                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                          		<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/RelatedWorkSituation'" />
	                       		</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Rapporto ', position(), ' tra la stampa ', $itemURI, ' e pubblicazione contenente la stampa')" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Rapporto ', position(), ' tra la stampa ', $itemURI, ' e pubblicazione contenente la stampa')" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Relation ', position(), ' between the print ', $itemURI, ' and publication with print')" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Relation ', position(), ' between the print ', $itemURI, ' and publication with print')" />
						</l0:name>
						<arco-cd:involvesRelatedWork>
							<xsl:attribute name="rdf:resource">
									<xsl:value-of
								select="concat($NS, 'PrintInPublication/', $itemURI, '-print-in-publication-', position())" />
								</xsl:attribute>
						</arco-cd:involvesRelatedWork>
					</rdf:Description>
					<!-- print in publication as an individual -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
								<xsl:value-of
							select="concat($NS, 'PrintInPublication/', $itemURI, '-print-in-publication-', position())" />
							</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                          		<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/PrintInPublication'" />
	                       		</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Pubblicazione ', position(), ' contenente la stampa ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Pubblicazione ', position(), ' contenente la stampa ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Publication ', position(), ' with print ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Publication ', position(), ' with print ', $itemURI)" />
						</l0:name>
						<xsl:if test="./ADLA and (not(starts-with(lower-case(normalize-space(./ADLA)), 'nr')) and not(starts-with(lower-case(normalize-space(./ADLA)), 'n.r')))">
							<arco-cd:hasAuthor>
								<xsl:attribute name="rdf:resource">
		            				<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./ADLA))" />
								</xsl:attribute>
							</arco-cd:hasAuthor>
							<dc:creator>
								<xsl:attribute name="rdf:resource">
		            				<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./ADLA))" />
								</xsl:attribute>
							</dc:creator>
							<pico:author>
								<xsl:attribute name="rdf:resource">
		            				<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./ADLA))" />
								</xsl:attribute>
							</pico:author>
						</xsl:if>
						<xsl:if
							test="./ADLL and (not(starts-with(lower-case(normalize-space(./ADLL)), 'nr')) and not(starts-with(lower-case(normalize-space(./ADLL)), 'n.r')))">
							<arco-cd:hasDerivatedWorkType>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="concat($NS, 'DerivatedWorkType/', arco-fn:urify(normalize-space(./ADLL)))" />
									</xsl:attribute>
							</arco-cd:hasDerivatedWorkType>
						</xsl:if>
						<xsl:if
							test="./ADLT and (not(starts-with(lower-case(normalize-space(./ADLT)), 'nr')) and not(starts-with(lower-case(normalize-space(./ADLT)), 'n.r')))">
							<arco-cd:hasTitle>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="concat($NS, 'Title/', $itemURI, '-publication-', arco-fn:urify(normalize-space(./ADLT)))" />
									</xsl:attribute>
							</arco-cd:hasTitle>
						</xsl:if>
						<xsl:if
							test="./ADLE and (not(starts-with(lower-case(normalize-space(./ADLE)), 'nr')) and not(starts-with(lower-case(normalize-space(./ADLE)), 'n.r')))">
							<arco-cd:hasEdition>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="concat($NS, 'Edition/', $itemURI, '-edition-', arco-fn:urify(normalize-space(./ADLE)))" />
									</xsl:attribute>
							</arco-cd:hasEdition>
						</xsl:if>
						<xsl:if test="./ADLP or ./ADLN">
							<arco-cd:hasReproduction>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="concat($NS, 'Reproduction/', $itemURI, '-reproduction')" />
									</xsl:attribute>
							</arco-cd:hasReproduction>
						</xsl:if>
						<xsl:if
							test="./ADLS and (not(starts-with(lower-case(normalize-space(./ADLS)), 'nr')) and not(starts-with(lower-case(normalize-space(./ADLS)), 'n.r')))">
							<arco-cd:hasReproduction>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="concat($NS, 'NoLongerInPublication/', $itemURI, '-reproduction')" />
									</xsl:attribute>
							</arco-cd:hasReproduction>
						</xsl:if>
					</rdf:Description>
					<!-- derivated work type as an individual -->
					<xsl:if
						test="./ADLL and (not(starts-with(lower-case(normalize-space(./ADLL)), 'nr')) and not(starts-with(lower-case(normalize-space(./ADLL)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
										<xsl:value-of
								select="concat($NS, 'DerivatedWorkType/', arco-fn:urify(normalize-space(./ADLL)))" />
					         </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
					            					<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/DerivatedWorkType'" />
					            				</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./ADLL)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./ADLL)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- print in publication title as an individual -->
					<xsl:if
						test="./ADLT and (not(starts-with(lower-case(normalize-space(./ADLT)), 'nr')) and not(starts-with(lower-case(normalize-space(./ADLT)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
										<xsl:value-of
								select="concat($NS, 'Title/', $itemURI, '-publication-', arco-fn:urify(normalize-space(./ADLT)))" />
					         </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
					            					<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/Title'" />
					            				</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./ADLT)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./ADLT)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- print in publication edition as an individual -->
					<xsl:if
						test="./ADLE and (not(starts-with(lower-case(normalize-space(./ADLE)), 'nr')) and not(starts-with(lower-case(normalize-space(./ADLE)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
										<xsl:value-of
								select="concat($NS, 'Edition/', $itemURI, '-edition-', arco-fn:urify(normalize-space(./ADLE)))" />
					         </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
					            					<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/Edition'" />
					            				</xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Edizione della pubblicazione contenente la stampa ', $itemURI, ': ', normalize-space(./ADLE))" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Edizione della pubblicazione contenente la stampa ', $itemURI, ': ', normalize-space(./ADLE))" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Edition of publication with print ', $itemURI, ': ', normalize-space(./ADLE))" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Edition of publication with print ', $itemURI, ': ', normalize-space(./ADLE))" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- print in publication reproduction as an individual -->
					<xsl:if test="./ADLP or ./ADLN">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
										<xsl:value-of
								select="concat($NS, 'Reproduction/', $itemURI, '-reproduction')" />
					         </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
					            					<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/Reproduction'" />
					            				</xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Riproduzione in pubblicazione della stampa ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Riproduzione in pubblicazione della stampa ', $itemURI)" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Reproduction in publication of print ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Reproduction in publication of print ', $itemURI)" />
							</l0:name>
							<arco-cd:hasReproductionPosition>
								<xsl:attribute name="rdf:resource">
								<xsl:choose>
									<xsl:when test="./ADLP">
										<xsl:value-of
									select="concat($NS, 'ReproductionPosition/', $itemURI, '-', arco-fn:urify(normalize-space(./ADLP)))" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
									select="concat($NS, 'ReproductionPosition/', $itemURI, '-reproduction-position')" />
									</xsl:otherwise>
								</xsl:choose>
								</xsl:attribute>
							</arco-cd:hasReproductionPosition>
						</rdf:Description>
						<!-- reproduction position as an individual -->
						<rdf:Description>
							<xsl:attribute name="rdf:about">
								<xsl:choose>
									<xsl:when test="./ADLP">
										<xsl:value-of
								select="concat($NS, 'ReproductionPosition/', $itemURI, '-', arco-fn:urify(normalize-space(./ADLP)))" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
								select="concat($NS, 'ReproductionPosition/', $itemURI, '-reproduction-position')" />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/ReproductionPosition'" />
								</xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:choose>
									<xsl:when test="./ADLP">
										<xsl:value-of
											select="concat('Posizione della riproduzione della stampa ', $itemURI, ' nella pubblicazione: ', normalize-space(./ADLP))" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Posizione della riproduzione della stampa ', $itemURI, ' nella pubblicazione')" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:choose>
									<xsl:when test="./ADLP">
										<xsl:value-of select="normalize-space(./ADLP)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Posizione della riproduzione della stampa ', $itemURI, ' nella pubblicazione: ', normalize-space(./ADLP))" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:choose>
									<xsl:when test="./ADLP">
										<xsl:value-of select="normalize-space(./ADLP)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Print ', $itemURI, ' reproduction position in publication: ', normalize-space())" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:choose>
									<xsl:when test="./ADLP">
										<xsl:value-of
											select="concat('Print ', $itemURI, ' reproduction position in publication: ', normalize-space(./ADLP))" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Print ', $itemURI, ' reproduction position in publication')" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<xsl:if
								test="./ADLN and (not(starts-with(lower-case(normalize-space(./ADLN)), 'nr')) and not(starts-with(lower-case(normalize-space(./ADLN)), 'n.r')))">
								<arco-cd:pageOrTableNumber>
									<xsl:value-of select="normalize-space(./ADLN)" />
								</arco-cd:pageOrTableNumber>
							</xsl:if>
						</rdf:Description>
					</xsl:if>
					<!-- no longer in publication as an individual -->
					<xsl:if
						test="./ADLS and (not(starts-with(lower-case(normalize-space(./ADLS)), 'nr')) and not(starts-with(lower-case(normalize-space(./ADLS)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
										<xsl:value-of
								select="concat($NS, 'NoLongerInPublication/', $itemURI, '-reproduction')" />
					         </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
					            					<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/NoLongerInPublication'" />
					            				</xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Riproduzione in pubblicazione della stampa ', $itemURI, ' non più presente in pubblicazione')" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Riproduzione in pubblicazione della stampa ', $itemURI, ' non più presente in pubblicatione')" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Reproduction in publication of print ', $itemURI, ' no longer in publication')" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Reproduction in publication of print ', $itemURI, ' no longer in publication')" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- author of print in publication as an individual -->
					<xsl:if
						test="./ADLA and (not(starts-with(lower-case(normalize-space(./ADLA)), 'nr')) and not(starts-with(lower-case(normalize-space(./ADLA)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		            				<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./ADLA))" />
			            			</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
			                            <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
                           				</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./ADLA)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./ADLA)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>

			<!-- ERROR, this element has already been created in another section of 
				the sheet <xsl:for-each select="record/metadata/schede/*/OG/OGD"> <rdf:Description> 
				<xsl:attribute name="rdf:about"> <xsl:value-of select="concat('https://w3id.org/arco/resource/DesignationInTime/', 
				arco-fn:urify(normalize-space(./OGDN)))" /> </xsl:attribute> <rdfs:label> 
				<xsl:value-of select="normalize-space(./OGDN)" /> </rdfs:label> <l0:name> 
				<xsl:value-of select="normalize-space(./ODGN)" /> </l0:name> </rdf:Description> 
				</xsl:for-each> -->
			<xsl:for-each select="record/metadata/schede/*/AU/EDT">
				<xsl:if test="$sheetType='OAC' or $sheetType='S'">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                            <xsl:choose>
                                <xsl:when
								test="./EDTE and ./EDTL">
                                    <xsl:value-of
								select="concat($NS, 'Edition/', $itemURI, '-', arco-fn:urify(normalize-space(./EDTE)), '-', arco-fn:urify(normalize-space(./EDTL)))" />
                                </xsl:when>
                                <xsl:when test="./EDTE">
                                    <xsl:value-of
								select="concat($NS, 'Edition/', $itemURI, '-', arco-fn:urify(normalize-space(./EDTE)))" />
                                </xsl:when>
                                <xsl:when test="./EDTL">
                                    <xsl:value-of
								select="concat($NS, 'Edition/', $itemURI, '-', arco-fn:urify(normalize-space(./EDTL)))" />
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of
								select="concat($NS, 'Edition/', $itemURI, '-', position())" />
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/Edition'" />
                            </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:choose>
									<xsl:when test="./EDTE and ./EDTL">
										<xsl:value-of
											select="concat('Edizione ', normalize-space(./EDTE), '-', normalize-space(./EDTL), ' del bene ', $itemURI)" />
									</xsl:when>
									<xsl:when test="./EDTE">
										<xsl:value-of
											select="concat('Edizione ', normalize-space(./EDTE), ' del bene ', $itemURI)" />
									</xsl:when>
									<xsl:when test="./EDTL">
										<xsl:value-of
											select="concat('Edizione ', normalize-space(./EDTL), ' del bene ', $itemURI)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Edizione ', position(), ' del bene ', $itemURI)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:choose>
									<xsl:when test="./EDTE and ./EDTL">
										<xsl:value-of
											select="concat('Edizione ', normalize-space(./EDTE), '-', normalize-space(./EDTL), ' del bene ', $itemURI)" />
									</xsl:when>
									<xsl:when test="./EDTE">
										<xsl:value-of
											select="concat('Edizione ', normalize-space(./EDTE), ' del bene ', $itemURI)" />
									</xsl:when>
									<xsl:when test="./EDTL">
										<xsl:value-of
											select="concat('Edizione ', normalize-space(./EDTL), ' del bene ', $itemURI)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Edizione ', position(), ' del bene ', $itemURI)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:choose>
									<xsl:when test="./EDTE and ./EDTL">
										<xsl:value-of
											select="concat('Edition ', normalize-space(./EDTE), '-', normalize-space(./EDTL), ' of cultural property ', $itemURI)" />
									</xsl:when>
									<xsl:when test="./EDTE">
										<xsl:value-of
											select="concat('Edition ', normalize-space(./EDTE), ' of cultural property ', $itemURI)" />
									</xsl:when>
									<xsl:when test="./EDTL">
										<xsl:value-of
											select="concat('Edition ', normalize-space(./EDTL), ' of cultural property ', $itemURI)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Edition ', position(), ' of cultural property ', $itemURI)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:choose>
									<xsl:when test="./EDTE and ./EDTL">
										<xsl:value-of
											select="concat('Edition ', normalize-space(./EDTE), '-', normalize-space(./EDTL), ' of cultural property ', $itemURI)" />
									</xsl:when>
									<xsl:when test="./EDTE">
										<xsl:value-of
											select="concat('Edition ', normalize-space(./EDTE), ' of cultural property ', $itemURI)" />
									</xsl:when>
									<xsl:when test="./EDTL">
										<xsl:value-of
											select="concat('Edition ', normalize-space(./EDTL), ' of cultural property ', $itemURI)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Edition ', position(), ' of cultural property ', $itemURI)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<xsl:if
								test="./EDTE and (not(starts-with(lower-case(normalize-space(./EDTE)), 'nr')) and not(starts-with(lower-case(normalize-space(./EDTE)), 'n.r')))">
								<tiapit:time>
									<xsl:value-of select="normalize-space(./EDTE)" />
								</tiapit:time>
							</xsl:if>
							<xsl:if
								test="./EDTL and (not(starts-with(lower-case(normalize-space(./EDTL)), 'nr')) and not(starts-with(lower-case(normalize-space(./EDTL)), 'n.r')))">
								<arco-cd:editionLocation>
									<xsl:value-of select="normalize-space(./EDTL)" />
								</arco-cd:editionLocation>
							</xsl:if>
							<roapit:holdsRoleInTime>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="concat($NS, 'TimeIndexedRole/', $itemURI, '-edition-', position())" />
                            </xsl:attribute>
							</roapit:holdsRoleInTime>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                            <xsl:attribute
								name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'TimeIndexedRole/', $itemURI, '-edition-', position())" />
                            </xsl:attribute>
                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/TimeIndexedRole'" />
                            </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:choose>
									<xsl:when
										test="./EDTR and (not(starts-with(lower-case(normalize-space(./EDTR)), 'nr')) and not(starts-with(lower-case(normalize-space(./EDTR)), 'n.r')))">
										<xsl:value-of
											select="concat(normalize-space(./EDTR), ' del bene ', $itemURI)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Ruolo nel tempo del bene ', $itemURI)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:choose>
									<xsl:when
										test="./EDTR and (not(starts-with(lower-case(normalize-space(./EDTR)), 'nr')) and not(starts-with(lower-case(normalize-space(./EDTR)), 'n.r')))">
										<xsl:value-of
											select="concat(normalize-space(./EDTR), ' of cultural property ', $itemURI)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Time indexed role of cultural property ', $itemURI)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<xsl:if test="./EDTN and (not(starts-with(lower-case(normalize-space(./EDTN)), 'nr')) and not(starts-with(lower-case(normalize-space(./EDTN)), 'n.r')))">
								<roapit:isRoleInTimeOf>
									<xsl:attribute name="rdf:resource">
                                    <xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(./EDTN))" />
                                </xsl:attribute>
								</roapit:isRoleInTimeOf>
							</xsl:if>
							<xsl:if
								test="./EDTR and (not(starts-with(lower-case(normalize-space(./EDTR)), 'nr')) and not(starts-with(lower-case(normalize-space(./EDTR)), 'n.r')))">
								<roapit:withRole>
									<xsl:attribute name="rdf:resource">
                                    <xsl:value-of
										select="concat($NS, 'Role/', arco-fn:urify(normalize-space(./EDTR)))" />
                                </xsl:attribute>
								</roapit:withRole>
							</xsl:if>
						</rdf:Description>
						<xsl:if
							test="./EDTR and (not(starts-with(lower-case(normalize-space(./EDTR)), 'nr')) and not(starts-with(lower-case(normalize-space(./EDTR)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                <xsl:value-of
									select="concat($NS, 'Role/', arco-fn:urify(normalize-space(./EDTR)))" />
                            </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                    <xsl:value-of
										select="'https://w3id.org/italia/onto/RO/Role'" />
                                </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(./EDTR)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./EDTR)" />
								</l0:name>
							</rdf:Description>
						</xsl:if>
						<xsl:if test="./EDTN and (not(starts-with(lower-case(normalize-space(./EDTN)), 'nr')) and not(starts-with(lower-case(normalize-space(./EDTN)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(./EDTN))" />
                            </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                    <xsl:value-of
										select="'https://w3id.org/italia/onto/l0/Agent'" />
                                </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(./EDTN)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./EDTN)" />
								</l0:name>
								<xsl:if
									test="./EDTD and (not(starts-with(lower-case(normalize-space(./EDTD)), 'nr')) and not(starts-with(lower-case(normalize-space(./EDTD)), 'n.r')))">
									<arco-cd:agentDate>
										<xsl:value-of select="normalize-space(./EDTD)" />
									</arco-cd:agentDate>
								</xsl:if>
							</rdf:Description>
						</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<!-- dating of cultural property -->
			<xsl:for-each select="record/metadata/schede/*/DT">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of select="concat($NS, 'Dating/', $itemURI, '-', position())" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/Dating'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="it">
						<xsl:value-of select="concat('Cronologia ', position(), ' del bene ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of select="concat('Dating ', position(), ' of cultural property ', $itemURI)" />
					</l0:name>
					<l0:name xml:lang="it">
						<xsl:value-of select="concat('Cronologia ', position(), ' del bene ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of select="concat('Dating ', position(), ' of cultural property ', $itemURI)" />
					</rdfs:label>
					<arco-cd:hasDatingEvent>
						<xsl:choose>
							<xsl:when
								test="./DTN/DTNS and (not(starts-with(lower-case(normalize-space(./DTN/DTNS)), 'nr')) and not(starts-with(lower-case(normalize-space(./DTN/DTNS)), 'n.r')))">
								<xsl:attribute name="rdf:resource">
                                    <xsl:value-of select="concat($NS, 'Event/', $itemURI, '-', arco-fn:urify(normalize-space(./DTN/DTNS)))" />
                                </xsl:attribute>
							</xsl:when>
							<xsl:otherwise>
								<xsl:attribute name="rdf:resource">
                                    <xsl:value-of
									select="concat($NS, 'Event/', $itemURI, '-creation-', position())" />
                                </xsl:attribute>
							</xsl:otherwise>
						</xsl:choose>
					</arco-cd:hasDatingEvent>
					<!-- Source of dating -->
					<xsl:if
						test="./DTM and (not(starts-with(lower-case(normalize-space(./DTM)), 'nr')) and not(starts-with(lower-case(normalize-space(./DTM)), 'n.r')))">
						<arco-cd:hasInterpretationCriterion>
							<xsl:choose>
								<xsl:when test="./DTM/DTMM">
									<xsl:attribute name="rdf:resource">
                                    <xsl:value-of
										select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./DTM/DTMM)))" />
                                </xsl:attribute>
								</xsl:when>
								<xsl:otherwise>
									<xsl:attribute name="rdf:resource">
                                    <xsl:value-of
										select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./DTM)))" />
                                </xsl:attribute>
								</xsl:otherwise>
							</xsl:choose>
						</arco-cd:hasInterpretationCriterion>
					</xsl:if>
				</rdf:Description>
				<!-- Source of dating as individual -->
				<xsl:if test="./DTM and (not(starts-with(lower-case(normalize-space(./DTM)), 'nr')) and not(starts-with(lower-case(normalize-space(./DTM)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:choose>
                                <xsl:when test="./DTM/DTMM">
                                    <xsl:value-of
							select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./DTM/DTMM)))" />
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of
							select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./DTM)))" />
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/InterpretationCriterion'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:choose>
								<xsl:when test="./DTM/DTMM">
									<xsl:value-of select="normalize-space(./DTM/DTMM)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="normalize-space(./DTM)" />
								</xsl:otherwise>
							</xsl:choose>
						</rdfs:label>
						<l0:name>
							<xsl:choose>
								<xsl:when test="./DTM/DTMM">
									<xsl:value-of select="normalize-space(./DTM/DTMM)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="normalize-space(./DTM)" />
								</xsl:otherwise>
							</xsl:choose>
						</l0:name>
						<xsl:if test="./DTM/DTMS">
							<arco-core:specifications>
								<xsl:value-of select="normalize-space(./DTM/DTMS)" />
							</arco-core:specifications>
						</xsl:if>
					</rdf:Description>
				</xsl:if>
				
				<!-- Dating event as individual -->
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:choose>
                            <xsl:when
						test="./DTN/DTNS and (not(starts-with(lower-case(normalize-space(./DTN/DTNS)), 'nr')) and not(starts-with(lower-case(normalize-space(./DTN/DTNS)), 'n.r')))">
                                <xsl:value-of
						select="concat($NS, 'Event/', $itemURI, '-', arco-fn:urify(normalize-space(./DTN/DTNS)))" />
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of
						select="concat($NS, 'Event/', $itemURI, '-creation-', position())" />
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of select="'https://w3id.org/italia/onto/l0/Event'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="it">
						<xsl:choose>
							<xsl:when test="./DTN/DTNS">
								<xsl:value-of select="normalize-space(./DTN/DTNS)" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="concat('Realizzazione del bene ', $itemURI)" />
							</xsl:otherwise>
						</xsl:choose>
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:choose>
							<xsl:when test="./DTN/DTNS">
								<xsl:value-of select="normalize-space(./DTN/DTNS)" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of
									select="concat('Realizzazione del bene ', $itemURI)" />
							</xsl:otherwise>
						</xsl:choose>
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:choose>
							<xsl:when test="./DTN/DTNS">
								<xsl:value-of select="normalize-space(./DTN/DTNS)" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of
									select="concat('Creation of cultural property ', $itemURI)" />
							</xsl:otherwise>
						</xsl:choose>
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:choose>
							<xsl:when test="./DTN/DTNS">
								<xsl:value-of select="normalize-space(./DTN/DTNS)" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of
									select="concat('Creation of cultural property ', $itemURI)" />
							</xsl:otherwise>
						</xsl:choose>
					</l0:name>
					<xsl:if test="./DTN/DTNN">
						<arco-core:description>
							<xsl:value-of select="normalize-space(./DTN/DTNN)" />
						</arco-core:description>
					</xsl:if>
					<xsl:if test="./DTZ">
						<tiapit:atTime>
							<xsl:attribute name="rdf:resource">
                                <xsl:choose>
                                    <xsl:when test="./DTZ/DTZS">
                                        <xsl:value-of select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./DTZ/DTZG)), '-',  arco-fn:urify(normalize-space(./DTZ/DTZS)))" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:value-of select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./DTZ/DTZG)))" />
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:attribute>
						</tiapit:atTime>
						<xsl:if test="./DTS">
							<xsl:if test="./DTS/DTSI or ./DTS/DTSF">
								<xsl:variable name="startDate">
									<xsl:choose>
										<xsl:when test="./DTS/DTSV">
											<xsl:value-of
												select="concat(normalize-space(./DTS/DTSV), ' ', normalize-space(./DTS/DTSI))" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of
												select="normalize-space(./DTS/DTSI)" />
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:variable name="endDate">
									<xsl:choose>
										<xsl:when test="./DTS/DTSL">
											<xsl:value-of
												select="concat(normalize-space(./DTS/DTSL), ' ', normalize-space(./DTS/DTSF))" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of
												select="normalize-space(./DTS/DTSF)" />
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<arco-cd:specificTime>
									<xsl:attribute name="rdf:resource">
		                            	<xsl:value-of select="concat($NS, 'TimeInterval/', arco-fn:urify(concat($startDate, '-',  $endDate)))" />
		                        	</xsl:attribute>
								</arco-cd:specificTime>
							</xsl:if>
						</xsl:if>
					</xsl:if>
				</rdf:Description>

				<!-- TimeInterval as individual -->
				<xsl:if test="./DTZ">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:choose>
                                <xsl:when test="./DTZ/DTZS">
                                    <xsl:value-of
							select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./DTZ/DTZG)), '-',  arco-fn:urify(normalize-space(./DTZ/DTZS)))" />
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of
							select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./DTZ/DTZG)))" />
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/italia/onto/TI/TimeInterval'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:choose>
								<xsl:when test="./DTZ/DTZS">
									<xsl:value-of
										select="concat(normalize-space(./DTZ/DTZG), ' ', normalize-space(./DTZ/DTZS))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="normalize-space(./DTZ/DTZG)" />
								</xsl:otherwise>
							</xsl:choose>
						</rdfs:label>
						<l0:name>
							<xsl:choose>
								<xsl:when test="./DTZ/DTZS">
									<xsl:value-of
										select="concat(normalize-space(./DTZ/DTZG), ' ', normalize-space(./DTZ/DTZS))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="normalize-space(./DTZ/DTZG)" />
								</xsl:otherwise>
							</xsl:choose>
						</l0:name>
						<tiapit:time>
							<xsl:choose>
								<xsl:when test="./DTZ/DTZS">
									<xsl:value-of
										select="concat(normalize-space(./DTZ/DTZG), ' ', normalize-space(./DTZ/DTZS))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="normalize-space(./DTZ/DTZG)" />
								</xsl:otherwise>
							</xsl:choose>
						</tiapit:time>
						<!-- xsl:if test="./DTS"> <arco-arco:startTime> <xsl:choose> <xsl:when 
							test="./DTS/DTSV"> <xsl:value-of select="concat(normalize-space(./DTS/DTSV), 
							' ', normalize-space(./DTS/DTSI))" /> </xsl:when> <xsl:otherwise> <xsl:value-of 
							select="normalize-space(./DTS/DTSI)" /> </xsl:otherwise> </xsl:choose> </arco-arco:startTime> 
							<arco-arco:endTime> <xsl:choose> <xsl:when test="./DTS/DTSL"> <xsl:value-of 
							select="concat(normalize-space(./DTS/DTSL), ' ', normalize-space(./DTS/DTSF))" 
							/> </xsl:when> <xsl:otherwise> <xsl:value-of select="normalize-space(./DTS/DTSF)" 
							/> </xsl:otherwise> </xsl:choose> </arco-arco:endTime> </xsl:if -->
					</rdf:Description>
					<!-- Time intervall with start time and end time -->
					<xsl:if test="./DTS">
						<xsl:if test="./DTS/DTSI or ./DTS/DTSF">
							<xsl:variable name="startDate">
								<xsl:choose>
									<xsl:when test="./DTS/DTSV">
										<xsl:value-of
											select="concat(normalize-space(./DTS/DTSV), ' ', normalize-space(./DTS/DTSI))" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="normalize-space(./DTS/DTSI)" />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:variable name="endDate">
								<xsl:choose>
									<xsl:when test="./DTS/DTSL">
										<xsl:value-of
											select="concat(normalize-space(./DTS/DTSL), ' ', normalize-space(./DTS/DTSF))" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="normalize-space(./DTS/DTSF)" />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<rdf:Description>
								<xsl:attribute name="rdf:about">
		                            <xsl:value-of
									select="concat($NS, 'TimeInterval/', arco-fn:urify(concat($startDate, '-',  $endDate)))" />
		                        </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
		                                <xsl:value-of
										select="'https://w3id.org/italia/onto/TI/TimeInterval'" />
		                            </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of
										select="concat($startDate, ' - ', $endDate)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of
										select="concat($startDate, ' - ', $endDate)" />
								</l0:name>
								<xsl:if test="./DTS">
									<arco-arco:startTime>
										<xsl:value-of select="$startDate" />
									</arco-arco:startTime>
									<arco-arco:endTime>
										<xsl:value-of select="$endDate" />
									</arco-arco:endTime>
								</xsl:if>
							</rdf:Description>
						</xsl:if>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<!-- dating of cultural property for A norm -->
			<xsl:for-each select="record/metadata/schede/A/RE">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS, 'Dating/', $itemURI, '-', position())" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of select="'https://w3id.org/arco/ontology/context-description/Dating'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="it">
						<xsl:value-of select="concat('Cronologia ', position(), ' del bene ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of select="concat('Dating ', position(), ' of cultural property ', $itemURI)" />
					</l0:name>
					<l0:name xml:lang="it">
						<xsl:value-of select="concat('Cronologia ', position(), ' del bene ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of select="concat('Dating ', position(), ' of cultural property ', $itemURI)" />
					</rdfs:label>
					<arco-cd:hasDatingEvent>
						<xsl:choose>
							<xsl:when test="./REN/RENS and (not(starts-with(lower-case(normalize-space(./REN/RENS)), 'nr')) and not(starts-with(lower-case(normalize-space(./REN/RENS)), 'n.r')))">
								<xsl:attribute name="rdf:resource">
                                    <xsl:value-of select="concat($NS, 'Event/', $itemURI, arco-fn:urify(normalize-space(./REN/RENS)))" />
                                </xsl:attribute>
							</xsl:when>
							<xsl:otherwise>
								<xsl:attribute name="rdf:resource">
                                    <xsl:value-of
									select="concat($NS, 'Event/', $itemURI, '-creation-', position())" />
                                </xsl:attribute>
							</xsl:otherwise>
						</xsl:choose>
					</arco-cd:hasDatingEvent>
					<!-- Source of dating -->
					<xsl:if test="./REN/RENF and (not(starts-with(lower-case(normalize-space(./REN/RENF)), 'nr')) and not(starts-with(lower-case(normalize-space(./REN/RENF)), 'n.r')))">
						<arco-cd:hasInterpretationCriterion>
							<xsl:attribute name="rdf:resource">
                                    <xsl:value-of
								select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./REN/RENF)))" />
                                </xsl:attribute>
						</arco-cd:hasInterpretationCriterion>
					</xsl:if>
				</rdf:Description>
				<!-- Source of dating as individual -->
				<xsl:if test="./REN/RENF and (not(starts-with(lower-case(normalize-space(./REN/RENF)), 'nr')) and not(starts-with(lower-case(normalize-space(./REN/RENF)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:value-of
							select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./REN/RENF)))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/InterpretationCriterion'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./REN/RENF)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./REN/RENF)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- event of dating -->
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:choose>
                            <xsl:when test="./REN/RENS and (not(starts-with(lower-case(normalize-space(./REN/RENS)), 'nr')) and not(starts-with(lower-case(normalize-space(./REN/RENS)), 'n.r')))">
                                <xsl:value-of select="concat($NS, 'Event/', $itemURI, arco-fn:urify(normalize-space(./REN/RENS)))" />
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="concat($NS, 'Event/', $itemURI, '-creation-', position())" />
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of select="'https://w3id.org/italia/onto/l0/Event'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="it">
						<xsl:choose>
							<xsl:when test="./REN/RENS">
								<xsl:value-of select="normalize-space(./REN/RENS)" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="concat('Realizzazione del bene ', $itemURI)" />
							</xsl:otherwise>
						</xsl:choose>
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:choose>
							<xsl:when test="./REN/RENS">
								<xsl:value-of select="normalize-space(./REN/RENS)" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="concat('Realizzazione del bene ', $itemURI)" />
							</xsl:otherwise>
						</xsl:choose>
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:choose>
							<xsl:when test="./REN/RENS">
								<xsl:value-of select="normalize-space(./REN/RENS)" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="concat('Creation of cultural property ', $itemURI)" />
							</xsl:otherwise>
						</xsl:choose>
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:choose>
							<xsl:when test="./REN/RENS">
								<xsl:value-of select="normalize-space(./REN/RENS)" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="concat('Creation of cultural property ', $itemURI)" />
							</xsl:otherwise>
						</xsl:choose>
					</l0:name>
					<xsl:if test="./REN/RENN">
						<arco-core:description>
							<xsl:value-of select="normalize-space(./REN/RENN)" />
						</arco-core:description>
					</xsl:if>
					<!-- atTime -->
					<tiapit:atTime>
						<xsl:variable name="relv">
							<xsl:choose>
								<xsl:when test="./REL/RELV">
									<xsl:value-of
										select="concat(arco-fn:urify(normalize-space(./REL/RELV)), '-')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="relw">
							<xsl:choose>
								<xsl:when test="./REL/RELW">
									<xsl:value-of
										select="concat(arco-fn:urify(normalize-space(./REL/RELW)), '-')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="relf">
							<xsl:choose>
								<xsl:when test="./REL/RELF">
									<xsl:value-of
										select="concat(arco-fn:urify(normalize-space(./REL/RELF)), '-')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revv">
							<xsl:choose>
								<xsl:when test="./REV/REVV">
									<xsl:value-of
										select="concat(arco-fn:urify(normalize-space(./REV/REVV)), '-')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revw">
							<xsl:choose>
								<xsl:when test="./REV/REVW">
									<xsl:value-of select="concat(arco-fn:urify(normalize-space(./REV/REVW)), '-')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revf">
							<xsl:choose>
								<xsl:when test="./REV/REVF">
									<xsl:value-of select="concat(arco-fn:urify(normalize-space(./REV/REVF)), '-')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="rels">
							<xsl:choose>
								<xsl:when test="./REL/RELW">
									<xsl:value-of
										select="concat($relw, $relf, arco-fn:urify(normalize-space(./REL/RELS)))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="concat($relv, $relf, arco-fn:urify(normalize-space(./REL/RELS)))" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revs">
							<xsl:choose>
								<xsl:when test="./REV/REVW">
									<xsl:value-of
										select="concat($revw, $revf, arco-fn:urify(normalize-space(./REV/REVS)))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="concat($revv, $revf, arco-fn:urify(normalize-space(./REV/REVS)))" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="relx">
							<xsl:choose>
								<xsl:when test="./REL/RELX">
									<xsl:value-of
										select="concat(arco-fn:urify(normalize-space(./REL/RELX)), '-')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revx">
							<xsl:choose>
								<xsl:when test="./REV/REVX">
									<xsl:value-of
										select="concat(arco-fn:urify(normalize-space(./REV/REVX)), '-')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:attribute name="rdf:resource">
							<xsl:choose>
								<xsl:when test="./REL/RELS and not(./REV/REVS)">
									<xsl:value-of select="concat($NS, 'TimeInterval/', $rels, '-', $revx, arco-fn:urify(normalize-space(./REV/REVI)))" />
								</xsl:when>
								<xsl:when test="./REV/REVS and not(./REL/RELS)">
									<xsl:value-of select="concat($NS, 'TimeInterval/', $relx, arco-fn:urify(normalize-space(./REL/RELI)), '-', $revs)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="concat($NS, 'TimeInterval/', $rels, '-', $revs)" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:attribute>
					</tiapit:atTime>
					<!-- specific time -->
					<xsl:if test="./REV/REVI or ./REL/RELI">
						<xsl:variable name="startDate">
							<xsl:choose>
								<xsl:when test="./REL/RELX">
									<xsl:value-of
										select="concat(normalize-space(./REL/RELI), ' ', normalize-space(./REL/RELX))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="normalize-space(./REL/RELI)" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="endDate">
							<xsl:choose>
								<xsl:when test="./REV/REVX">
									<xsl:value-of
										select="concat(normalize-space(./REV/REVI), ' ', normalize-space(./REV/REVX))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="normalize-space(./REV/REVI)" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<arco-cd:specificTime>
							<xsl:attribute name="rdf:resource">
		                            	<xsl:value-of
								select="concat($NS, 'TimeInterval/', arco-fn:urify(concat($startDate, '-',  $endDate)))" />
		                        	</xsl:attribute>
						</arco-cd:specificTime>
					</xsl:if>
				</rdf:Description>
				<!-- time interval as an individual -->
				<rdf:Description>
					<xsl:attribute name="rdf:about">
						<xsl:variable name="relv">
							<xsl:choose>
								<xsl:when test="./REL/RELV">
									<xsl:value-of
										select="concat(arco-fn:urify(normalize-space(./REL/RELV)), '-')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="relw">
							<xsl:choose>
								<xsl:when test="./REL/RELW">
									<xsl:value-of
										select="concat(arco-fn:urify(normalize-space(./REL/RELW)), '-')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="relf">
							<xsl:choose>
								<xsl:when test="./REL/RELF">
									<xsl:value-of
										select="concat(arco-fn:urify(normalize-space(./REL/RELF)), '-')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revv">
							<xsl:choose>
								<xsl:when test="./REV/REVV">
									<xsl:value-of
										select="concat(arco-fn:urify(normalize-space(./REV/REVV)), '-')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revw">
							<xsl:choose>
								<xsl:when test="./REV/REVW">
									<xsl:value-of select="concat(arco-fn:urify(normalize-space(./REV/REVW)), '-')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revf">
							<xsl:choose>
								<xsl:when test="./REV/REVF">
									<xsl:value-of select="concat(arco-fn:urify(normalize-space(./REV/REVF)), '-')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="rels">
							<xsl:choose>
								<xsl:when test="./REL/RELW">
									<xsl:value-of
										select="concat($relw, $relf, arco-fn:urify(normalize-space(./REL/RELS)))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="concat($relv, $relf, arco-fn:urify(normalize-space(./REL/RELS)))" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revs">
							<xsl:choose>
								<xsl:when test="./REV/REVW">
									<xsl:value-of
										select="concat($revw, $revf, arco-fn:urify(normalize-space(./REV/REVS)))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="concat($revv, $revf, arco-fn:urify(normalize-space(./REV/REVS)))" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="relx">
							<xsl:choose>
								<xsl:when test="./REL/RELX">
									<xsl:value-of
										select="concat(arco-fn:urify(normalize-space(./REL/RELX)), '-')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revx">
							<xsl:choose>
								<xsl:when test="./REV/REVX">
									<xsl:value-of
										select="concat(arco-fn:urify(normalize-space(./REV/REVX)), '-')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
							<xsl:choose>
								<xsl:when test="./REL/RELS and not(./REV/REVS)">
									<xsl:value-of select="concat($NS, 'TimeInterval/', $rels, '-', $revx, arco-fn:urify(normalize-space(./REV/REVI)))" />
								</xsl:when>
								<xsl:when test="./REV/REVS and not(./REL/RELS)">
									<xsl:value-of select="concat($NS, 'TimeInterval/', $relx, arco-fn:urify(normalize-space(./REL/RELI)), '-', $revs)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="concat($NS, 'TimeInterval/', $rels, '-', $revs)" />
								</xsl:otherwise>
							</xsl:choose>
					</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
							<xsl:value-of select="'https://w3id.org/italia/onto/TI/TimeInterval'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:variable name="relv">
							<xsl:choose>
								<xsl:when test="./REL/RELV">
									<xsl:value-of
										select="concat(normalize-space(./REL/RELV), ' ')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="relw">
							<xsl:choose>
								<xsl:when test="./REL/RELW">
									<xsl:value-of
										select="concat(normalize-space(./REL/RELW), ' ')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="relf">
							<xsl:choose>
								<xsl:when test="./REL/RELF">
									<xsl:value-of
										select="concat(normalize-space(./REL/RELF), ' ')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revv">
							<xsl:choose>
								<xsl:when test="./REV/REVV">
									<xsl:value-of
										select="concat(normalize-space(./REV/REVV), ' ')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revw">
							<xsl:choose>
								<xsl:when test="./REV/REVW">
									<xsl:value-of select="concat(normalize-space(./REV/REVW), ' ')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revf">
							<xsl:choose>
								<xsl:when test="./REV/REVF">
									<xsl:value-of select="concat(normalize-space(./REV/REVF), '-')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="rels">
							<xsl:choose>
								<xsl:when test="./REL/RELW">
									<xsl:value-of
										select="concat($relw, $relf, normalize-space(./REL/RELS))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="concat($relv, $relf, normalize-space(./REL/RELS))" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revs">
							<xsl:choose>
								<xsl:when test="./REV/REVW">
									<xsl:value-of
										select="concat($revw, $revf, normalize-space(./REV/REVS))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="concat($revv, $revf, normalize-space(./REV/REVS))" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="relx">
							<xsl:choose>
								<xsl:when test="./REL/RELX">
									<xsl:value-of
										select="concat(normalize-space(./REL/RELX), ' ')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revx">
							<xsl:choose>
								<xsl:when test="./REV/REVX">
									<xsl:value-of
										select="concat(normalize-space(./REV/REVX), ' ')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:choose>
								<xsl:when test="./REL/RELS and not(./REV/REVS)">
									<xsl:value-of select="concat($rels, ' - ', $revx, normalize-space(./REV/REVI))" />
								</xsl:when>
								<xsl:when test="./REV/REVS and not(./REL/RELS)">
									<xsl:value-of select="concat($relx, normalize-space(./REL/RELI), ' - ', $revs)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="concat($rels, ' - ', $revs)" />
								</xsl:otherwise>
							</xsl:choose>
					</rdfs:label>
					<l0:name>
						<xsl:variable name="relv">
							<xsl:choose>
								<xsl:when test="./REL/RELV">
									<xsl:value-of
										select="concat(normalize-space(./REL/RELV), ' ')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="relw">
							<xsl:choose>
								<xsl:when test="./REL/RELW">
									<xsl:value-of
										select="concat(normalize-space(./REL/RELW), ' ')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="relf">
							<xsl:choose>
								<xsl:when test="./REL/RELF">
									<xsl:value-of
										select="concat(normalize-space(./REL/RELF), ' ')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revv">
							<xsl:choose>
								<xsl:when test="./REV/REVV">
									<xsl:value-of
										select="concat(normalize-space(./REV/REVV), ' ')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revw">
							<xsl:choose>
								<xsl:when test="./REV/REVW">
									<xsl:value-of select="concat(normalize-space(./REV/REVW), ' ')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revf">
							<xsl:choose>
								<xsl:when test="./REV/REVF">
									<xsl:value-of select="concat(normalize-space(./REV/REVF), '-')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="rels">
							<xsl:choose>
								<xsl:when test="./REL/RELW">
									<xsl:value-of
										select="concat($relw, $relf, normalize-space(./REL/RELS))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="concat($relv, $relf, normalize-space(./REL/RELS))" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revs">
							<xsl:choose>
								<xsl:when test="./REV/REVW">
									<xsl:value-of
										select="concat($revw, $revf, normalize-space(./REV/REVS))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="concat($revv, $revf, normalize-space(./REV/REVS))" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="relx">
							<xsl:choose>
								<xsl:when test="./REL/RELX">
									<xsl:value-of
										select="concat(normalize-space(./REL/RELX), ' ')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revx">
							<xsl:choose>
								<xsl:when test="./REV/REVX">
									<xsl:value-of
										select="concat(normalize-space(./REV/REVX), ' ')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:choose>
								<xsl:when test="./REL/RELS and not(./REV/REVS)">
									<xsl:value-of select="concat($rels, ' - ', $revx, normalize-space(./REV/REVI))" />
								</xsl:when>
								<xsl:when test="./REV/REVS and not(./REL/RELS)">
									<xsl:value-of select="concat($relx, normalize-space(./REL/RELI), ' - ', $revs)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="concat($rels, ' - ', $revs)" />
								</xsl:otherwise>
						</xsl:choose>
					</l0:name>
					<tiapit:time>
					<xsl:variable name="relv">
							<xsl:choose>
								<xsl:when test="./REL/RELV">
									<xsl:value-of
										select="concat(normalize-space(./REL/RELV), ' ')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="relw">
							<xsl:choose>
								<xsl:when test="./REL/RELW">
									<xsl:value-of
										select="concat(normalize-space(./REL/RELW), ' ')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="relf">
							<xsl:choose>
								<xsl:when test="./REL/RELF">
									<xsl:value-of
										select="concat(normalize-space(./REL/RELF), ' ')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revv">
							<xsl:choose>
								<xsl:when test="./REV/REVV">
									<xsl:value-of
										select="concat(normalize-space(./REV/REVV), ' ')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revw">
							<xsl:choose>
								<xsl:when test="./REV/REVW">
									<xsl:value-of select="concat(normalize-space(./REV/REVW), ' ')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revf">
							<xsl:choose>
								<xsl:when test="./REV/REVF">
									<xsl:value-of select="concat(normalize-space(./REV/REVF), '-')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="rels">
							<xsl:choose>
								<xsl:when test="./REL/RELW">
									<xsl:value-of
										select="concat($relw, $relf, normalize-space(./REL/RELS))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="concat($relv, $relf, normalize-space(./REL/RELS))" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revs">
							<xsl:choose>
								<xsl:when test="./REV/REVW">
									<xsl:value-of
										select="concat($revw, $revf, normalize-space(./REV/REVS))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="concat($revv, $revf, normalize-space(./REV/REVS))" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="relx">
							<xsl:choose>
								<xsl:when test="./REL/RELX">
									<xsl:value-of
										select="concat(normalize-space(./REL/RELX), ' ')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="revx">
							<xsl:choose>
								<xsl:when test="./REV/REVX">
									<xsl:value-of
										select="concat(normalize-space(./REV/REVX), ' ')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="''" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:choose>
								<xsl:when test="./REL/RELS and not(./REV/REVS)">
									<xsl:value-of select="concat($rels, ' - ', $revx, normalize-space(./REV/REVI))" />
								</xsl:when>
								<xsl:when test="./REV/REVS and not(./REL/RELS)">
									<xsl:value-of select="concat($relx, normalize-space(./REL/RELI), ' - ', $revs)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="concat($rels, ' - ', $revs)" />
								</xsl:otherwise>
							</xsl:choose>

					</tiapit:time>
				</rdf:Description>
				<!-- Time interval with start time and end time -->
				<xsl:if test="./REV/REVI or ./REL/RELI">
					<xsl:variable name="startDate">
						<xsl:choose>
							<xsl:when test="./REL/RELX">
								<xsl:value-of
									select="concat(normalize-space(./REL/RELI), ' ', normalize-space(./REL/RELX))" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="normalize-space(./REL/RELI)" />
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:variable name="endDate">
						<xsl:choose>
							<xsl:when test="./REV/REVX">
								<xsl:value-of
									select="concat(normalize-space(./REV/REVI), ' ', normalize-space(./REV/REVX))" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="normalize-space(./REV/REVI)" />
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
		                            <xsl:value-of
							select="concat($NS, 'TimeInterval/', arco-fn:urify(concat($startDate, '-',  $endDate)))" />
		                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
		                                <xsl:value-of
								select="'https://w3id.org/italia/onto/TI/TimeInterval'" />
		                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="concat($startDate, ' - ', $endDate)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="concat($startDate, ' - ', $endDate)" />
						</l0:name>
						<arco-arco:startTime>
							<xsl:value-of select="$startDate" />
						</arco-arco:startTime>
						<arco-arco:endTime>
							<xsl:value-of select="$endDate" />
						</arco-arco:endTime>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- CulturalPropertyType as individual -->
			<xsl:for-each select="record/metadata/schede/*/OG/OGT">
				<rdf:Description>
					<xsl:choose>
						<xsl:when
							test="not($sheetType='BNB') and not($sheetType='A' and ($sheetVersion='3.00' or $sheetVersion='3.00_ICCD0')) and not($sheetType='A' and ($sheetVersion='2.00' or $sheetVersion='2.00_ICCD0'))">
							<xsl:attribute name="rdf:about">
                     		   <xsl:choose>
                            		<xsl:when test="./OGTT">
                                		<xsl:value-of
								select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(concat(./OGTD, '-', ./OGTT)))" />
                            		</xsl:when>
                            		<xsl:when test="./OGTD">
                                		<xsl:value-of
								select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(./OGTD))" />
                            		</xsl:when>
                        		</xsl:choose>
                    		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/CulturalPropertyType'" />
                        		</xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:choose>
									<xsl:when test="./OGTT">
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTD, ' ', ./OGTT)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTD)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:choose>
									<xsl:when test="./OGTT">
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTD, ' ', ./OGTT)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTD)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:choose>
									<xsl:when test="./OGTT">
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTD, ' ', ./OGTT)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTD)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<l0:name xml:lang="en">
								<xsl:choose>
									<xsl:when test="./OGTT">
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTD, ' ', ./OGTT)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTD)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<xsl:if
								test="./OGTD and not(lower-case(normalize-space(./OGTD))='nr' or lower-case(normalize-space(./OGTD))='n.r.' or lower-case(normalize-space(./OGTD))='nr (recupero pregresso)')">
								<arco-dd:hasCulturalPropertyDefinition>
									<xsl:attribute name="rdf:resource">
                            			<xsl:value-of
										select="concat($NS,'CulturalPropertyDefinition/', arco-fn:urify(normalize-space(./OGTD)))" />
                        			</xsl:attribute>
								</arco-dd:hasCulturalPropertyDefinition>
							</xsl:if>
							<xsl:if
								test="./OGTT and not($sheetType='NU') and not(lower-case(normalize-space(./OGTT))='nr' or lower-case(normalize-space(./OGTT))='n.r.' or lower-case(normalize-space(./OGTT))='nr (recupero pregresso)')">
								<arco-dd:hasCulturalPropertySpecification>
									<xsl:attribute name="rdf:resource">
                                		<xsl:value-of
										select="concat($NS,'CulturalPropertySpecification/', arco-fn:urify(normalize-space(./OGTT)))" />
                            		</xsl:attribute>
								</arco-dd:hasCulturalPropertySpecification>
							</xsl:if>
						</xsl:when>
						<xsl:when
							test="$sheetType='A' and ($sheetVersion='3.00' or $sheetVersion='3.00_ICCD0')">
							<xsl:attribute name="rdf:about">
                        		<xsl:choose>
                            		<xsl:when test="./OGTQ">
                                		<xsl:value-of
								select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(concat(./OGTD, '-', ./OGTQ)))" />
                            		</xsl:when>
                            		<xsl:when test="./OGTD">
                                		<xsl:value-of
								select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(./OGTD))" />
                            		</xsl:when>
                        		</xsl:choose>
                    		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/CulturalPropertyType'" />
                        		</xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:choose>
									<xsl:when test="./OGTQ">
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTD, ' ', ./OGTQ)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTD)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:choose>
									<xsl:when test="./OGTQ">
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTD, ' ', ./OGTQ)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTD)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:choose>
									<xsl:when test="./OGTQ">
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTD, ' ', ./OGTQ)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTD)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<l0:name xml:lang="en">
								<xsl:choose>
									<xsl:when test="./OGTQ">
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTD, ' ', ./OGTQ)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTD)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<xsl:if
								test="./OGTD and not(lower-case(normalize-space(./OGTD))='nr' or lower-case(normalize-space(./OGTD))='n.r.' or lower-case(normalize-space(./OGTD))='nr (recupero pregresso)')">
								<arco-dd:hasCulturalPropertyDefinition>
									<xsl:attribute name="rdf:resource">
                            			<xsl:value-of
										select="concat($NS,'CulturalPropertyDefinition/', arco-fn:urify(normalize-space(./OGTD)))" />
                        			</xsl:attribute>
								</arco-dd:hasCulturalPropertyDefinition>
							</xsl:if>
							<xsl:if
								test="./OGTQ and not(lower-case(normalize-space(./OGTQ))='nr' or lower-case(normalize-space(./OGTQ))='n.r.' or lower-case(normalize-space(./OGTQ))='nr (recupero pregresso)')">
								<arco-dd:hasCulturalPropertySpecification>
									<xsl:attribute name="rdf:resource">
                                		<xsl:value-of
										select="concat($NS,'CulturalPropertySpecification/', arco-fn:urify(normalize-space(./OGTQ)))" />
                            		</xsl:attribute>
								</arco-dd:hasCulturalPropertySpecification>
							</xsl:if>
						</xsl:when>
						<xsl:when
							test="$sheetType='A' and ($sheetVersion='2.00' or $sheetVersion='2.00_ICCD0')">
							<xsl:attribute name="rdf:about">
                        		<xsl:choose>
                            		<xsl:when test="./OGTQ">
                                		<xsl:value-of
								select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(concat(./OGTT, '-', ./OGTQ)))" />
                            		</xsl:when>
                            		<xsl:when test="./OGTT">
                                		<xsl:value-of
								select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(./OGTT))" />
                            		</xsl:when>
                        		</xsl:choose>
                    		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/CulturalPropertyType'" />
                        		</xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:choose>
									<xsl:when test="./OGTQ">
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTT, ' ', ./OGTQ)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTT)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:choose>
									<xsl:when test="./OGTQ">
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTT, ' ', ./OGTQ)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTT)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:choose>
									<xsl:when test="./OGTQ">
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTT, ' ', ./OGTQ)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTT)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<l0:name xml:lang="en">
								<xsl:choose>
									<xsl:when test="./OGTT">
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTT, ' ', ./OGTQ)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTT)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<xsl:if
								test="./OGTT and not(lower-case(normalize-space(./OGTT))='nr' or lower-case(normalize-space(./OGTT))='n.r.' or lower-case(normalize-space(./OGTT))='nr (recupero pregresso)')">
								<arco-dd:hasCulturalPropertyDefinition>
									<xsl:attribute name="rdf:resource">
                            			<xsl:value-of
										select="concat($NS,'CulturalPropertyDefinition/', arco-fn:urify(normalize-space(./OGTT)))" />
                        			</xsl:attribute>
								</arco-dd:hasCulturalPropertyDefinition>
							</xsl:if>
							<xsl:if
								test="./OGTQ and not(lower-case(normalize-space(./OGTQ))='nr' or lower-case(normalize-space(./OGTQ))='n.r.' or lower-case(normalize-space(./OGTQ))='nr (recupero pregresso)')">
								<arco-dd:hasCulturalPropertySpecification>
									<xsl:attribute name="rdf:resource">
                                		<xsl:value-of
										select="concat($NS,'CulturalPropertySpecification/', arco-fn:urify(normalize-space(./OGTQ)))" />
                            		</xsl:attribute>
								</arco-dd:hasCulturalPropertySpecification>
							</xsl:if>
						</xsl:when>
						<xsl:when
							test="$sheetType='BNB' and (./OGTD and starts-with(lower-case(normalize-space(./OGTD)), 'erbario'))">
							<xsl:attribute name="rdf:about">
                        		<xsl:choose>
                            		<xsl:when test="./OGTR">
											<xsl:value-of
								select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(concat(./OGTD, ' ', ./OGTR)))" />
									</xsl:when>
									<xsl:otherwise>
											<xsl:value-of
								select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(./OGTD))" />
									</xsl:otherwise>
                        		</xsl:choose>
                    		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/CulturalPropertyType'" />
                        		</xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:choose>
									<xsl:when test="./OGTR">
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTR)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTD)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:choose>
									<xsl:when test="./OGTR">
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTR)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTD)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:choose>
									<xsl:when test="./OGTR">
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTR)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTD)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<l0:name xml:lang="en">
								<xsl:choose>
									<xsl:when test="./OGTR">
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTR)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTD)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<xsl:if
								test="./OGTD and not(lower-case(normalize-space(./OGTD))='nr' or lower-case(normalize-space(./OGTD))='n.r.' or lower-case(normalize-space(./OGTD))='nr (recupero pregresso)')">
								<arco-dd:hasCulturalPropertyDefinition>
									<xsl:attribute name="rdf:resource">
                            			<xsl:value-of
										select="concat($NS,'CulturalPropertyDefinition/', arco-fn:urify(normalize-space(./OGTD)))" />
                        			</xsl:attribute>
								</arco-dd:hasCulturalPropertyDefinition>
							</xsl:if>
							<xsl:if
								test="./OGTR and not(lower-case(normalize-space(./OGTR))='nr' or lower-case(normalize-space(./OGTR))='n.r.' or lower-case(normalize-space(./OGTR))='nr (recupero pregresso)')">
								<arco-dd:hasCulturalPropertySpecification>
									<xsl:attribute name="rdf:resource">
                                		<xsl:value-of
										select="concat($NS,'CulturalPropertySpecification/', arco-fn:urify(normalize-space(./OGTR)))" />
                            		</xsl:attribute>
								</arco-dd:hasCulturalPropertySpecification>
							</xsl:if>
						</xsl:when>
						<xsl:when
							test="$sheetType='BNB' and (./OGTD and starts-with(lower-case(normalize-space(./OGTD)), 'campione'))">
							<xsl:attribute name="rdf:about">
                        		<xsl:choose>
                            		<xsl:when test="./OGTK">
											<xsl:value-of
								select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(concat(./OGTD, ' ', ./OGTK)))" />
									</xsl:when>
									<xsl:otherwise>
											<xsl:value-of
								select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(./OGTD))" />
									</xsl:otherwise>
                        		</xsl:choose>
                    		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/CulturalPropertyType'" />
                        		</xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:choose>
									<xsl:when test="./OGTK">
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTD, ' ', ./OGTK)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTD)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:choose>
									<xsl:when test="./OGTK">
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTD, ' ', ./OGTK)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTD)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:choose>
									<xsl:when test="./OGTK">
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTD, ' ', ./OGTK)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTD)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<l0:name xml:lang="en">
								<xsl:choose>
									<xsl:when test="./OGTK">
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTD, ' ', ./OGTK)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTD)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<xsl:if
								test="./OGTD and not(lower-case(normalize-space(./OGTD))='nr' or lower-case(normalize-space(./OGTD))='n.r.' or lower-case(normalize-space(./OGTD))='nr (recupero pregresso)')">
								<arco-dd:hasCulturalPropertyDefinition>
									<xsl:attribute name="rdf:resource">
                            			<xsl:value-of
										select="concat($NS,'CulturalPropertyDefinition/', arco-fn:urify(normalize-space(./OGTD)))" />
                        			</xsl:attribute>
								</arco-dd:hasCulturalPropertyDefinition>
							</xsl:if>
							<xsl:if
								test="./OGTK and not(lower-case(normalize-space(./OGTK))='nr' or lower-case(normalize-space(./OGTK))='n.r.' or lower-case(normalize-space(./OGTK))='nr (recupero pregresso)')">
								<arco-dd:hasCulturalPropertySpecification>
									<xsl:attribute name="rdf:resource">
                                		<xsl:value-of
										select="concat($NS,'CulturalPropertySpecification/', arco-fn:urify(normalize-space(./OGTK)))" />
                            		</xsl:attribute>
								</arco-dd:hasCulturalPropertySpecification>
							</xsl:if>
						</xsl:when>
						<xsl:when
							test="$sheetType='BNB' and (./OGTD and starts-with(lower-case(normalize-space(./OGTD)), 'collezione'))">
							<xsl:attribute name="rdf:about">
                        		<xsl:choose>
                            		<xsl:when test="./OGTZ">
											<xsl:value-of
								select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(concat(./OGTD, ' ', ./OGTZ)))" />
									</xsl:when>
									<xsl:otherwise>
											<xsl:value-of
								select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(./OGTD))" />
									</xsl:otherwise>
                        		</xsl:choose>
                    		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/CulturalPropertyType'" />
                        		</xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:choose>
									<xsl:when test="./OGTZ">
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTD, ' - ', ./OGTZ)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTZ)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:choose>
									<xsl:when test="./OGTZ">
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTD, ' - ', ./OGTZ)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTD)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:choose>
									<xsl:when test="./OGTZ">
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTD, ' - ', ./OGTZ)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTD)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<l0:name xml:lang="en">
								<xsl:choose>
									<xsl:when test="./OGTZ">
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTD, ' - ', ./OGTZ)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTD)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<xsl:if
								test="./OGTD and not(lower-case(normalize-space(./OGTD))='nr' or lower-case(normalize-space(./OGTD))='n.r.' or lower-case(normalize-space(./OGTD))='nr (recupero pregresso)')">
								<arco-dd:hasCulturalPropertyDefinition>
									<xsl:attribute name="rdf:resource">
                            			<xsl:value-of
										select="concat($NS,'CulturalPropertyDefinition/', arco-fn:urify(normalize-space(./OGTD)))" />
                        			</xsl:attribute>
								</arco-dd:hasCulturalPropertyDefinition>
							</xsl:if>
							<xsl:if
								test="./OGTZ and not(lower-case(normalize-space(./OGTZ))='nr' or lower-case(normalize-space(./OGTZ))='n.r.' or lower-case(normalize-space(./OGTZ))='nr (recupero pregresso)')">
								<arco-dd:hasCulturalPropertySpecification>
									<xsl:attribute name="rdf:resource">
                                		<xsl:value-of
										select="concat($NS,'CulturalPropertySpecification/', arco-fn:urify(normalize-space(./OGTZ)))" />
                            		</xsl:attribute>
								</arco-dd:hasCulturalPropertySpecification>
							</xsl:if>
						</xsl:when>
						<xsl:when
							test="$sheetType='BNB' and (./OGTD and starts-with(lower-case(normalize-space(./OGTD)), 'contenitore'))">
							<xsl:attribute name="rdf:about">
                        		<xsl:choose>
                            		<xsl:when test="./OGTO">
											<xsl:value-of
								select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(concat(./OGTD, ' ', ./OGTO)))" />
									</xsl:when>
									<xsl:otherwise>
											<xsl:value-of
								select="concat($NS, 'CulturalPropertyType/', arco-fn:arcofy(./OGTO))" />
									</xsl:otherwise>
                        		</xsl:choose>
                    		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/CulturalPropertyType'" />
                        		</xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:choose>
									<xsl:when test="./OGTO">
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTD, ' - ', ./OGTO)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTO)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:choose>
									<xsl:when test="./OGTO">
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTD, ' - ', ./OGTO)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTD)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:choose>
									<xsl:when test="./OGTO">
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTD, ' - ', ./OGTO)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Tipo del bene: ', ./OGTD)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<l0:name xml:lang="en">
								<xsl:choose>
									<xsl:when test="./OGTO">
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTD, ' - ', ./OGTO)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat('Cultural property type: ', ./OGTD)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<xsl:if
								test="./OGTD and not(lower-case(normalize-space(./OGTD))='nr' or lower-case(normalize-space(./OGTD))='n.r.' or lower-case(normalize-space(./OGTD))='nr (recupero pregresso)')">
								<arco-dd:hasCulturalPropertyDefinition>
									<xsl:attribute name="rdf:resource">
                            			<xsl:value-of
										select="concat($NS,'CulturalPropertyDefinition/', arco-fn:urify(normalize-space(./OGTD)))" />
                        			</xsl:attribute>
								</arco-dd:hasCulturalPropertyDefinition>
							</xsl:if>
							<xsl:if
								test="./OGTO and not(lower-case(normalize-space(./OGTO))='nr' or lower-case(normalize-space(./OGTO))='n.r.' or lower-case(normalize-space(./OGTO))='nr (recupero pregresso)')">
								<arco-dd:hasCulturalPropertySpecification>
									<xsl:attribute name="rdf:resource">
                                		<xsl:value-of
										select="concat($NS,'CulturalPropertySpecification/', arco-fn:urify(normalize-space(./OGTO)))" />
                            		</xsl:attribute>
								</arco-dd:hasCulturalPropertySpecification>
							</xsl:if>
						</xsl:when>
					</xsl:choose>
				</rdf:Description>
			</xsl:for-each>

			<!-- We add the definition as an individual. The definition is associated 
				with a Cultural Property Type by the property arco-dd:hasCulturalPropertyDefinition. -->
			<xsl:choose>
				<xsl:when
					test="not($sheetType='A' and ($sheetVersion='2.00' or $sheetVersion='2.00_ICCD0'))">
					<xsl:if
						test="record/metadata/schede/*/OG/OGT/OGTD and not(lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTD))='nr' or lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTD))='n.r.' or lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTD))='nr (recupero pregresso)')">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                        <xsl:value-of
								select="concat($NS,'CulturalPropertyDefinition/', arco-fn:urify(normalize-space(record/metadata/schede/*/OG/OGT/OGTD)))" />
	                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/CulturalPropertyDefinition'" />
	                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of
									select="normalize-space(record/metadata/schede/*/OG/OGT/OGTD)" />
							</rdfs:label>
							<xsl:variable name="skos-term">
								<xsl:choose>
									<xsl:when test="$sheetType='RA'">
										<xsl:value-of
											select="arco-fn:ra-definition(normalize-space(record/metadata/schede/*/OG/OGT/OGTD))" />
									</xsl:when>
									<xsl:when test="$sheetType='PST'">
										<xsl:value-of
											select="arco-fn:pst-definition(normalize-space(record/metadata/schede/*/OG/OGT/OGTD))" />
									</xsl:when>
									<xsl:when test="$sheetType='A' or $sheetType='PG'">
										<xsl:value-of
											select="arco-fn:a-definition(normalize-space(record/metadata/schede/*/OG/OGT/OGTD))" />
									</xsl:when>
								</xsl:choose>
							</xsl:variable>
							<xsl:if test="$skos-term != ''">
								<skos:closeMatch>
									<xsl:attribute name="rdf:resource">
									<xsl:value-of select="$skos-term" />
								</xsl:attribute>
								</skos:closeMatch>
							</xsl:if>

						</rdf:Description>
					</xsl:if>
				</xsl:when>
				<xsl:when
					test="$sheetType='A' and ($sheetVersion='2.00' or $sheetVersion='2.00_ICCD0')">
					<xsl:if
						test="record/metadata/schede/*/OG/OGT/OGTT and not(lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTT))='nr' or lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTT))='n.r.' or lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTT))='nr (recupero pregresso)')">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                        <xsl:value-of
								select="concat($NS,'CulturalPropertyDefinition/', arco-fn:urify(normalize-space(record/metadata/schede/*/OG/OGT/OGTT)))" />
	                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/CulturalPropertyDefinition'" />
	                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of
									select="normalize-space(record/metadata/schede/*/OG/OGT/OGTT)" />
							</rdfs:label>
						</rdf:Description>
					</xsl:if>
				</xsl:when>
			</xsl:choose>
			<!-- We add the cultural property specification as an individual. It's 
				associated with a Cultural Property Type by the property arco-dd:hasCulturalPropertySpecification. -->
			<xsl:choose>
				<xsl:when
					test="not($sheetType='BNB') and not($sheetType='NU') and not($sheetType='A' and ($sheetVersion='3.00' or $sheetVersion='3.00_ICCD0')) and not($sheetType='A' and ($sheetVersion='2.00' or $sheetVersion='2.00_ICCD0'))">
					<xsl:if
						test="record/metadata/schede/*/OG/OGT/OGTT and not(lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTT))='nr' or lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTT))='n.r.' or lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTT))='nr (recupero pregresso)')">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                        <xsl:value-of
								select="concat($NS,'CulturalPropertySpecification/', arco-fn:urify(normalize-space(record/metadata/schede/*/OG/OGT/OGTT)))" />
		                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/CulturalPropertySpecification'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of
									select="normalize-space(record/metadata/schede/*/OG/OGT/OGTT)" />
							</rdfs:label>
						</rdf:Description>
					</xsl:if>
				</xsl:when>
				<xsl:when
					test="($sheetType='A' and ($sheetVersion='2.00' or $sheetVersion='2.00_ICCD0')) or ($sheetType='A' and ($sheetVersion='3.00' or $sheetVersion='3.00_ICCD0'))">
					<xsl:if
						test="record/metadata/schede/*/OG/OGT/OGTQ and not(lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTQ))='nr' or lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTQ))='n.r.' or lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTQ))='nr (recupero pregresso)')">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                        <xsl:value-of
								select="concat($NS,'CulturalPropertySpecification/', arco-fn:urify(normalize-space(record/metadata/schede/*/OG/OGT/OGTQ)))" />
		                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/CulturalPropertySpecification'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of
									select="normalize-space(record/metadata/schede/*/OG/OGT/OGTQ)" />
							</rdfs:label>
						</rdf:Description>
					</xsl:if>
				</xsl:when>
				<xsl:when
					test="$sheetType='BNB' and (record/metadata/schede/BNB/OG/OGT/OGTD and starts-with(lower-case(normalize-space(record/metadata/schede/BNB/OG/OGT/OGTD)), 'campione'))">
					<xsl:if
						test="record/metadata/schede/BNB/OG/OGT/OGTK and not(lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTK))='nr' or lower-case(normalize-space(record/metadata/schede/BNB/OG/OGT/OGTK))='n.r.' or lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTK))='nr (recupero pregresso)')">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                        <xsl:value-of
								select="concat($NS,'CulturalPropertySpecification/', arco-fn:urify(normalize-space(record/metadata/schede/BNB/OG/OGT/OGTK)))" />
		                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/CulturalPropertySpecification'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of
									select="normalize-space(record/metadata/schede/BNB/OG/OGT/OGTK)" />
							</rdfs:label>
						</rdf:Description>
					</xsl:if>
				</xsl:when>
				<xsl:when
					test="$sheetType='BNB' and (record/metadata/schede/BNB/OG/OGT/OGTD and starts-with(lower-case(normalize-space(record/metadata/schede/BNB/OG/OGT/OGTD)), 'erbario'))">
					<xsl:if
						test="record/metadata/schede/*/OG/OGT/OGTR and not(lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTR))='nr' or lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTR))='n.r.' or lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTR))='nr (recupero pregresso)')">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                        <xsl:value-of
								select="concat($NS,'CulturalPropertySpecification/', arco-fn:urify(normalize-space(record/metadata/schede/*/OG/OGT/OGTR)))" />
		                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/CulturalPropertySpecification'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of
									select="normalize-space(record/metadata/schede/*/OG/OGT/OGTR)" />
							</rdfs:label>
						</rdf:Description>
					</xsl:if>
				</xsl:when>
				<xsl:when
					test="$sheetType='BNB' and (record/metadata/schede/BNB/OG/OGT/OGTD and starts-with(lower-case(normalize-space(record/metadata/schede/BNB/OG/OGT/OGTD)), 'collezione'))">
					<xsl:if
						test="record/metadata/schede/*/OG/OGT/OGTZ and not(lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTZ))='nr' or lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTZ))='n.r.' or lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTZ))='nr (recupero pregresso)')">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                        <xsl:value-of
								select="concat($NS,'CulturalPropertySpecification/', arco-fn:urify(normalize-space(record/metadata/schede/*/OG/OGT/OGTZ)))" />
		                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/CulturalPropertySpecification'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of
									select="normalize-space(record/metadata/schede/*/OG/OGT/OGTZ)" />
							</rdfs:label>
						</rdf:Description>
					</xsl:if>
				</xsl:when>
				<xsl:when
					test="$sheetType='BNB' and (record/metadata/schede/BNB/OG/OGT/OGTD and starts-with(lower-case(normalize-space(record/metadata/schede/BNB/OG/OGT/OGTD)), 'contenitore'))">
					<xsl:if
						test="record/metadata/schede/*/OG/OGT/OGTO and not(lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTO))='nr' or lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTO))='n.r.' or lower-case(normalize-space(record/metadata/schede/*/OG/OGT/OGTO))='nr (recupero pregresso)')">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                        <xsl:value-of
								select="concat($NS,'CulturalPropertySpecification/', arco-fn:urify(normalize-space(record/metadata/schede/*/OG/OGT/OGTO)))" />
		                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/CulturalPropertySpecification'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of
									select="normalize-space(record/metadata/schede/*/OG/OGT/OGTO)" />
							</rdfs:label>
						</rdf:Description>
					</xsl:if>
				</xsl:when>
			</xsl:choose>

			<!-- Cataloguing Agency - Agent Role CD/ESC -->
			<xsl:if
				test="(not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CD/ESC)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CD/ESC)), 'n.r')))">
				<xsl:for-each select="record/metadata/schede/*/CD/ESC">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                        <xsl:value-of
							select="concat($NS, 'AgentRole/', $itemURI, '-cataloguing-agency')" />
                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="'https://w3id.org/arco/ontology/core/AgentRole'" />
                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Ente schedatore del bene ', $itemURI, ': ', .)" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Cataloguing agency for cultural property ', $itemURI, ': ', .)" />
						</rdfs:label>
						<arco-core:hasRole>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="concat($NS, 'Role/CataloguinAgency')" />
                        </xsl:attribute>
						</arco-core:hasRole>
						<arco-core:hasAgent>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
                        </xsl:attribute>
						</arco-core:hasAgent>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                        <xsl:value-of
							select="concat($NS, 'Role/CataloguinAgency')" />
                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="'https://w3id.org/italia/onto/RO/Role'" />
                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of select="'Ente schedatore'" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of select="'Cataloguing agency'" />
						</rdfs:label>
						<arco-core:isRoleOf>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-cataloguing-agency')" />
                        </xsl:attribute>
						</arco-core:isRoleOf>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                        <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="'https://w3id.org/italia/onto/COV/Organization'" />
                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="arco-fn:cataloguing-entity(normalize-space(.))" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="arco-fn:cataloguing-entity(normalize-space(.))" />
						</l0:name>
						<arco-arco:isCataloguingAgencyOf>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
                        </xsl:attribute>
						</arco-arco:isCataloguingAgencyOf>
						<arco-core:isAgentOf>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-cataloguing-agency')" />
                        </xsl:attribute>
						</arco-core:isAgentOf>
					</rdf:Description>
				</xsl:for-each>
			</xsl:if>
			<!-- Proponent Agency - Agent Role CD/EPR -->
			<xsl:if
				test="(not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CD/EPR)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CD/EPR)), 'n.r')))">
				<xsl:for-each select="record/metadata/schede/*/CD/EPR">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                        <xsl:value-of
							select="concat($NS, 'AgentRole/', $itemURI, '-proponent-agency')" />
                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="'https://w3id.org/arco/ontology/core/AgentRole'" />
                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Ente proponente del bene ', $itemURI, ': ', .)" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Proponent agency for cultural property ', $itemURI, ': ', .)" />
						</rdfs:label>
						<arco-core:hasRole>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="concat($NS, 'Role/ProponentAgency')" />
                        </xsl:attribute>
						</arco-core:hasRole>
						<arco-core:hasAgent>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
                        </xsl:attribute>
						</arco-core:hasAgent>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                        <xsl:value-of
							select="concat($NS, 'Role/ProponentAgency')" />
                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="'https://w3id.org/italia/onto/RO/Role'" />
                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of select="'Ente proponente'" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of select="'Proponent agency'" />
						</rdfs:label>
						<arco-core:isRoleOf>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-proponent-agency')" />
                        </xsl:attribute>
						</arco-core:isRoleOf>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                        <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="'https://w3id.org/italia/onto/COV/Organization'" />
                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="arco-fn:cataloguing-entity(normalize-space(.))" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="arco-fn:cataloguing-entity(normalize-space(.))" />
						</l0:name>
						<arco-cd:isProponentAgencyOf>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
                        </xsl:attribute>
						</arco-cd:isProponentAgencyOf>
						<arco-core:isAgentOf>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-proponent-agency')" />
                        </xsl:attribute>
						</arco-core:isAgentOf>
					</rdf:Description>
				</xsl:for-each>
			</xsl:if>
			<!-- Heritage Protection Agency - Agent Role CD/ECP -->
			<xsl:for-each select="record/metadata/schede/*/CD/ECP">
				<xsl:if
					test=". and (not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	                        <xsl:value-of
							select="concat($NS, 'AgentRole/', $itemURI, '-heritage-protection-agency')" />
	                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="'https://w3id.org/arco/ontology/core/AgentRole'" />
	                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Ente competente per tutela del bene ', $itemURI, ': ', .)" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Heritage protection agency for cultural property ', $itemURI, ': ', .)" />
						</rdfs:label>
						<arco-core:hasRole>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="concat($NS, 'Role/HeritageProtectionAgency')" />
	                        </xsl:attribute>
						</arco-core:hasRole>
						<arco-core:hasAgent>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                        </xsl:attribute>
						</arco-core:hasAgent>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	                        <xsl:value-of
							select="concat($NS, 'Role/HeritageProtectionAgency')" />
	                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="'https://w3id.org/italia/onto/RO/Role'" />
	                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of select="'Ente competente per tutela'" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of select="'Heritage Protection Agency'" />
						</rdfs:label>
						<arco-core:isRoleOf>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-heritage-protection-agency')" />
	                        </xsl:attribute>
						</arco-core:isRoleOf>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	                        <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="'https://w3id.org/italia/onto/COV/Organization'" />
	                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="arco-fn:cataloguing-entity(normalize-space(.))" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="arco-fn:cataloguing-entity(normalize-space(.))" />
						</l0:name>
						<arco-core:isAgentOf>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-heritage-protection-agency')" />
	                        </xsl:attribute>
						</arco-core:isAgentOf>
						<arco-arco:isHeritageProtectionAgencyOf>
							<xsl:attribute name="rdf:resource">
	                            <xsl:value-of
								select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
	                        </xsl:attribute>
						</arco-arco:isHeritageProtectionAgencyOf>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- Acquisition of cultural property as an individual -->
			<xsl:for-each select="record/metadata/schede/*/TU/ACQ">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of
						select="concat($NS, 'Acquisition/', $itemURI, '-acquisition-', position())" />
            		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/Acquisition'" />
            			</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Acquisizione ', position(), ' del bene culturale: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Acquisizione ', position(), ' del bene culturale: ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Acquisition ', position(), ' of cultural property: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Acquisition ', position(), ' of cultural property: ', $itemURI)" />
					</l0:name>
					<arco-cd:isAcquisitionOf>
						<xsl:attribute name="rdf:resource"> 
							<xsl:value-of
							select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
						</xsl:attribute>
					</arco-cd:isAcquisitionOf>
					<xsl:if
						test="./ACQT and (not(starts-with(lower-case(normalize-space(./ACQT)), 'nr')) and not(starts-with(lower-case(normalize-space(./ACQT)), 'n.r')))">
						<arco-cd:hasAcquisitionType>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'AcquisitionType/', arco-fn:urify(normalize-space(./ACQT)))" />
            				</xsl:attribute>
						</arco-cd:hasAcquisitionType>
					</xsl:if>
					<xsl:for-each select="./ACQN">
						<xsl:if
							test=". and (not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r')))">
							<arco-cd:hasPreviousOwner>
								<xsl:attribute name="rdf:resource">
	            					<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	            				</xsl:attribute>
							</arco-cd:hasPreviousOwner>
						</xsl:if>
					</xsl:for-each>
					<xsl:if
						test="./ACQD and (not(starts-with(lower-case(normalize-space(./ACQD)), 'nr')) and not(starts-with(lower-case(normalize-space(./ACQD)), 'n.r')))">
						<tiapit:time>
							<xsl:value-of select="normalize-space(./ACQD)" />
						</tiapit:time>
					</xsl:if>
					<xsl:if test="./ACQE">
						<arco-core:note>
							<xsl:value-of select="normalize-space(./ACQE)" />
						</arco-core:note>
					</xsl:if>
					<xsl:if
						test="./ACQL and (not(starts-with(lower-case(normalize-space(./ACQL)), 'nr')) and not(starts-with(lower-case(normalize-space(./ACQL)), 'n.r')))">
						<arco-cd:acquisitionLocation>
							<xsl:value-of select="normalize-space(./ACQL)" />
						</arco-cd:acquisitionLocation>
					</xsl:if>
				</rdf:Description>
				<!-- acquisition type as an individual -->
				<xsl:if
					test="./ACQT and (not(starts-with(lower-case(normalize-space(./ACQT)), 'nr')) and not(starts-with(lower-case(normalize-space(./ACQT)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'AcquisitionType/', arco-fn:urify(normalize-space(./ACQT)))" />
            			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/AcquisitionType'" />
            				</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./ACQT)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./ACQT)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- previous owner in acquisition as an individual -->
				<xsl:for-each select="./ACQN">
					<xsl:if
						test=". and (not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	            				<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	            			</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
	            					<xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
	            				</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(.)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(.)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:for-each>
			<!-- Change of availability of cultural property as an individual -->
			<xsl:for-each select="record/metadata/schede/*/TU/ALN">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of
						select="concat($NS, 'ChangeOfAvailability/', $itemURI, '-change-of-availability')" />
            		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/ChangeOfAvailability'" />
            			</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Mutamento condizione materiale del bene culturale: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Mutamento condizione materiale del bene culturale: ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Change of availability of cultural property: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Change of availability of cultural property: ', $itemURI)" />
					</l0:name>
					<xsl:if
						test="./ALNT and (not(starts-with(lower-case(normalize-space(./ALNT)), 'nr')) and not(starts-with(lower-case(normalize-space(./ALNT)), 'n.r')))">
						<arco-cd:hasChangeOfAvailabilityType>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'ChangeOfAvailabilityType/', arco-fn:urify(normalize-space(./ALNT)))" />
            				</xsl:attribute>
						</arco-cd:hasChangeOfAvailabilityType>
					</xsl:if>
					<xsl:if
						test="./ALND and (not(starts-with(lower-case(normalize-space(./ALND)), 'nr')) and not(starts-with(lower-case(normalize-space(./ALND)), 'n.r')))">
						<tiapit:time>
							<xsl:value-of select="normalize-space(./ALND)" />
						</tiapit:time>
					</xsl:if>
					<xsl:if test="./ALNN">
						<arco-core:note>
							<xsl:value-of select="normalize-space(./ALNN)" />
						</arco-core:note>
					</xsl:if>
				</rdf:Description>
				<!-- acquisition type as an individual -->
				<xsl:if
					test="./ALNT and (not(starts-with(lower-case(normalize-space(./ALNT)), 'nr')) and not(starts-with(lower-case(normalize-space(./ALNT)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'ChangeOfAvailabilityType/', arco-fn:urify(normalize-space(./ALNT)))" />
            			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/ChangeOfAvailabilityType'" />
            				</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./ALNT)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./ALNT)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- Photographic documentation of cultural property as an individual -->
			<xsl:for-each select="record/metadata/schede/*/DO/FTA">
				<xsl:variable name="photodocu-position">
					<xsl:value-of select="position()" />
				</xsl:variable>
				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of
						select="concat($NS, 'PhotographicDocumentation/', $itemURI, '-photographic-documentation-', position())" />
            		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/PhotographicDocumentation'" />
            			</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Photographic documentation ', position(), ' of cultural property: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Photographic documentation ', position(), ' of cultural property: ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Documentazione fotografica ', position(), ' del bene culturale: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Documentazione fotografica ', position(), ' del bene culturale: ', $itemURI)" />
					</l0:name>
					<arco-cd:isDocumentationOf>
						<xsl:attribute name="rdf:resource"> 
							<xsl:value-of
							select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
						</xsl:attribute>
					</arco-cd:isDocumentationOf>
					<xsl:if
						test="./FTAM and (not(starts-with(lower-case(normalize-space(./FTAM)), 'nr')) and not(starts-with(lower-case(normalize-space(./FTAM)), 'n.r')))">
						<arco-cd:documentationTitle>
							<xsl:value-of select="normalize-space(./FTAM)" />
						</arco-cd:documentationTitle>
					</xsl:if>
					<xsl:if
						test="./FTAM and (not(starts-with(lower-case(normalize-space(./FTAM)), 'nr')) and not(starts-with(lower-case(normalize-space(./FTAM)), 'n.r')))">
						<arco-cd:caption>
							<xsl:value-of select="normalize-space(./FTAM)" />
						</arco-cd:caption>
					</xsl:if>
					<xsl:if
						test="./FTAN and (not(starts-with(lower-case(normalize-space(./FTAN)), 'nr')) and not(starts-with(lower-case(normalize-space(./FTAN)), 'n.r')))">
						<arco-cd:documentationIdentifier>
							<xsl:value-of select="normalize-space(./FTAN)" />
						</arco-cd:documentationIdentifier>
					</xsl:if>
					<xsl:if
						test="./FTAN and (not(starts-with(lower-case(normalize-space(./FTAN)), 'nr')) and not(starts-with(lower-case(normalize-space(./FTAN)), 'n.r')))">
						<xsl:for-each select="./FTAN">
							<xsl:variable name="url"
								select="arco-fn:find-link-emm(.)" />
							<xsl:for-each select="$url">
								<foaf:depiction>
									<xsl:attribute name="rdf:resource">
                                	<xsl:value-of select="." />
                        		</xsl:attribute>
								</foaf:depiction>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:if>
					<xsl:if
						test="./FTAD and (not(starts-with(lower-case(normalize-space(./FTAD)), 'nr')) and not(starts-with(lower-case(normalize-space(./FTAD)), 'n.r')))">
						<tiapit:time>
							<xsl:value-of select="normalize-space(./FTAD)" />
						</tiapit:time>
					</xsl:if>
					<xsl:if
						test="./FTAC and not(./FTAC='N/R') and (not(starts-with(lower-case(normalize-space(./FTAC)), 'nr')) and not(starts-with(lower-case(normalize-space(./FTAC)), 'n.r')))">
						<arco-cd:documentationLocation>
							<xsl:value-of select="normalize-space(./FTAC)" />
						</arco-cd:documentationLocation>
					</xsl:if>
					<xsl:if
						test="./FTAS and (not(starts-with(lower-case(normalize-space(./FTAS)), 'nr')) and not(starts-with(lower-case(normalize-space(./FTAS)), 'n.r')))">
						<arco-core:specifications>
							<xsl:value-of select="normalize-space(./FTAS)" />
						</arco-core:specifications>
					</xsl:if>
					<xsl:if
						test="./FTAK and (not(starts-with(lower-case(normalize-space(./FTAK)), 'nr')) and not(starts-with(lower-case(normalize-space(./FTAK)), 'n.r')))">
						<arco-cd:digitalFileName>
							<xsl:value-of select="normalize-space(./FTAK)" />
						</arco-cd:digitalFileName>
					</xsl:if>
					<xsl:if
						test="./FTAT and (not(starts-with(lower-case(normalize-space(./FTAT)), 'nr')) and not(starts-with(lower-case(normalize-space(./FTAT)), 'n.r')))">
						<arco-core:note>
							<xsl:value-of select="normalize-space(./FTAT)" />
						</arco-core:note>
					</xsl:if>
					<xsl:if
						test="./FTAW and (not(starts-with(lower-case(normalize-space(./FTAW)), 'nr')) and not(starts-with(lower-case(normalize-space(./FTAW)), 'n.r')))">
						<smapit:URL>
							<xsl:value-of select="normalize-space(./FTAW)" />
						</smapit:URL>
					</xsl:if>
					<xsl:if
						test="./FTAY and (not(starts-with(lower-case(normalize-space(./FTAY)), 'nr')) and not(starts-with(lower-case(normalize-space(./FTAY)), 'n.r')))">
						<arco-cd:rights>
							<xsl:value-of select="normalize-space(./FTAY)" />
						</arco-cd:rights>
					</xsl:if>
					<xsl:if
						test="./FTAR and (not(starts-with(lower-case(normalize-space(./FTAR)), 'nr')) and not(starts-with(lower-case(normalize-space(./FTAR)), 'n.r')))">
						<arco-cd:stripRunAndFrameNumber>
							<xsl:value-of select="normalize-space(./FTAR)" />
						</arco-cd:stripRunAndFrameNumber>
					</xsl:if>
					<xsl:if
						test="./FTAX and not(lower-case(normalize-space(./FTAX))='nr' or lower-case(normalize-space(./FTAX))='n.r.' or lower-case(normalize-space(./FTAX))='nr (recupero pregresso)')">
						<arco-core:hasCategory>
							<xsl:attribute name="rdf:resource">
                                <xsl:choose>
                                    <xsl:when
								test="lower-case(normalize-space(./FTAX))='documentazione esistente'">
                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/ExistingDocumentation'" />
                                    </xsl:when>
                                    <xsl:when
								test="lower-case(normalize-space(./FTAX))='documentazione allegata'">
                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/AttachedDocumentation'" />
                                    </xsl:when>
                                    <xsl:when test="./FTAX">
                                        <xsl:value-of
								select="concat($NS, 'DocumentationCategory/', arco-fn:urify(normalize-space(./FTAX)))" />
                                    </xsl:when>
                                </xsl:choose>
                            </xsl:attribute>
						</arco-core:hasCategory>
					</xsl:if>
					<xsl:if
						test="./FTAP and (not(starts-with(lower-case(normalize-space(./FTAP)), 'nr')) and not(starts-with(lower-case(normalize-space(./FTAP)), 'n.r')))">
						<arco-cd:hasDocumentationType>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'DocumentationType/', arco-fn:urify(normalize-space(./FTAP)))" />
            				</xsl:attribute>
						</arco-cd:hasDocumentationType>
					</xsl:if>
					<xsl:if
						test="./FTAF and (not(starts-with(lower-case(normalize-space(./FTAF)), 'nr')) and not(starts-with(lower-case(normalize-space(./FTAF)), 'n.r')))">
						<arco-cd:hasFormat>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'Format/', arco-fn:urify(normalize-space(./FTAF)))" />
            				</xsl:attribute>
						</arco-cd:hasFormat>
					</xsl:if>
					<xsl:if
						test="./FTAA and (not(starts-with(lower-case(normalize-space(./FTAA)), 'nr')) and not(starts-with(lower-case(normalize-space(./FTAA)), 'n.r')))">
						<arco-cd:hasAuthor>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./FTAA))" />
            				</xsl:attribute>
						</arco-cd:hasAuthor>
						<dc:creator>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./FTAA))" />
            				</xsl:attribute>
						</dc:creator>
						<pico:author>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./FTAA))" />
            				</xsl:attribute>
						</pico:author>
					</xsl:if>
					<xsl:if
						test="./FTAE and (not(starts-with(lower-case(normalize-space(./FTAE)), 'nr')) and not(starts-with(lower-case(normalize-space(./FTAE)), 'n.r')))">
						<arco-core:hasAgentRole>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-photographic-documentation-', $photodocu-position, '-photographic-documentation-owner')" />
            				</xsl:attribute>
						</arco-core:hasAgentRole>
					</xsl:if>
				</rdf:Description>
				<!-- documentation category of photographic documentation as an individual -->
				<xsl:if
					test="./FTAX and not(lower-case(normalize-space(./FTAX))='nr' or lower-case(normalize-space(./FTAX))='n.r.' or lower-case(normalize-space(./FTAX))='nr (recupero pregresso)')">
					<xsl:choose>
						<xsl:when
							test="lower-case(normalize-space(./FTAX))='documentazione esistente'" />
						<xsl:when
							test="lower-case(normalize-space(./FTAX))='documentazione allegata'" />
						<xsl:when test="./FTAX">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                    <xsl:value-of
									select="concat($NS, 'DocumentationCategory/', arco-fn:urify(normalize-space(./FTAX)))" />
                                </xsl:attribute>
								<rdf:type
									rdf:resource="https://w3id.org/arco/ontology/context-description/DocumentationCategory" />
								<rdfs:label>
									<xsl:value-of select="normalize-space(./FTAX)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./FTAX)" />
								</l0:name>
							</rdf:Description>
						</xsl:when>
					</xsl:choose>
				</xsl:if>
				<!-- documentation type of photographic documentation as an individual -->
				<xsl:if
					test="./FTAP and (not(starts-with(lower-case(normalize-space(./FTAP)), 'nr')) and not(starts-with(lower-case(normalize-space(./FTAP)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'DocumentationType/', arco-fn:urify(normalize-space(./FTAP)))" />
            			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/DocumentationType'" />
            				</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./FTAP)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./FTAP)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- documentation format of photographic documentation as an individual -->
				<xsl:if
					test="./FTAF and (not(starts-with(lower-case(normalize-space(./FTAF)), 'nr')) and not(starts-with(lower-case(normalize-space(./FTAF)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'Format/', arco-fn:urify(normalize-space(./FTAF)))" />
            			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/Format'" />
            				</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./FTAF)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./FTAF)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- documentation author of photographic documentation as an individual -->
				<xsl:if
					test="./FTAA and (not(starts-with(lower-case(normalize-space(./FTAA)), 'nr')) and not(starts-with(lower-case(normalize-space(./FTAA)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(./FTAA))" />
            			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Agent'" />
            				</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./FTAA)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./FTAA)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- agent role of photographic documentation as an individual -->
				<xsl:if
					test="./FTAE and (not(starts-with(lower-case(normalize-space(./FTAE)), 'nr')) and not(starts-with(lower-case(normalize-space(./FTAE)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
		                        		<xsl:value-of
							select="concat($NS, 'AgentRole/', $itemURI, '-photographic-documentation-', $photodocu-position, '-photographic-documentation-owner')" />
		                    		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/arco/ontology/core/AgentRole'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Ente proprietario della documentazione fotografica ', $photodocu-position, ' del bene culturale ', $itemURI, ': ', normalize-space(./FTAE))" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Owner agency of photographic documentation ', $photodocu-position, ' of cultural property ', $itemURI, ': ', normalize-space(./FTAE))" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Ente proprietario della documentazione fotografica ', $photodocu-position, ' del bene culturale ', $itemURI, ': ', normalize-space(./FTAE))" />
						</l0:name>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Owner agency of photographic documentation ', $photodocu-position, ' of cultural property ', $itemURI, ': ', normalize-space(./FTAE))" />
						</l0:name>
						<arco-core:hasRole>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'Role/Owner')" />
				                        </xsl:attribute>
						</arco-core:hasRole>
						<arco-core:hasAgent>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./FTAE))" />
				                        </xsl:attribute>
						</arco-core:hasAgent>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
				                        <xsl:value-of
							select="concat($NS, 'Role/Owner')" />
				                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/italia/onto/RO/Role'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="'Ente proprietario della documentazione'" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of select="'Owner of documentation'" />
						</rdfs:label>
						<arco-core:isRoleOf>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-photographic-documentation-', $photodocu-position, '-photographic-documentation-owner')" />
				                        </xsl:attribute>
						</arco-core:isRoleOf>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
				                        <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(./FTAE))" />
				                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Agent'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./FTAE)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./FTAE)" />
						</l0:name>
						<arco-core:isAgentOf>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-photographic-documentation-', $photodocu-position, '-photographic-documentation-owner')" />
				                        </xsl:attribute>
						</arco-core:isAgentOf>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- Graphic or cartographic documentation of cultural property as an 
				individual -->
			<xsl:for-each select="record/metadata/schede/*/DO/DRA">
				<xsl:variable name="cartodocu-position">
					<xsl:value-of select="position()" />
				</xsl:variable>
				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of
						select="concat($NS, 'GraphicOrCartographicDocumentation/', $itemURI, '-graphic-cartographic-documentation-', position())" />
            		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/GraphicOrCartographicDocumentation'" />
            			</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Graphic or cartographic documentation ', position(), ' of cultural property: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Graphic or cartographic documentation ', position(), ' of cultural property: ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Documentazione grafica o cartografica ', position(), ' del bene culturale: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Documentazione grafica o cartografica ', position(), ' del bene culturale: ', $itemURI)" />
					</l0:name>
					<arco-cd:isDocumentationOf>
						<xsl:attribute name="rdf:resource"> 
							<xsl:value-of
							select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
						</xsl:attribute>
					</arco-cd:isDocumentationOf>
					<xsl:if
						test="./DRAN and (not(starts-with(lower-case(normalize-space(./DRAN)), 'nr')) and not(starts-with(lower-case(normalize-space(./DRAN)), 'n.r')))">
						<arco-cd:documentationIdentifier>
							<xsl:value-of select="normalize-space(./DRAN)" />
						</arco-cd:documentationIdentifier>
					</xsl:if>
					<xsl:if
						test="./DRAD and (not(starts-with(lower-case(normalize-space(./DRAD)), 'nr')) and not(starts-with(lower-case(normalize-space(./DRAD)), 'n.r')))">
						<tiapit:time>
							<xsl:value-of select="normalize-space(./DRAD)" />
						</tiapit:time>
					</xsl:if>
					<xsl:if
						test="./DRAC and not(./DRAC='N/R') and (not(starts-with(lower-case(normalize-space(./DRAC)), 'nr')) and not(starts-with(lower-case(normalize-space(./DRAC)), 'n.r')))">
						<arco-cd:documentationLocation>
							<xsl:value-of select="normalize-space(./DRAC)" />
						</arco-cd:documentationLocation>
					</xsl:if>
					<xsl:if
						test="./DRAP and (not(starts-with(lower-case(normalize-space(./DRAP)), 'nr')) and not(starts-with(lower-case(normalize-space(./DRAP)), 'n.r')))">
						<arco-core:specifications>
							<xsl:value-of select="normalize-space(./DRAP)" />
						</arco-core:specifications>
					</xsl:if>
					<xsl:if
						test="./DRAK and (not(starts-with(lower-case(normalize-space(./DRAK)), 'nr')) and not(starts-with(lower-case(normalize-space(./DRAK)), 'n.r')))">
						<arco-cd:digitalFileName>
							<xsl:value-of select="normalize-space(./DRAK)" />
						</arco-cd:digitalFileName>
					</xsl:if>
					<xsl:if
						test="./DRAO and (not(starts-with(lower-case(normalize-space(./DRAO)), 'nr')) and not(starts-with(lower-case(normalize-space(./DRAO)), 'n.r')))">
						<arco-core:note>
							<xsl:value-of select="normalize-space(./DRAO)" />
						</arco-core:note>
					</xsl:if>
					<xsl:if test="./DRAW">
						<smapit:URL>
							<xsl:value-of select="normalize-space(./DRAW)" />
						</smapit:URL>
					</xsl:if>
					<xsl:if
						test="./DRAY and (not(starts-with(lower-case(normalize-space(./DRAY)), 'nr')) and not(starts-with(lower-case(normalize-space(./DRAY)), 'n.r')))">
						<arco-cd:rights>
							<xsl:value-of select="normalize-space(./DRAY)" />
						</arco-cd:rights>
					</xsl:if>
					<xsl:if
						test="./DRAM and (not(starts-with(lower-case(normalize-space(./DRAM)), 'nr')) and not(starts-with(lower-case(normalize-space(./DRAM)), 'n.r')))">
						<arco-cd:documentationTitle>
							<xsl:value-of select="normalize-space(./DRAM)" />
						</arco-cd:documentationTitle>
					</xsl:if>
					<xsl:if
						test="./DRAS and (not(starts-with(lower-case(normalize-space(./DRAS)), 'nr')) and not(starts-with(lower-case(normalize-space(./DRAS)), 'n.r')))">
						<arco-cd:hasScale>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'Scale/', arco-fn:urify(normalize-space(./DRAS)))" />
            				</xsl:attribute>
						</arco-cd:hasScale>
					</xsl:if>
					<xsl:if
						test="./DRAX and not(lower-case(normalize-space(./DRAX))='nr' or lower-case(normalize-space(./DRAX))='n.r.' or lower-case(normalize-space(./DRAX))='nr (recupero pregresso)')">
						<arco-core:hasCategory>
							<xsl:attribute name="rdf:resource">
                                <xsl:choose>
                                    <xsl:when
								test="lower-case(normalize-space(./DRAX))='documentazione esistente'">
                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/ExistingDocumentation'" />
                                    </xsl:when>
                                    <xsl:when
								test="lower-case(normalize-space(./DRAX))='documentazione allegata'">
                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/AttachedDocumentation'" />
                                    </xsl:when>
                                    <xsl:when test="./DRAX">
                                        <xsl:value-of
								select="concat($NS, 'DocumentationCategory/', arco-fn:urify(normalize-space(./DRAX)))" />
                                    </xsl:when>
                                </xsl:choose>
                            </xsl:attribute>
						</arco-core:hasCategory>
					</xsl:if>
					<xsl:if
						test="./DRAT and (not(starts-with(lower-case(normalize-space(./DRAT)), 'nr')) and not(starts-with(lower-case(normalize-space(./DRAT)), 'n.r')))">
						<arco-cd:hasDocumentationType>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'DocumentationType/', arco-fn:urify(normalize-space(./DRAT)))" />
            				</xsl:attribute>
						</arco-cd:hasDocumentationType>
					</xsl:if>
					<xsl:if
						test="./DRAF and (not(starts-with(lower-case(normalize-space(./DRAF)), 'nr')) and not(starts-with(lower-case(normalize-space(./DRAF)), 'n.r')))">
						<arco-cd:hasFormat>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'Format/', arco-fn:urify(normalize-space(./DRAF)))" />
            				</xsl:attribute>
						</arco-cd:hasFormat>
					</xsl:if>
					<xsl:if
						test="./DRAA and (not(starts-with(lower-case(normalize-space(./DRAA)), 'nr')) and not(starts-with(lower-case(normalize-space(./DRAA)), 'n.r')))">
						<arco-cd:hasAuthor>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./DRAA))" />
            				</xsl:attribute>
						</arco-cd:hasAuthor>
						<dc:creator>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./DRAA))" />
            				</xsl:attribute>
						</dc:creator>
						<pico:author>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./DRAA))" />
            				</xsl:attribute>
						</pico:author>
					</xsl:if>
					<xsl:if
						test="./DRAE and (not(starts-with(lower-case(normalize-space(./DRAE)), 'nr')) and not(starts-with(lower-case(normalize-space(./DRAE)), 'n.r')))">
						<arco-core:hasAgentRole>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-carto-graphic-documentation-', $cartodocu-position, '-carto-graphic-documentation-owner')" />
            				</xsl:attribute>
						</arco-core:hasAgentRole>
					</xsl:if>
				</rdf:Description>
				<!-- documentation scale of graphic or cartographic documentation as 
					an individual -->
				<xsl:if
					test="./DRAS and (not(starts-with(lower-case(normalize-space(./DRAS)), 'nr')) and not(starts-with(lower-case(normalize-space(./DRAS)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'Scale/', arco-fn:urify(normalize-space(./DRAS)))" />
            			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/Scale'" />
            				</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./DRAS)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./DRAS)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- documentation category of graphic or cartographic documentation 
					as an individual -->
				<xsl:if
					test="./DRAX and not(lower-case(normalize-space(./DRAX))='nr' or lower-case(normalize-space(./DRAX))='n.r.' or lower-case(normalize-space(./DRAX))='nr (recupero pregresso)')">
					<xsl:choose>
						<xsl:when
							test="lower-case(normalize-space(./DRAX))='documentazione esistente'" />
						<xsl:when
							test="lower-case(normalize-space(./DRAX))='documentazione allegata'" />
						<xsl:when test="./DRAX">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                    <xsl:value-of
									select="concat($NS, 'DocumentationCategory/', arco-fn:urify(normalize-space(./DRAX)))" />
                                </xsl:attribute>
								<rdf:type
									rdf:resource="https://w3id.org/arco/ontology/context-description/DocumentationCategory" />
								<rdfs:label>
									<xsl:value-of select="normalize-space(./DRAX)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./DRAX)" />
								</l0:name>
							</rdf:Description>
						</xsl:when>
					</xsl:choose>
				</xsl:if>
				<!-- documentation type of graphic and cartographic documentation as 
					an individual -->
				<xsl:if
					test="./DRAT and (not(starts-with(lower-case(normalize-space(./DRAT)), 'nr')) and not(starts-with(lower-case(normalize-space(./DRAT)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'DocumentationType/', arco-fn:urify(normalize-space(./DRAT)))" />
            			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/DocumentationType'" />
            				</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./DRAT)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./DRAT)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- documentation format of graphic or cartographic documentation as 
					an individual -->
				<xsl:if
					test="./DRAF and (not(starts-with(lower-case(normalize-space(./DRAF)), 'nr')) and not(starts-with(lower-case(normalize-space(./DRAF)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'Format/', arco-fn:urify(normalize-space(./DRAF)))" />
            			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/Format'" />
            				</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./DRAF)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./DRAF)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- documentation author of photographic documentation as an individual -->
				<xsl:if
					test="./DRAA and (not(starts-with(lower-case(normalize-space(./DRAA)), 'nr')) and not(starts-with(lower-case(normalize-space(./DRAA)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(./DRAA))" />
            			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Agent'" />
            				</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./DRAA)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./DRAA)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- agent role of graphic or cartographic documentation as an individual -->
				<xsl:if
					test="./DRAE and (not(starts-with(lower-case(normalize-space(./DRAE)), 'nr')) and not(starts-with(lower-case(normalize-space(./DRAE)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
		                        		<xsl:value-of
							select="concat($NS, 'AgentRole/', $itemURI, '-carto-graphic-documentation-', $cartodocu-position, '-carto-graphic-documentation-owner')" />
		                    		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/arco/ontology/core/AgentRole'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Ente proprietario della documentazione grafica o cartografica ', $cartodocu-position, ' del bene culturale ', $itemURI, ': ', normalize-space(./DRAE))" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Owner agency of graphic or cartographic documentation ', $cartodocu-position, ' of cultural property ', $itemURI, ': ', normalize-space(./DRAE))" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Ente proprietario della documentazione grafica o cartografica ', $cartodocu-position, ' del bene culturale ', $itemURI, ': ', normalize-space(./DRAE))" />
						</l0:name>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Owner agency of graphic or cartographic documentation ', $cartodocu-position, ' of cultural property ', $itemURI, ': ', normalize-space(./DRAE))" />
						</l0:name>
						<arco-core:hasRole>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'Role/Owner')" />
				                        </xsl:attribute>
						</arco-core:hasRole>
						<arco-core:hasAgent>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./DRAE))" />
				                        </xsl:attribute>
						</arco-core:hasAgent>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
				                        <xsl:value-of
							select="concat($NS, 'Role/Owner')" />
				                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/italia/onto/RO/Role'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="'Ente proprietario della documentazione'" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of select="'Owner of documentation'" />
						</rdfs:label>
						<arco-core:isRoleOf>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-carto-graphic-documentation-', $cartodocu-position, '-carto-graphic-documentation-owner')" />
				                        </xsl:attribute>
						</arco-core:isRoleOf>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
				                        <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(./DRAE))" />
				                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Agent'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./DRAE)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./DRAE)" />
						</l0:name>
						<arco-core:isAgentOf>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-carto-graphic-documentation-', $cartodocu-position, '-carto-graphic-documentation-owner')" />
				                        </xsl:attribute>
						</arco-core:isAgentOf>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- Film documentation of cultural property as an individual -->
			<xsl:for-each select="record/metadata/schede/*/DO/VDC">
				<xsl:variable name="filmdocu-position">
					<xsl:value-of select="position()" />
				</xsl:variable>
				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of
						select="concat($NS, 'FilmDocumentation/', $itemURI, '-film-documentation-', position())" />
            		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/FilmDocumentation'" />
            			</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Film documentation ', position(), ' of cultural property: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Film documentation ', position(), ' of cultural property: ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Documentazione video-cinematografica ', position(), ' del bene culturale: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Documentazione video-cinematografica ', position(), ' del bene culturale: ', $itemURI)" />
					</l0:name>
					<arco-cd:isDocumentationOf>
						<xsl:attribute name="rdf:resource"> 
							<xsl:value-of
							select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
						</xsl:attribute>
					</arco-cd:isDocumentationOf>
					<xsl:if
						test="./VDCN and (not(starts-with(lower-case(normalize-space(./VDCN)), 'nr')) and not(starts-with(lower-case(normalize-space(./VDCN)), 'n.r')))">
						<arco-cd:documentationIdentifier>
							<xsl:value-of select="normalize-space(./VDCN)" />
						</arco-cd:documentationIdentifier>
					</xsl:if>
					<xsl:if
						test="./VDCD and (not(starts-with(lower-case(normalize-space(./VDCD)), 'nr')) and not(starts-with(lower-case(normalize-space(./VDCD)), 'n.r')))">
						<tiapit:time>
							<xsl:value-of select="normalize-space(./VDCD)" />
						</tiapit:time>
					</xsl:if>
					<xsl:if
						test="./VDCC and not(./VDCC='N/R') and (not(starts-with(lower-case(normalize-space(./VDCC)), 'nr')) and not(starts-with(lower-case(normalize-space(./VDCC)), 'n.r')))">
						<arco-cd:documentationLocation>
							<xsl:value-of select="normalize-space(./VDCC)" />
						</arco-cd:documentationLocation>
					</xsl:if>
					<xsl:if test="./VDCS">
						<arco-core:specifications>
							<xsl:value-of select="normalize-space(./VDCS)" />
						</arco-core:specifications>
					</xsl:if>
					<xsl:if
						test="./VDCK and (not(starts-with(lower-case(normalize-space(./VDCK)), 'nr')) and not(starts-with(lower-case(normalize-space(./VDCK)), 'n.r')))">
						<arco-cd:digitalFileName>
							<xsl:value-of select="normalize-space(./VDCK)" />
						</arco-cd:digitalFileName>
					</xsl:if>
					<xsl:if test="./VDCT">
						<arco-core:note>
							<xsl:value-of select="normalize-space(./VDCT)" />
						</arco-core:note>
					</xsl:if>

					<xsl:if
						test="./VDCW and (not(starts-with(lower-case(normalize-space(./VDCW)), 'nr')) and not(starts-with(lower-case(normalize-space(./VDCW)), 'n.r')))">
						<smapit:URL>
							<xsl:value-of select="normalize-space(./VDCW)" />
						</smapit:URL>
					</xsl:if>
					<xsl:if
						test="./VDCY and (not(starts-with(lower-case(normalize-space(./VDCY)), 'nr')) and not(starts-with(lower-case(normalize-space(./VDCY)), 'n.r')))">
						<arco-cd:rights>
							<xsl:value-of select="normalize-space(./VDCY)" />
						</arco-cd:rights>
					</xsl:if>
					<xsl:if
						test="./VDCA and (not(starts-with(lower-case(normalize-space(./VDCA)), 'nr')) and not(starts-with(lower-case(normalize-space(./VDCA)), 'n.r')))">
						<arco-cd:documentationTitle>
							<xsl:value-of select="normalize-space(./VDCA)" />
						</arco-cd:documentationTitle>
					</xsl:if>
					<xsl:if
						test="./VDCX and not(lower-case(normalize-space(./VDCX))='nr' or lower-case(normalize-space(./VDCX))='n.r.' or lower-case(normalize-space(./VDCX))='nr (recupero pregresso)')">
						<arco-core:hasCategory>
							<xsl:attribute name="rdf:resource">
                                <xsl:choose>
                                    <xsl:when
								test="lower-case(normalize-space(./VDCX))='documentazione esistente'">
                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/ExistingDocumentation'" />
                                    </xsl:when>
                                    <xsl:when
								test="lower-case(normalize-space(./VDCX))='documentazione allegata'">
                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/AttachedDocumentation'" />
                                    </xsl:when>
                                    <xsl:when test="./VDCX">
                                        <xsl:value-of
								select="concat($NS, 'DocumentationCategory/', arco-fn:urify(normalize-space(./VDCX)))" />
                                    </xsl:when>
                                </xsl:choose>
                            </xsl:attribute>
						</arco-core:hasCategory>
					</xsl:if>
					<xsl:if
						test="./VDCP and (not(starts-with(lower-case(normalize-space(./VDCP)), 'nr')) and not(starts-with(lower-case(normalize-space(./VDCP)), 'n.r')))">
						<arco-cd:hasDocumentationType>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'DocumentationType/', arco-fn:urify(normalize-space(./VDCP)))" />
            				</xsl:attribute>
						</arco-cd:hasDocumentationType>
					</xsl:if>
					<xsl:if
						test="./VDCP and (not(starts-with(lower-case(normalize-space(./VDCP)), 'nr')) and not(starts-with(lower-case(normalize-space(./VDCP)), 'n.r')))">
						<arco-cd:hasFormat>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'Format/', arco-fn:urify(normalize-space(./VDCP)))" />
            				</xsl:attribute>
						</arco-cd:hasFormat>
					</xsl:if>
					<xsl:if test="./VDCR and (not(starts-with(lower-case(normalize-space(./VDCR)), 'nr')) and not(starts-with(lower-case(normalize-space(./VDCR)), 'n.r')))">
						<arco-cd:hasAuthor>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./VDCR))" />
            				</xsl:attribute>
						</arco-cd:hasAuthor>
						<dc:creator>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./VDCR))" />
            				</xsl:attribute>
						</dc:creator>
						<pico:author>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./VDCR))" />
            				</xsl:attribute>
						</pico:author>
					</xsl:if>
					<xsl:if
						test="./VDCE and (not(starts-with(lower-case(normalize-space(./VDCE)), 'nr')) and not(starts-with(lower-case(normalize-space(./VDCE)), 'n.r')))">
						<arco-core:hasAgentRole>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-film-documentation-', $filmdocu-position, '-film-documentation-owner')" />
            				</xsl:attribute>
						</arco-core:hasAgentRole>
					</xsl:if>
				</rdf:Description>
				<!-- documentation category of graphic or cartographic documentation 
					as an individual -->
				<xsl:if
					test="./VDCX and not(lower-case(normalize-space(./VDCX))='nr' or lower-case(normalize-space(./VDCX))='n.r.' or lower-case(normalize-space(./VDCX))='nr (recupero pregresso)')">
					<xsl:choose>
						<xsl:when
							test="lower-case(normalize-space(./VDCX))='documentazione esistente'" />
						<xsl:when
							test="lower-case(normalize-space(./VDCX))='documentazione allegata'" />
						<xsl:when test="./VDCX">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                    <xsl:value-of
									select="concat($NS, 'DocumentationCategory/', arco-fn:urify(normalize-space(./VDCX)))" />
                                </xsl:attribute>
								<rdf:type
									rdf:resource="https://w3id.org/arco/ontology/context-description/DocumentationCategory" />
								<rdfs:label>
									<xsl:value-of select="normalize-space(./VDCX)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./VDCX)" />
								</l0:name>
							</rdf:Description>
						</xsl:when>
					</xsl:choose>
				</xsl:if>
				<!-- documentation type of film documentation as an individual - for 
					film documentation type and format are the same resource -->
				<xsl:if
					test="./VDCP and (not(starts-with(lower-case(normalize-space(./VDCP)), 'nr')) and not(starts-with(lower-case(normalize-space(./VDCP)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'DocumentationType/', arco-fn:urify(normalize-space(./VDCP)))" />
            			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/DocumentationType'" />
            				</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./VDCP)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./VDCP)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- documentation format of film documentation as an individual - for 
					film documentation type and format are the same resource -->
				<xsl:if
					test="./VDCP and (not(starts-with(lower-case(normalize-space(./VDCP)), 'nr')) and not(starts-with(lower-case(normalize-space(./VDCP)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'Format/', arco-fn:urify(normalize-space(./VDCP)))" />
            			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/Format'" />
            				</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./VDCP)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./VDCP)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- documentation author of FILM documentation as an individual -->
				<xsl:if
					test="./VDCR and (not(starts-with(lower-case(normalize-space(./VDCR)), 'nr')) and not(starts-with(lower-case(normalize-space(./VDCR)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(./VDCR))" />
            			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Agent'" />
            				</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./VDCR)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./VDCR)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- agent role of film documentation as an individual -->
				<xsl:if
					test="./VDCE and (not(starts-with(lower-case(normalize-space(./VDCE)), 'nr')) and not(starts-with(lower-case(normalize-space(./VDCE)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
		                        		<xsl:value-of
							select="concat($NS, 'AgentRole/', $itemURI, '-film-documentation-', $filmdocu-position, '-film-documentation-owner')" />
		                    		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/arco/ontology/core/AgentRole'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Ente proprietario della documentazione video-cinematografica ', $filmdocu-position, ' del bene culturale ', $itemURI, ': ', normalize-space(./VDCE))" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Owner agency of film documentation ', $filmdocu-position, ' of cultural property ', $itemURI, ': ', normalize-space(./VDCE))" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Ente proprietario della documentazione video-cinematografica ', $filmdocu-position, ' del bene culturale ', $itemURI, ': ', normalize-space(./VDCE))" />
						</l0:name>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Owner agency of film documentation ', $filmdocu-position, ' of cultural property ', $itemURI, ': ', normalize-space(./VDCE))" />
						</l0:name>
						<arco-core:hasRole>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'Role/Owner')" />
				                        </xsl:attribute>
						</arco-core:hasRole>
						<arco-core:hasAgent>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./VDCE))" />
				                        </xsl:attribute>
						</arco-core:hasAgent>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
				                        <xsl:value-of
							select="concat($NS, 'Role/Owner')" />
				                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/italia/onto/RO/Role'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="'Ente proprietario della documentazione'" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of select="'Owner of documentation'" />
						</rdfs:label>
						<arco-core:isRoleOf>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-film-documentation-', $filmdocu-position, '-film-documentation-owner')" />
				                        </xsl:attribute>
						</arco-core:isRoleOf>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
				                        <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(./VDCE))" />
				                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Agent'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./VDCE)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./VDCE)" />
						</l0:name>
						<arco-core:isAgentOf>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-film-documentation-', $filmdocu-position, '-film-documentation-owner')" />
				                        </xsl:attribute>
						</arco-core:isAgentOf>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- Audio documentation of cultural property as an individual -->
			<xsl:for-each select="record/metadata/schede/*/DO/REG">
				<xsl:variable name="audiodocu-position">
					<xsl:value-of select="position()" />
				</xsl:variable>
				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of
						select="concat($NS, 'AudioDocumentation/', $itemURI, '-audio-documentation-', position())" />
            		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/AudioDocumentation'" />
            			</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Audio documentation ', position(), ' of cultural property: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Audio documentation ', position(), ' of cultural property: ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Documentazione audio ', position(), ' del bene culturale: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Documentazione audio ', position(), ' del bene culturale: ', $itemURI)" />
					</l0:name>
					<arco-cd:isDocumentationOf>
						<xsl:attribute name="rdf:resource"> 
							<xsl:value-of
							select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
						</xsl:attribute>
					</arco-cd:isDocumentationOf>
					<xsl:if
						test="./REGN and (not(starts-with(lower-case(normalize-space(./REGN)), 'nr')) and not(starts-with(lower-case(normalize-space(./REGN)), 'n.r')))">
						<arco-cd:documentationIdentifier>
							<xsl:value-of select="normalize-space(./REGN)" />
						</arco-cd:documentationIdentifier>
					</xsl:if>
					<xsl:if
						test="./REGD and (not(starts-with(lower-case(normalize-space(./REGD)), 'nr')) and not(starts-with(lower-case(normalize-space(./REGD)), 'n.r')))">
						<tiapit:time>
							<xsl:value-of select="normalize-space(./REGD)" />
						</tiapit:time>
					</xsl:if>
					<xsl:if
						test="./REGC and not(./REGC='N/R') and (not(starts-with(lower-case(normalize-space(./REGC)), 'nr')) and not(starts-with(lower-case(normalize-space(./REGC)), 'n.r')))">
						<arco-cd:documentationLocation>
							<xsl:value-of select="normalize-space(./REGC)" />
						</arco-cd:documentationLocation>
					</xsl:if>
					<xsl:if test="./REGS">
						<arco-core:specifications>
							<xsl:value-of select="normalize-space(./REGS)" />
						</arco-core:specifications>
					</xsl:if>
					<xsl:if
						test="./REGK and (not(starts-with(lower-case(normalize-space(./REGK)), 'nr')) and not(starts-with(lower-case(normalize-space(./REGK)), 'n.r')))">
						<arco-cd:digitalFileName>
							<xsl:value-of select="normalize-space(./REGK)" />
						</arco-cd:digitalFileName>
					</xsl:if>
					<xsl:if test="./REGT">
						<arco-core:note>
							<xsl:value-of select="normalize-space(./REGT)" />
						</arco-core:note>
					</xsl:if>
					<xsl:if
						test="./REGW and (not(starts-with(lower-case(normalize-space(./REGW)), 'nr')) and not(starts-with(lower-case(normalize-space(./REGW)), 'n.r')))">
						<smapit:URL>
							<xsl:value-of select="normalize-space(./REGW)" />
						</smapit:URL>
					</xsl:if>
					<xsl:if
						test="./REGZ and (not(starts-with(lower-case(normalize-space(./REGZ)), 'nr')) and not(starts-with(lower-case(normalize-space(./REGZ)), 'n.r')))">
						<arco-cd:documentationTitle>
							<xsl:value-of select="normalize-space(./REGZ)" />
						</arco-cd:documentationTitle>
					</xsl:if>
					<xsl:if
						test="./REGX and not(lower-case(normalize-space(./REGX))='nr' or lower-case(normalize-space(./REGX))='n.r.' or lower-case(normalize-space(./REGX))='nr (recupero pregresso)')">
						<arco-core:hasCategory>
							<xsl:attribute name="rdf:resource">
                                <xsl:choose>
                                    <xsl:when
								test="lower-case(normalize-space(./REGX))='documentazione esistente'">
                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/ExistingDocumentation'" />
                                    </xsl:when>
                                    <xsl:when
								test="lower-case(normalize-space(./REGX))='documentazione allegata'">
                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/AttachedDocumentation'" />
                                    </xsl:when>
                                    <xsl:when test="./REGX">
                                        <xsl:value-of
								select="concat($NS, 'DocumentationCategory/', arco-fn:urify(normalize-space(./REGX)))" />
                                    </xsl:when>
                                </xsl:choose>
                            </xsl:attribute>
						</arco-core:hasCategory>
					</xsl:if>
					<xsl:if
						test="./REGP and (not(starts-with(lower-case(normalize-space(./REGP)), 'nr')) and not(starts-with(lower-case(normalize-space(./REGP)), 'n.r')))">
						<arco-cd:hasDocumentationType>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'DocumentationType/', arco-fn:urify(normalize-space(./REGP)))" />
            				</xsl:attribute>
						</arco-cd:hasDocumentationType>
					</xsl:if>
					<xsl:if
						test="./REGP and (not(starts-with(lower-case(normalize-space(./REGP)), 'nr')) and not(starts-with(lower-case(normalize-space(./REGP)), 'n.r')))">
						<arco-cd:hasFormat>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'Format/', arco-fn:urify(normalize-space(./REGP)))" />
            				</xsl:attribute>
						</arco-cd:hasFormat>
					</xsl:if>
					<xsl:if test="./REGA and (not(starts-with(lower-case(normalize-space(./REGA)), 'nr')) and not(starts-with(lower-case(normalize-space(./REGA)), 'n.r')))">
						<arco-cd:hasAuthor>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./REGA))" />
            				</xsl:attribute>
						</arco-cd:hasAuthor>
						<dc:creator>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./REGA))" />
            				</xsl:attribute>
						</dc:creator>
						<pico:author>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./REGA))" />
            				</xsl:attribute>
						</pico:author>
					</xsl:if>
					<xsl:if
						test="./REGE and (not(starts-with(lower-case(normalize-space(./REGE)), 'nr')) and not(starts-with(lower-case(normalize-space(./REGE)), 'n.r')))">
						<arco-core:hasAgentRole>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-audio-documentation-', $audiodocu-position, '-audio-documentation-owner')" />
            				</xsl:attribute>
						</arco-core:hasAgentRole>
					</xsl:if>
				</rdf:Description>
				<!-- documentation category of audio documentation as an individual -->
				<xsl:if
					test="./REGX and not(lower-case(normalize-space(./REGX))='nr' or lower-case(normalize-space(./REGX))='n.r.' or lower-case(normalize-space(./REGX))='nr (recupero pregresso)')">
					<xsl:choose>
						<xsl:when
							test="lower-case(normalize-space(./REGX))='documentazione esistente'" />
						<xsl:when
							test="lower-case(normalize-space(./REGX))='documentazione allegata'" />
						<xsl:when test="./REGX">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                    <xsl:value-of
									select="concat($NS, 'DocumentationCategory/', arco-fn:urify(normalize-space(./REGX)))" />
                                </xsl:attribute>
								<rdf:type
									rdf:resource="https://w3id.org/arco/ontology/context-description/DocumentationCategory" />
								<rdfs:label>
									<xsl:value-of select="normalize-space(./REGX)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./REGX)" />
								</l0:name>
							</rdf:Description>
						</xsl:when>
					</xsl:choose>
				</xsl:if>
				<!-- documentation type of audio documentation as an individual - for 
					audio documentation type and format are the same resource -->
				<xsl:if
					test="./REGP and (not(starts-with(lower-case(normalize-space(./REGP)), 'nr')) and not(starts-with(lower-case(normalize-space(./REGP)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'DocumentationType/', arco-fn:urify(normalize-space(./REGP)))" />
            			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/DocumentationType'" />
            				</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./REGP)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./REGP)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- documentation format of audio documentation as an individual - for 
					audio documentation type and format are the same resource -->
				<xsl:if
					test="./REGP and (not(starts-with(lower-case(normalize-space(./REGP)), 'nr')) and not(starts-with(lower-case(normalize-space(./REGP)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'Format/', arco-fn:urify(normalize-space(./REGP)))" />
            			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/Format'" />
            				</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./REGP)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./REGP)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- documentation author of audio documentation as an individual -->
				<xsl:if
					test="./REGA and (not(starts-with(lower-case(normalize-space(./REGA)), 'nr')) and not(starts-with(lower-case(normalize-space(./REGA)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(./REGA))" />
            			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Agent'" />
            				</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./REGA)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./REGA)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- agent role of audio documentation as an individual -->
				<xsl:if
					test="./REGE and (not(starts-with(lower-case(normalize-space(./REGE)), 'nr')) and not(starts-with(lower-case(normalize-space(./REGE)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
		                        		<xsl:value-of
							select="concat($NS, 'AgentRole/', $itemURI, '-audio-documentation-', $audiodocu-position, '-audio-documentation-owner')" />
		                    		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/arco/ontology/core/AgentRole'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Ente proprietario della documentazione audio ', $audiodocu-position, ' del bene culturale ', $itemURI, ': ', normalize-space(./REGE))" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Owner agency of audio documentation ', $audiodocu-position, ' of cultural property ', $itemURI, ': ', normalize-space(./REGE))" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Ente proprietario della documentazione audio ', $audiodocu-position, ' del bene culturale ', $itemURI, ': ', normalize-space(./REGE))" />
						</l0:name>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Owner agency of audio documentation ', $audiodocu-position, ' of cultural property ', $itemURI, ': ', normalize-space(./REGE))" />
						</l0:name>
						<arco-core:hasRole>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'Role/Owner')" />
				                        </xsl:attribute>
						</arco-core:hasRole>
						<arco-core:hasAgent>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./REGE))" />
				                        </xsl:attribute>
						</arco-core:hasAgent>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
				                        <xsl:value-of
							select="concat($NS, 'Role/Owner')" />
				                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/italia/onto/RO/Role'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="'Ente proprietario della documentazione'" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of select="'Owner of documentation'" />
						</rdfs:label>
						<arco-core:isRoleOf>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-audio-documentation-', $audiodocu-position, '-audio-documentation-owner')" />
				                        </xsl:attribute>
						</arco-core:isRoleOf>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
				                        <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(./REGE))" />
				                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Agent'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./REGE)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./REGE)" />
						</l0:name>
						<arco-core:isAgentOf>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-audio-documentation-', $audiodocu-position, '-audio-documentation-owner')" />
				                        </xsl:attribute>
						</arco-core:isAgentOf>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- Sources and documents of cultural property as an individual -->
			<xsl:for-each select="record/metadata/schede/*/DO/FNT">
				<xsl:variable name="sourcedocu-position">
					<xsl:value-of select="position()" />
				</xsl:variable>
				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of
						select="concat($NS, 'SourceAndDocument/', $itemURI, '-source-document-', position())" />
            		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/SourceAndDocument'" />
            			</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Sources and documents ', position(), ' of cultural property: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Sources and documents ', position(), ' of cultural property: ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Fonti e documenti ', position(), ' del bene culturale: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Fonti e documenti ', position(), ' del bene culturale: ', $itemURI)" />
					</l0:name>
					<arco-cd:isDocumentationOf>
						<xsl:attribute name="rdf:resource"> 
							<xsl:value-of
							select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
						</xsl:attribute>
					</arco-cd:isDocumentationOf>
					<xsl:if
						test="./FNTI and (not(starts-with(lower-case(normalize-space(./FNTI)), 'nr')) and not(starts-with(lower-case(normalize-space(./FNTI)), 'n.r')))">
						<arco-cd:documentationIdentifier>
							<xsl:value-of select="normalize-space(./FNTI)" />
						</arco-cd:documentationIdentifier>
					</xsl:if>
					<!-- A 2.00 -->
					<xsl:if
						test="./FNTH and (not(starts-with(lower-case(normalize-space(./FNTH)), 'nr')) and not(starts-with(lower-case(normalize-space(./FNTH)), 'n.r')))">
						<arco-cd:documentationIdentifier>
							<xsl:value-of select="normalize-space(./FNTH)" />
						</arco-cd:documentationIdentifier>
					</xsl:if>
					<xsl:if
						test="./FNTD and (not(starts-with(lower-case(normalize-space(./FNTD)), 'nr')) and not(starts-with(lower-case(normalize-space(./FNTD)), 'n.r')))">
						<xsl:choose>
							<xsl:when
								test="$sheetType='A' and ($sheetVersion='2.00' or $sheetVersion='2.00_ICCD0')">
								<arco-cd:documentationTitle>
									<xsl:value-of select="normalize-space(./FNTD)" />
								</arco-cd:documentationTitle>
							</xsl:when>
							<xsl:otherwise>
								<tiapit:time>
									<xsl:value-of select="normalize-space(./FNTD)" />
								</tiapit:time>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:if>
					<xsl:if
						test="./FNTS and not(./FNTS='-' or ./FNTS='.' or ./FNTS='N/R') and (not(starts-with(lower-case(normalize-space(./FNTS)), 'nr')) and not(starts-with(lower-case(normalize-space(./FNTS)), 'n.r')))">
						<arco-cd:documentationLocation>
							<xsl:value-of select="normalize-space(./FNTS)" />
						</arco-cd:documentationLocation>
					</xsl:if>
					<xsl:if
						test="./FNTF and (not(starts-with(lower-case(normalize-space(./FNTF)), 'nr')) and not(starts-with(lower-case(normalize-space(./FNTF)), 'n.r')))">
						<arco-cd:folio>
							<xsl:value-of select="normalize-space(./FNTF)" />
						</arco-cd:folio>
					</xsl:if>
					<xsl:if
						test="./FNTY and (not(starts-with(lower-case(normalize-space(./FNTY)), 'nr')) and not(starts-with(lower-case(normalize-space(./FNTY)), 'n.r')))">
						<arco-cd:rights>
							<xsl:value-of select="normalize-space(./FNTY)" />
						</arco-cd:rights>
					</xsl:if>
					<xsl:if
						test="./FNTK and (not(starts-with(lower-case(normalize-space(./FNTK)), 'nr')) and not(starts-with(lower-case(normalize-space(./FNTK)), 'n.r')))">
						<arco-cd:digitalFileName>
							<xsl:value-of select="normalize-space(./FNTK)" />
						</arco-cd:digitalFileName>
					</xsl:if>
					<xsl:if test="./FNTO">
						<arco-core:note>
							<xsl:value-of select="normalize-space(./FNTO)" />
						</arco-core:note>
					</xsl:if>
					<xsl:if
						test="./FNTW and (not(starts-with(lower-case(normalize-space(./FNTW)), 'nr')) and not(starts-with(lower-case(normalize-space(./FNTW)), 'n.r')))">
						<smapit:URL>
							<xsl:value-of select="normalize-space(./FNTW)" />
						</smapit:URL>
					</xsl:if>
					<xsl:if
						test="./FNTT and (not(starts-with(lower-case(normalize-space(./FNTT)), 'nr')) and not(starts-with(lower-case(normalize-space(./FNTT)), 'n.r')))">
						<xsl:choose>
							<xsl:when
								test="$sheetType='A' and ($sheetVersion='2.00' or $sheetVersion='2.00_ICCD0')">
								<arco-cd:hasDocumentationType>
									<xsl:attribute name="rdf:resource">
            							<xsl:value-of
										select="concat($NS, 'DocumentationType/', arco-fn:urify(normalize-space(./FNTT)))" />
            						</xsl:attribute>
								</arco-cd:hasDocumentationType>
							</xsl:when>
							<xsl:otherwise>
								<arco-cd:documentationTitle>
									<xsl:value-of select="normalize-space(./FNTT)" />
								</arco-cd:documentationTitle>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:if>
					<xsl:if
						test="./FNTX and (not(starts-with(lower-case(normalize-space(./FNTX)), 'nr')) and not(starts-with(lower-case(normalize-space(./FNTX)), 'n.r')))">
						<arco-core:hasCategory>
							<xsl:attribute name="rdf:resource">
                                <xsl:choose>
                                    <xsl:when
								test="lower-case(normalize-space(./FNTX))='documentazione esistente'">
                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/ExistingDocumentation'" />
                                    </xsl:when>
                                    <xsl:when
								test="lower-case(normalize-space(./FNTX))='documentazione allegata'">
                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/AttachedDocumentation'" />
                                    </xsl:when>
                                    <xsl:when test="./FNTX">
                                        <xsl:value-of
								select="concat($NS, 'DocumentationCategory/', arco-fn:urify(normalize-space(./FNTX)))" />
                                    </xsl:when>
                                </xsl:choose>
                            </xsl:attribute>
						</arco-core:hasCategory>
					</xsl:if>
					<xsl:if
						test="./FNTP and (not(starts-with(lower-case(normalize-space(./FNTP)), 'nr')) and not(starts-with(lower-case(normalize-space(./FNTP)), 'n.r')))">
						<arco-cd:hasDocumentationType>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'DocumentationType/', arco-fn:urify(normalize-space(./FNTP)))" />
            				</xsl:attribute>
						</arco-cd:hasDocumentationType>
					</xsl:if>
					<xsl:if
						test="./FNTR and (not(starts-with(lower-case(normalize-space(./FNTR)), 'nr')) and not(starts-with(lower-case(normalize-space(./FNTR)), 'n.r')))">
						<arco-cd:hasFormat>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'Format/', arco-fn:urify(normalize-space(./FNTR)))" />
            				</xsl:attribute>
						</arco-cd:hasFormat>
					</xsl:if>
					<xsl:if test="./FNTA and (not(starts-with(lower-case(normalize-space(./FNTA)), 'nr')) and not(starts-with(lower-case(normalize-space(./FNTA)), 'n.r')))">
						<arco-cd:hasAuthor>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./FNTA))" />
            				</xsl:attribute>
						</arco-cd:hasAuthor>
						<dc:creator>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./FNTA))" />
            				</xsl:attribute>
						</dc:creator>
						<pico:author>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./FNTA))" />
            				</xsl:attribute>
						</pico:author>
					</xsl:if>
					<xsl:if
						test="./FNTN and (not(starts-with(lower-case(normalize-space(./FNTN)), 'nr')) and not(starts-with(lower-case(normalize-space(./FNTN)), 'n.r')))">
						<arco-cd:hasArchive>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./FNTN))" />
            				</xsl:attribute>
						</arco-cd:hasArchive>
					</xsl:if>
					<xsl:if
						test="./FNTE and (not(starts-with(lower-case(normalize-space(./FNTE)), 'nr')) and not(starts-with(lower-case(normalize-space(./FNTE)), 'n.r')))">
						<arco-core:hasAgentRole>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-source-document-', $sourcedocu-position, '-source-document-owner')" />
            				</xsl:attribute>
						</arco-core:hasAgentRole>
					</xsl:if>
				</rdf:Description>
				<!-- documentation category of sources and documents as an individual -->
				<xsl:if
					test="./FNTX and (not(starts-with(lower-case(normalize-space(./FNTX)), 'nr')) and not(starts-with(lower-case(normalize-space(./FNTX)), 'n.r')))">
					<xsl:choose>
						<xsl:when
							test="lower-case(normalize-space(./FNTX))='documentazione esistente'" />
						<xsl:when
							test="lower-case(normalize-space(./FNTX))='documentazione allegata'" />
						<xsl:when test="./FNTX">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                    <xsl:value-of
									select="concat($NS, 'DocumentationCategory/', arco-fn:urify(normalize-space(./FNTX)))" />
                                </xsl:attribute>
								<rdf:type
									rdf:resource="https://w3id.org/arco/ontology/context-description/DocumentationCategory" />
								<rdfs:label>
									<xsl:value-of select="normalize-space(./FNTX)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./FNTX)" />
								</l0:name>
							</rdf:Description>
						</xsl:when>
					</xsl:choose>
				</xsl:if>
				<!-- documentation type of sources and documents as an individual -->
				<xsl:if
					test="./FNTP and (not(starts-with(lower-case(normalize-space(./FNTP)), 'nr')) and not(starts-with(lower-case(normalize-space(./FNTP)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'DocumentationType/', arco-fn:urify(normalize-space(./FNTP)))" />
            			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/DocumentationType'" />
            				</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./FNTP)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./FNTP)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- documentation type of sources and documents as an individual - A 
					2.00 -->
				<xsl:if
					test="./FNTT and (not(starts-with(lower-case(normalize-space(./FNTT)), 'nr')) and not(starts-with(lower-case(normalize-space(./FNTT)), 'n.r')))">
					<xsl:if
						test="$sheetType='A' and ($sheetVersion='2.00' or $sheetVersion='2.00_ICCD0')">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
            				<xsl:value-of
								select="concat($NS, 'DocumentationType/', arco-fn:urify(normalize-space(./FNTT)))" />
            			</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
            					<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/DocumentationType'" />
            				</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./FNTT)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./FNTT)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
				</xsl:if>
				<!-- documentation format of sources and documents as an individual -->
				<xsl:if
					test="./FNTR and (not(starts-with(lower-case(normalize-space(./FNTR)), 'nr')) and not(starts-with(lower-case(normalize-space(./FNTR)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'Format/', arco-fn:urify(normalize-space(./FNTR)))" />
            			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/Format'" />
            				</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./FNTR)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./FNTR)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- documentation author of sources and documents as an individual -->
				<xsl:if
					test="./FNTA and (not(starts-with(lower-case(normalize-space(./FNTA)), 'nr')) and not(starts-with(lower-case(normalize-space(./FNTA)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(./FNTA))" />
            			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Agent'" />
            				</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./FNTA)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./FNTA)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- archive of sources and documents as an individual -->
				<xsl:if
					test="./FNTN and (not(starts-with(lower-case(normalize-space(./FNTN)), 'nr')) and not(starts-with(lower-case(normalize-space(./FNTN)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(./FNTN))" />
            			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Agent'" />
            				</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./FNTN)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./FNTN)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- agent role of sources and documents as an individual -->
				<xsl:if
					test="./FNTE and (not(starts-with(lower-case(normalize-space(./FNTE)), 'nr')) and not(starts-with(lower-case(normalize-space(./FNTE)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
		                        		<xsl:value-of
							select="concat($NS, 'AgentRole/', $itemURI, '-source-document-', $sourcedocu-position, '-source-document-owner')" />
		                    		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/arco/ontology/core/AgentRole'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Ente proprietario di fonti e documenti ', $sourcedocu-position, ' del bene culturale ', $itemURI, ': ', normalize-space(./FNTE))" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Owner agency of sources and documents ', $sourcedocu-position, ' of cultural property ', $itemURI, ': ', normalize-space(./FNTE))" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Ente proprietario di fonti e documenti ', $sourcedocu-position, ' del bene culturale ', $itemURI, ': ', normalize-space(./FNTE))" />
						</l0:name>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Owner agency of sources and documents ', $sourcedocu-position, ' of cultural property ', $itemURI, ': ', normalize-space(./FNTE))" />
						</l0:name>
						<arco-core:hasRole>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'Role/Owner')" />
				                        </xsl:attribute>
						</arco-core:hasRole>
						<arco-core:hasAgent>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./FNTE))" />
				                        </xsl:attribute>
						</arco-core:hasAgent>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
				                        <xsl:value-of
							select="concat($NS, 'Role/Owner')" />
				                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/italia/onto/RO/Role'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="'Ente proprietario della documentazione'" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of select="'Owner of documentation'" />
						</rdfs:label>
						<arco-core:isRoleOf>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-source-document-', $sourcedocu-position, '-source-document-owner')" />
				                        </xsl:attribute>
						</arco-core:isRoleOf>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
				                        <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(./FNTE))" />
				                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Agent'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./FNTE)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./FNTE)" />
						</l0:name>
						<arco-core:isAgentOf>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-source-document-', $sourcedocu-position, '-source-document-owner')" />
				                        </xsl:attribute>
						</arco-core:isAgentOf>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- Bibliography of cultural property as an individual -->
			<xsl:for-each select="record/metadata/schede/*/DO/BIB">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of
						select="concat($NS, 'Bibliography/', $itemURI, '-bibliography-', position())" />
            		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/Bibliography'" />
            			</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Bibliography ', position(), ' of cultural property: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Bibliography ', position(), ' of cultural property: ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Bibliografia ', position(), ' del bene culturale: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Bibliografia ', position(), ' del bene culturale: ', $itemURI)" />
					</l0:name>
					<arco-cd:isBibliographyOf>
						<xsl:attribute name="rdf:resource"> 
							<xsl:value-of
							select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
						</xsl:attribute>
					</arco-cd:isBibliographyOf>
					<xsl:if test="./BIBA">
						<arco-cd:bibliographicReferenceAuthor>
							<xsl:value-of select="normalize-space(./BIBA)" />
						</arco-cd:bibliographicReferenceAuthor>
					</xsl:if>
					<xsl:if test="./BIBD">
						<arco-cd:bibliographicReferenceDate>
							<xsl:value-of select="normalize-space(./BIBD)" />
						</arco-cd:bibliographicReferenceDate>
					</xsl:if>
					<xsl:if test="./BIBA and ./BIBD">
						<arco-cd:bibliographicReference>
							<xsl:choose>
								<xsl:when test="./BIBX">
									<xsl:value-of
										select="concat(normalize-space(./BIBX), ': ', normalize-space(./BIBA), ' - ', normalize-space(./BIBD))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat(normalize-space(./BIBA), ' - ', normalize-space(./BIBD))" />
								</xsl:otherwise>
							</xsl:choose>
						</arco-cd:bibliographicReference>
					</xsl:if>
					<xsl:if
						test="./BIBH and (not(starts-with(lower-case(normalize-space(./BIBH)), 'nr')) and not(starts-with(lower-case(normalize-space(./BIBH)), 'n.r')))">
						<arco-cd:bibliographyLocalIdentifier>
							<xsl:value-of select="normalize-space(./BIBH)" />
						</arco-cd:bibliographyLocalIdentifier>
					</xsl:if>
					<xsl:if
						test="./BIBK or ./NCUN and (not(starts-with(lower-case(normalize-space(./BIBK)), 'nr')) and not(starts-with(lower-case(normalize-space(./BIBK)), 'n.r')) and not(starts-with(lower-case(normalize-space(./NCUN)), 'nr')) and not(starts-with(lower-case(normalize-space(./NCUN)), 'n.r')))">
						<arco-cd:bibliographyICCDIdentifier>
							<xsl:choose>
								<xsl:when test="./BIBK">
									<xsl:value-of select="normalize-space(./BIBK)" />
								</xsl:when>
								<xsl:when test="./NCUN">
									<xsl:value-of select="normalize-space(./NCUN)" />
								</xsl:when>
							</xsl:choose>
						</arco-cd:bibliographyICCDIdentifier>
					</xsl:if>
					<xsl:if
						test="../BIL and (not(starts-with(lower-case(normalize-space(../BIL)), 'nr')) and not(starts-with(lower-case(normalize-space(../BIL)), 'n.r')))
					or
					(./BIBM and (not(starts-with(lower-case(normalize-space(./BIBM)), 'nr')) and not(starts-with(lower-case(normalize-space(./BIBM)), 'n.r'))))">
						<arco-cd:completeBibliographicReference>
							<xsl:choose>
								<xsl:when test="./BIBM">
									<xsl:value-of select="normalize-space(./BIBM)" />
								</xsl:when>
								<xsl:when test="../BIL">
									<xsl:value-of select="normalize-space(../BIL)" />
								</xsl:when>
							</xsl:choose>
						</arco-cd:completeBibliographicReference>
					</xsl:if>
					<xsl:if
						test="./BIBR and (not(starts-with(lower-case(normalize-space(./BIBR)), 'nr')) and not(starts-with(lower-case(normalize-space(./BIBR)), 'n.r')))">
						<arco-cd:abbreviation>
							<xsl:value-of select="normalize-space(./BIBR)" />
						</arco-cd:abbreviation>
					</xsl:if>
					<xsl:if
						test="./BIBY and (not(starts-with(lower-case(normalize-space(./BIBY)), 'nr')) and not(starts-with(lower-case(normalize-space(./BIBY)), 'n.r')))">
						<arco-cd:rights>
							<xsl:value-of select="normalize-space(./BIBY)" />
						</arco-cd:rights>
					</xsl:if>
					<xsl:if test="./BIBN or ./BIBI">
						<arco-core:note>
							<xsl:choose>
								<xsl:when test="./BIBI">
									<xsl:value-of
										select="concat(normalize-space(./BIBM), normalize-space(./BIBI))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="normalize-space(./BIBN)" />
								</xsl:otherwise>
							</xsl:choose>
						</arco-core:note>
					</xsl:if>
					<xsl:if test="./BIBW">
						<smapit:URL>
							<xsl:value-of select="normalize-space(./BIBW)" />
						</smapit:URL>
					</xsl:if>
					<xsl:if
						test="./BIBJ and (not(starts-with(lower-case(normalize-space(./BIBJ)), 'nr')) and not(starts-with(lower-case(normalize-space(./BIBJ)), 'n.r')))">
						<arco-cd:hasAuthorityFileCataloguingAgency>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./BIBJ))" />
            				</xsl:attribute>
						</arco-cd:hasAuthorityFileCataloguingAgency>
					</xsl:if>
					<xsl:if
						test="./BIBX and not(lower-case(normalize-space(./BIBX))='nr' or lower-case(normalize-space(./BIBX))='n.r.' or lower-case(normalize-space(./BIBX))='nr (recupero pregresso)')">
						<arco-core:hasCategory>
							<xsl:attribute name="rdf:resource">
                                <xsl:choose>
                                    <xsl:when
								test="lower-case(normalize-space(./BIBX))='bibliografia di corredo'">
                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/AccompanyingBibliography'" />
                                    </xsl:when>
                                    <xsl:when
								test="lower-case(normalize-space(./BIBX))='bibliografia di confronto'">
                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/ComparativeBibliography'" />
                                    </xsl:when>
                                    <xsl:when
								test="lower-case(normalize-space(./BIBX))='bibliografia specifica'">
                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/SpecificBibliography'" />
                                    </xsl:when>
                                    <xsl:when test="./BIBX">
                                        <xsl:value-of
								select="concat($NS, 'BibliographyCategory/', arco-fn:urify(normalize-space(./BIBX)))" />
                                    </xsl:when>
                                </xsl:choose>
                            </xsl:attribute>
						</arco-core:hasCategory>
					</xsl:if>
					<xsl:if
						test="./BIBF and (not(starts-with(lower-case(normalize-space(./BIBF)), 'nr')) and not(starts-with(lower-case(normalize-space(./BIBF)), 'n.r')))">
						<arco-cd:hasBibliographyType>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'BibliographyType/', arco-fn:urify(normalize-space(./BIBF)))" />
            				</xsl:attribute>
						</arco-cd:hasBibliographyType>
					</xsl:if>
				</rdf:Description>
				<!-- bibliography category as an individual -->
				<xsl:if
					test="./BIBX and not(lower-case(normalize-space(./BIBX))='nr' or lower-case(normalize-space(./BIBX))='n.r.' or lower-case(normalize-space(./BIBX))='nr (recupero pregresso)')">
					<xsl:choose>
						<xsl:when
							test="lower-case(normalize-space(./BIBX))='bibliografia di corredo'" />
						<xsl:when
							test="lower-case(normalize-space(./BIBX))='bibliografia di confronto'" />
						<xsl:when
							test="lower-case(normalize-space(./BIBX))='bibliografia specifica'" />
						<xsl:when test="./BIBX">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                    <xsl:value-of
									select="concat($NS, 'BibliographyCategory/', arco-fn:urify(normalize-space(./BIBX)))" />
                                </xsl:attribute>
								<rdf:type
									rdf:resource="https://w3id.org/arco/ontology/context-description/BibliographyCategory" />
								<rdfs:label>
									<xsl:value-of select="normalize-space(./BIBX)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./BIBX)" />
								</l0:name>
							</rdf:Description>
						</xsl:when>
					</xsl:choose>
				</xsl:if>
				<!-- bibliography cataloguing agent as an individual -->
				<xsl:if
					test="./BIBJ and (not(starts-with(lower-case(normalize-space(./BIBJ)), 'nr')) and not(starts-with(lower-case(normalize-space(./BIBJ)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                				<xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(./BIBJ))" />
                			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
								select="'https://w3id.org/italia/onto/COV/Organization'" />
                        		</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./BIBJ)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./BIBJ)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- bibliography type as an individual -->
				<xsl:if
					test="./BIBF and (not(starts-with(lower-case(normalize-space(./BIBF)), 'nr')) and not(starts-with(lower-case(normalize-space(./BIBF)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            				<xsl:value-of
							select="concat($NS, 'BibliographyType/', arco-fn:urify(normalize-space(./BIBF)))" />
            			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/BibliographyType'" />
            				</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./BIBF)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./BIBF)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- Legal situation of cultural property as an individual -->
			<xsl:if test="record/metadata/schede/*/TU/CDG">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                		<xsl:value-of
						select="concat($NS, 'LegalSituation/', $itemURI, '-legal-situation-', arco-fn:urify(normalize-space(record/metadata/schede/*/TU/CDG/CDGG)))" />
                	</xsl:attribute>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Condizione giuridica del bene culturale ', $itemURI, ': ', normalize-space(record/metadata/schede/*/TU/CDG/CDGG))" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Condizione giuridica del bene culturale ', $itemURI, ': ', normalize-space(record/metadata/schede/*/TU/CDG/CDGG))" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Legal situation of cultural property ', $itemURI, ': ', normalize-space(record/metadata/schede/*/TU/CDG/CDGG))" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Legal situation of cultural property ', $itemURI, ': ', normalize-space(record/metadata/schede/*/TU/CDG/CDGG))" />
					</l0:name>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
						<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/LegalSituation'" />
						</xsl:attribute>
					</rdf:type>
					<xsl:if test="record/metadata/schede/*/TU/CDG/CDGN">
						<arco-core:note>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/TU/CDG/CDGN)" />
						</arco-core:note>
					</xsl:if>
					<xsl:for-each
						select="record/metadata/schede/*/TU/CDG/CDGS">
						<xsl:if
							test=". and (not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r')))">
							<arco-cd:hasOwner>
								<xsl:attribute name="rdf:resource">
		            				<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
		            			</xsl:attribute>
							</arco-cd:hasOwner>
						</xsl:if>
					</xsl:for-each>
				</rdf:Description>
				<xsl:for-each
					select="record/metadata/schede/*/TU/CDG/CDGS">
					<xsl:if
						test=". and (not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		            			<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
		            		</xsl:attribute>
							<rdfs:label>
								<xsl:value-of select="normalize-space(.)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(.)" />
							</l0:name>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
								<xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
								</xsl:attribute>
							</rdf:type>
							<xsl:if test="../CDGI ">
								<arco-cd:address>
									<xsl:value-of select="normalize-space(../CDGI)" />
								</arco-cd:address>
							</xsl:if>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- Export import certification of cultural property as an individual -->
			<xsl:for-each select="record/metadata/schede/*/TU/ESP">
				<xsl:variable name="exp-position">
					<xsl:value-of select="position()" />
				</xsl:variable>
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                		<xsl:value-of
						select="concat($NS, 'ExportImportCertification/', $itemURI, '-export-import-certification-', position())" />
                	</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
						<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/ExportImportCertification'" />
						</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="it">
						<xsl:choose>
							<xsl:when test="./ESPT">
								<xsl:value-of
									select="concat(normalize-space(./ESPT), ' ', position(), ' del bene culturale ', $itemURI)" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of
									select="concat('Certificazione ', position(), ' per la circolazione del bene culturale ', $itemURI)" />
							</xsl:otherwise>
						</xsl:choose>
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:choose>
							<xsl:when
								test="./ESPT and (not(starts-with(lower-case(normalize-space(./ESPT)), 'nr')) and not(starts-with(lower-case(normalize-space(./ESPT)), 'n.r')))">
								<xsl:value-of
									select="concat(normalize-space(./ESPT), ' ', position(), ' del bene culturale ', $itemURI)" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of
									select="concat('Certificazione ', position(), ' per la circolazione del bene culturale ', $itemURI)" />
							</xsl:otherwise>
						</xsl:choose>
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Certification ', position(), ' for import and export of cultural property ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Certification ', position(), ' for import and export of cultural property ', $itemURI)" />
					</l0:name>
					<xsl:if
						test="./ESPD and (not(starts-with(lower-case(normalize-space(./ESPD)), 'nr')) and not(starts-with(lower-case(normalize-space(./ESPD)), 'n.r')))">
						<arco-cd:issueDate>
							<xsl:value-of select="normalize-space(./ESPD)" />
						</arco-cd:issueDate>
					</xsl:if>
					<xsl:if test="./ESPN">
						<arco-core:note>
							<xsl:value-of select="normalize-space(./ESPN)" />
						</arco-core:note>
					</xsl:if>
					<xsl:if test="./ESPT">
						<arco-cd:hasExportImportCertificationType>
							<xsl:attribute name="rdf:resource">
	                				<xsl:if
								test="./ESPT and not(./ESPT='.' or ./ESPT='-' or ./ESPT='/') and (not(starts-with(lower-case(normalize-space(./ESPT)), 'nr')) and not(starts-with(lower-case(normalize-space(./ESPT)), 'n.r')))">
	                                <xsl:choose>
	                                    <xsl:when
								test="lower-case(normalize-space(./ESPT))='attestato di libera circolazione' or lower-case(normalize-space(./ESPT))='attestato libera circolazione'">
	                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/FreeMovementCertification'" />
	                                    </xsl:when>
	                                    <xsl:when
								test="lower-case(normalize-space(./ESPT))='attestato di circolazione temporanea' or lower-case(normalize-space(./ESPT))='attestato circolazione temporanea'">
	                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/TemporaryMovementCertification'" />
	                                    </xsl:when>
	                                    <xsl:when
								test="lower-case(normalize-space(./ESPT))='licenza di esportazione definitiva' or lower-case(normalize-space(./ESPT))='licenza esportazione definitiva'">
	                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/PermanentExportLicense'" />
	                                    </xsl:when>
	                                    <xsl:when
								test="lower-case(normalize-space(./ESPT))='licenza di esportazione temporanea' or lower-case(normalize-space(./ESPT))='licenza esportazione temporanea'">
	                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/TemporaryExportLicense'" />
	                                    </xsl:when>
	                                    <xsl:when
								test="lower-case(normalize-space(./ESPT))='certificato di avvenuta spedizione' or lower-case(normalize-space(./ESPT))='certificato avvenuta spedizione'">
	                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/DeliveryConfirmationCertification'" />
	                                    </xsl:when>
	                                    <xsl:when
								test="lower-case(normalize-space(./ESPT))='certificato di avvenuta importazione' or lower-case(normalize-space(./ESPT))='certificato avvenuta importazione'">
	                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/ImportConfirmationCertification'" />
	                                    </xsl:when>
	                                    <xsl:when test="./ESPT">
	                                        <xsl:value-of
								select="concat($NS, 'ExportImportCertificationType/', arco-fn:urify(normalize-space(./ESPT)))" />
	                                    </xsl:when>
	                                </xsl:choose>
                    			</xsl:if>
	                			</xsl:attribute>
						</arco-cd:hasExportImportCertificationType>
					</xsl:if>
					<xsl:if
						test="./ESPU and (not(starts-with(lower-case(normalize-space(./ESPU)), 'nr')) and not(starts-with(lower-case(normalize-space(./ESPU)), 'n.r')))">
						<arco-cd:hasExportOffice>
							<xsl:attribute name="rdf:resource">
	                				<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./ESPU))" />
	                			</xsl:attribute>
						</arco-cd:hasExportOffice>
						<arco-core:hasAgentRole>
							<xsl:attribute name="rdf:resource">
							<xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-export-import-certification-', $exp-position, '-export-office')" />
						</xsl:attribute>
						</arco-core:hasAgentRole>
					</xsl:if>
				</rdf:Description>
				<!-- export import certification type as an individual -->
				<xsl:if test="./ESPT">
					<xsl:choose>
						<xsl:when
							test="lower-case(normalize-space(./ESPT))='attestato di libera circolazione' or lower-case(normalize-space(./ESPT))='attestato libera circolazione'" />
						<xsl:when
							test="lower-case(normalize-space(./ESPT))='attestato di circolazione temporanea' or lower-case(normalize-space(./ESPT))='attestato circolazione temporanea'" />
						<xsl:when
							test="lower-case(normalize-space(./ESPT))='licenza di esportazione definitiva' or lower-case(normalize-space(./ESPT))='licenza esportazione definitiva'" />
						<xsl:when
							test="lower-case(normalize-space(./ESPT))='licenza di esportazione temporanea' or lower-case(normalize-space(./ESPT))='licenza esportazione temporanea'" />
						<xsl:when
							test="lower-case(normalize-space(./ESPT))='certificato di avvenuta spedizione' or lower-case(normalize-space(./ESPT))='certificato avvenuta spedizione'" />
						<xsl:when
							test="lower-case(normalize-space(./ESPT))='certificato di avvenuta importazione' or lower-case(normalize-space(./ESPT))='certificato avvenuta importazione'" />
						<xsl:when
							test="./ESPT and not(./ESPT='.' or ./ESPT='-' or ./ESPT='/') and (not(starts-with(lower-case(normalize-space(./ESPT)), 'nr')) and not(starts-with(lower-case(normalize-space(./ESPT)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                    <xsl:value-of
									select="concat($NS, 'ExportImportCertificationType/', arco-fn:urify(normalize-space(./ESPT)))" />
                                </xsl:attribute>
								<rdf:type
									rdf:resource="https://w3id.org/arco/ontology/context-description/ExportImportCertificationType" />
								<rdfs:label>
									<xsl:value-of select="normalize-space(./ESPT)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./ESPT)" />
								</l0:name>
							</rdf:Description>
						</xsl:when>
					</xsl:choose>
				</xsl:if>
				<!-- agent role of export import certification as an individual -->
				<xsl:if
					test="./ESPU and (not(starts-with(lower-case(normalize-space(./ESPU)), 'nr')) and not(starts-with(lower-case(normalize-space(./ESPU)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
		                        		<xsl:value-of
							select="concat($NS, 'AgentRole/', $itemURI, '-export-import-certification-', $exp-position, '-export-office')" />
		                    		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/arco/ontology/core/AgentRole'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Ufficio Esportazione della certificazione ', $exp-position, ' del bene culturale ', $itemURI, ': ', normalize-space(./ESPU))" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Export Office of certification ', $exp-position, ' of cultural property ', $itemURI, ': ', normalize-space(./ESPU))" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Ufficio Esportazione della certificazione ', $exp-position, ' del bene culturale ', $itemURI, ': ', normalize-space(./ESPU))" />
						</l0:name>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Export Office of certification ', $exp-position, ' of cultural property ', $itemURI, ': ', normalize-space(./ESPU))" />
						</l0:name>
						<arco-core:hasRole>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'Role/ExportOffice')" />
				                        </xsl:attribute>
						</arco-core:hasRole>
						<arco-core:hasAgent>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./ESPU))" />
				                        </xsl:attribute>
						</arco-core:hasAgent>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
				                        <xsl:value-of
							select="concat($NS, 'Role/ExportOffice')" />
				                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/italia/onto/RO/Role'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of select="'Ufficio Esportazione'" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of select="'Export Office'" />
						</rdfs:label>
						<arco-core:isRoleOf>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-export-import-certification-', $exp-position, '-export-office')" />
				                        </xsl:attribute>
						</arco-core:isRoleOf>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
				                        <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(./ESPU))" />
				                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Agent'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./ESPU)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./ESPU)" />
						</l0:name>
						<arco-core:isAgentOf>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-export-import-certification-', $exp-position, '-export-office')" />
				                        </xsl:attribute>
						</arco-core:isAgentOf>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- Protective measures of cultural property as an individual -->
			<xsl:for-each select="record/metadata/schede/*/TU/NVC">
				<xsl:variable name="measure-position">
					<xsl:value-of select="position()" />
				</xsl:variable>
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                			<xsl:value-of
						select="concat($NS, 'ProtectiveMeasure/', $itemURI, '-protective-measure-', position())" />
                		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
						<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/ProtectiveMeasure'" />
					</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Protective measure ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./NVCT))" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Protective measure ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./NVCT))" />
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Provvedimento di tutela ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(./NVCT))" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Provvedimento di tutela ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(./NVCT))" />
					</l0:name>
					<xsl:if
						test="./NVCE and (not(starts-with(lower-case(normalize-space(./NVCE)), 'nr')) and not(starts-with(lower-case(normalize-space(./NVCE)), 'n.r')))">
						<arco-cd:issueDate>
							<xsl:value-of select="normalize-space(./NVCE)" />
						</arco-cd:issueDate>
					</xsl:if>
					<xsl:if
						test="./NVCR and (not(starts-with(lower-case(normalize-space(./NVCR)), 'nr')) and not(starts-with(lower-case(normalize-space(./NVCR)), 'n.r')))">
						<arco-cd:registrationDateOrGU>
							<xsl:value-of select="normalize-space(./NVCR)" />
						</arco-cd:registrationDateOrGU>
					</xsl:if>
					<xsl:if
						test="./NVCI and (not(starts-with(lower-case(normalize-space(./NVCI)), 'nr')) and not(starts-with(lower-case(normalize-space(./NVCI)), 'n.r')))">
						<arco-cd:openingNoticeDate>
							<xsl:value-of select="normalize-space(./NVCI)" />
						</arco-cd:openingNoticeDate>
					</xsl:if>
					<xsl:if
						test="./NVCD and (not(starts-with(lower-case(normalize-space(./NVCD)), 'nr')) and not(starts-with(lower-case(normalize-space(./NVCD)), 'n.r')))">
						<arco-cd:noticeDate>
							<xsl:value-of select="normalize-space(./NVCD)" />
						</arco-cd:noticeDate>
					</xsl:if>
					<xsl:if
						test="./NVCW and (not(starts-with(lower-case(normalize-space(./NVCW)), 'nr')) and not(starts-with(lower-case(normalize-space(./NVCW)), 'n.r')))">
						<smapit:URL>
							<xsl:value-of select="normalize-space(./NVCW)" />
						</smapit:URL>
					</xsl:if>
					<xsl:if test="./NVCN">
						<arco-core:note>
							<xsl:value-of select="normalize-space(./NVCN)" />
						</arco-core:note>
					</xsl:if>
					<xsl:if
						test="./NVCA and (not(starts-with(lower-case(normalize-space(./NVCA)), 'nr')) and not(starts-with(lower-case(normalize-space(./NVCA)), 'n.r')))">
						<arco-cd:hasProponentAgency>
							<xsl:attribute name="rdf:resource">
	                				<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./NVCA))" />
	                			</xsl:attribute>
						</arco-cd:hasProponentAgency>
						<arco-core:hasAgentRole>
							<xsl:attribute name="rdf:resource">
							<xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-protective-meausure-', $measure-position, '-proponent-agency')" />
						</xsl:attribute>
						</arco-core:hasAgentRole>
					</xsl:if>
				</rdf:Description>
				<!-- agent role for protective measure as an individual -->
				<xsl:if
					test="./NVCA and (not(starts-with(lower-case(normalize-space(./NVCA)), 'nr')) and not(starts-with(lower-case(normalize-space(./NVCA)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
		                        		<xsl:value-of
							select="concat($NS, 'AgentRole/', $itemURI, '-protective-meausure-', $measure-position, '-proponent-agency')" />
		                    		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/arco/ontology/core/AgentRole'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Ente proponente del provvedimento di tutela ', $measure-position, ' del bene culturale ', $itemURI, ': ', normalize-space(./NVCA))" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Proponent agency of protective measure ', $measure-position, ' of cultural property ', $itemURI, ': ', normalize-space(./NVCA))" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Ente proponente del provvedimento di tutela ', $measure-position, ' del bene culturale ', $itemURI, ': ', normalize-space(./NVCA))" />
						</l0:name>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Proponent agency of protective measure ', $measure-position, ' of cultural property ', $itemURI, ': ', normalize-space(./NVCA))" />
						</l0:name>
						<arco-core:hasRole>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'Role/ProponentAgency')" />
				                        </xsl:attribute>
						</arco-core:hasRole>
						<arco-core:hasAgent>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./NVCA))" />
				                        </xsl:attribute>
						</arco-core:hasAgent>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
				                        <xsl:value-of
							select="concat($NS, 'Role/ProponentAgency')" />
				                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/italia/onto/RO/Role'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of select="'Ente proponente'" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of select="'Proponent Agency'" />
						</rdfs:label>
						<arco-core:isRoleOf>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-protective-meausure-', $measure-position, '-proponent-agency')" />
				                        </xsl:attribute>
						</arco-core:isRoleOf>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
				                        <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(./NVCA))" />
				                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/italia/onto/COV/Organization'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./NVCA)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./NVCA)" />
						</l0:name>
						<arco-core:isAgentOf>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-protective-meausure-', $measure-position, '-proponent-agency')" />
				                        </xsl:attribute>
						</arco-core:isAgentOf>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- Protective Measure for A 2.00 -->
			<xsl:for-each select="record/metadata/schede/*/TU/VIN">
				<xsl:variable name="measure-position">
					<xsl:value-of select="position()" />
				</xsl:variable>
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                			<xsl:value-of
						select="concat($NS, 'ProtectiveMeasure/', $itemURI, '-protective-measure-', position())" />
                		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
						<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/ProtectiveMeasure'" />
					</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:choose>
							<xsl:when test="./VINL and ./VINA">
								<xsl:value-of
									select="concat('Protective measure ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./VINL), ' ', normalize-space(./VINA))" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of
									select="concat('Protective measure ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./VINL), normalize-space(./VINA))" />
							</xsl:otherwise>
						</xsl:choose>
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:choose>
							<xsl:when test="./VINL and ./VINA">
								<xsl:value-of
									select="concat('Protective measure ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./VINL), ' ', normalize-space(./VINA))" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of
									select="concat('Protective measure ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./VINL), normalize-space(./VINA))" />
							</xsl:otherwise>
						</xsl:choose>
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:choose>
							<xsl:when test="./VINL and ./VINA">
								<xsl:value-of
									select="concat('Provvedimento di tutela ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(./VINL), ' ', normalize-space(./VINA))" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of
									select="concat('Provvedimento di tutela ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(./VINL), normalize-space(./VINA))" />
							</xsl:otherwise>
						</xsl:choose>
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:choose>
							<xsl:when test="./VINL and ./VINA">
								<xsl:value-of
									select="concat('Provvedimento di tutela ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(./VINL), ' ', normalize-space(./VINA))" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of
									select="concat('Provvedimento di tutela ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(./VINL), normalize-space(./VINA))" />
							</xsl:otherwise>
						</xsl:choose>
					</l0:name>
					<xsl:if
						test="./VIND and (not(starts-with(lower-case(normalize-space(./VIND)), 'nr')) and not(starts-with(lower-case(normalize-space(./VIND)), 'n.r')))">
						<arco-cd:issueDate>
							<xsl:value-of select="normalize-space(./VIND)" />
						</arco-cd:issueDate>
					</xsl:if>
					<xsl:if
						test="./VINR and (not(starts-with(lower-case(normalize-space(./VINR)), 'nr')) and not(starts-with(lower-case(normalize-space(./VINR)), 'n.r')))">
						<arco-cd:registrationDateOrGU>
							<xsl:value-of select="normalize-space(./VINR)" />
						</arco-cd:registrationDateOrGU>
					</xsl:if>
				</rdf:Description>
			</xsl:for-each>
			<!-- Urban planning instrument of culturale property as an individual -->
			<xsl:for-each select="record/metadata/schede/*/TU/STU">
				<xsl:variable name="upinstrument-position">
					<xsl:value-of select="position()" />
				</xsl:variable>
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                			<xsl:value-of
						select="concat($NS, 'UrbanPlanningInstrument/', $itemURI, '-urban-planning-instrument-', position())" />
                		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
						<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/UrbanPlanningInstrument'" />
					</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Urban planning instrument ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./STUT))" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Urban planning instrument ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./STUT))" />
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Strumento urbanistico-territoriale ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(./STUT))" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Strumento urbanistico-territoriale ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(./STUT))" />
					</l0:name>
					<xsl:if
						test="./STUW and (not(starts-with(lower-case(normalize-space(./STUW)), 'nr')) and not(starts-with(lower-case(normalize-space(./STUW)), 'n.r')))">
						<smapit:URL>
							<xsl:value-of select="normalize-space(./STUW)" />
						</smapit:URL>
					</xsl:if>
					<xsl:if test="./STUS">
						<arco-core:note>
							<xsl:value-of select="normalize-space(./STUS)" />
						</arco-core:note>
					</xsl:if>
					<xsl:if
						test="./STUE and (not(starts-with(lower-case(normalize-space(./STUE)), 'nr')) and not(starts-with(lower-case(normalize-space(./STUE)), 'n.r')))">
						<arco-cd:hasIssuingAgency>
							<xsl:attribute name="rdf:resource">
	                				<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./STUE))" />
	                			</xsl:attribute>
						</arco-cd:hasIssuingAgency>
						<arco-core:hasAgentRole>
							<xsl:attribute name="rdf:resource">
							<xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-urban-planning-instrument-', $upinstrument-position, '-issuing-agency')" />
						</xsl:attribute>
						</arco-core:hasAgentRole>
					</xsl:if>
					<xsl:if
						test="./STUN and (not(starts-with(lower-case(normalize-space(./STUN)), 'nr')) and not(starts-with(lower-case(normalize-space(./STUN)), 'n.r')))">
						<arco-cd:hasEligibleIntervention>
							<xsl:attribute name="rdf:resource">
	                				<xsl:value-of
								select="concat($NS, 'EligibleIntervention/', arco-fn:urify(normalize-space(./STUN)))" />
	                			</xsl:attribute>
						</arco-cd:hasEligibleIntervention>
					</xsl:if>
				</rdf:Description>
				<!-- agent role for urban planning instrument as an individual -->
				<xsl:if
					test="./STUE and (not(starts-with(lower-case(normalize-space(./STUE)), 'nr')) and not(starts-with(lower-case(normalize-space(./STUE)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
		                        		<xsl:value-of
							select="concat($NS, 'AgentRole/', $itemURI, '-urban-planning-instrument-', $upinstrument-position, '-issuing-agency')" />
		                    		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/arco/ontology/core/AgentRole'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Ente che ha emanato il provvedimento ', $upinstrument-position, ' del bene culturale ', $itemURI, ': ', normalize-space(./STUE))" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Issuing agency of urban planning instrument ', $upinstrument-position, ' of cultural property ', $itemURI, ': ', normalize-space(./STUE))" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Ente che ha emanato il provvedimento ', $upinstrument-position, ' del bene culturale ', $itemURI, ': ', normalize-space(./STUE))" />
						</l0:name>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Issuing agency of urban planning instrument ', $upinstrument-position, ' of cultural property ', $itemURI, ': ', normalize-space(./STUE))" />
						</l0:name>
						<arco-core:hasRole>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'Role/IssuingAgency')" />
				                        </xsl:attribute>
						</arco-core:hasRole>
						<arco-core:hasAgent>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./STUE))" />
				                        </xsl:attribute>
						</arco-core:hasAgent>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
				                        <xsl:value-of
							select="concat($NS, 'Role/IssuingAgency')" />
				                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/italia/onto/RO/Role'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="'Ente che ha emanato il provvedimento'" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of select="'Issuing Agency'" />
						</rdfs:label>
						<arco-core:isRoleOf>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-urban-planning-instrument-', $upinstrument-position, '-issuing-agency')" />
				                        </xsl:attribute>
						</arco-core:isRoleOf>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
				                        <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(./STUE))" />
				                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="'https://w3id.org/italia/onto/COV/Organization'" />
				                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./STUE)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./STUE)" />
						</l0:name>
						<arco-core:isAgentOf>
							<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-urban-planning-instrument-', $upinstrument-position, '-issuing-agency')" />
				                        </xsl:attribute>
						</arco-core:isAgentOf>
					</rdf:Description>
				</xsl:if>
				<!-- eligible intervention of u.p.instrument as an individual -->
				<xsl:if
					test="./STUN and (not(starts-with(lower-case(normalize-space(./STUN)), 'nr')) and not(starts-with(lower-case(normalize-space(./STUN)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
			                			<xsl:value-of
							select="concat($NS, 'EligibleIntervention/', arco-fn:urify(normalize-space(./STUN)))" />
									</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
							<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/EligibleIntervention'" />
						</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./STUN)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./STUN)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- Other related agents of cultural property as an individual -->
			<xsl:for-each select="record/metadata/schede/*/AU/NMC">
				<xsl:if
					test="not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AU/NMC/NMCN)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AU/NMC/NMCN)), 'n.r'))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                			<xsl:choose>
                				<xsl:when test="./NMCA">
                					<xsl:value-of
							select="concat($NS, 'Agent/', $itemURI, '-', arco-fn:arcofy(concat(./NMCN, '-', ./NMCA)))" />
                				</xsl:when>
                				<xsl:otherwise>
                					<xsl:value-of
							select="concat($NS, 'Agent/', $itemURI, '-', arco-fn:arcofy(./NMCN))" />
                				</xsl:otherwise>
                			</xsl:choose>
                		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            				<xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Agent'" />
            			</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Related agent ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./NMCN))" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Related agent ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./NMCN))" />
						</l0:name>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Agente correlato ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(./NMCN))" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Agente correlato ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(./NMCN))" />
						</l0:name>
						<xsl:if
							test="./NMCA and (not(starts-with(lower-case(normalize-space(./NMCA)), 'nr')) and not(starts-with(lower-case(normalize-space(./NMCA)), 'n.r')))">
							<arco-cd:agentDate>
								<xsl:value-of select="normalize-space(./NMCA)" />
							</arco-cd:agentDate>
						</xsl:if>
						<xsl:if test="./NMCY">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./NMCY)" />
							</arco-core:note>
						</xsl:if>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- Surveys -->
			<!-- observation survey -->
			<xsl:if
				test="record/metadata/schede/BDM/DR/DRV/* and not($sheetVersion='4.00') and not($sheetVersion='4.00_ICCD0')">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                			<xsl:value-of
						select="concat($NS, 'ObservationSurvey/', $itemURI)" />
                		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                			<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/ObservationSurvey'" />
                		</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Observation survey of cultural property ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Observation survey of cultural property ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Indagine di rilevamento del bene culturale ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Indagine di rilevamento del bene culturale ', $itemURI)" />
					</l0:name>
					<xsl:if
						test="record/metadata/schede/BDM/DR/DRV/DRVD and not(record/metadata/schede/BDM/DR/DRV/DRVD='0000/00/00' or record/metadata/schede/BDM/DR/DRV/DRVD='/')">
						<tiapit:time>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/BDM/DR/DRV/DRVD)" />
						</tiapit:time>
					</xsl:if>
					<xsl:if
						test="record/metadata/schede/BDM/DR/DRV/DRVE and (not(starts-with(lower-case(normalize-space(record/metadata/schede/BDM/DR/DRV/DRVE)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/BDM/DR/DRV/DRVE)), 'n.r')))">
						<arco-cd:hasActivityResponsible>
							<xsl:attribute name="rdf:resource">
	                				<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(record/metadata/schede/BDM/DR/DRV/DRVE))" />
	                			</xsl:attribute>
						</arco-cd:hasActivityResponsible>
						<arco-core:hasAgentRole>
							<xsl:attribute name="rdf:resource">
							<xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-observation-survey-activity-responsible')" />
							</xsl:attribute>
						</arco-core:hasAgentRole>
					</xsl:if>
					<xsl:if test="record/metadata/schede/BDM/DR/DRV/DRVR">
						<arco-cd:isRelatedToResearch>
							<xsl:attribute name="rdf:resource">
								<xsl:value-of
								select="concat($NS, 'Research/', $itemURI)" />
							</xsl:attribute>
						</arco-cd:isRelatedToResearch>
					</xsl:if>
				</rdf:Description>
				<xsl:if
					test="record/metadata/schede/BDM/DR/DRV/DRVE and (not(starts-with(lower-case(normalize-space(record/metadata/schede/BDM/DR/DRV/DRVE)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/BDM/DR/DRV/DRVE)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
			                        		<xsl:value-of
							select="concat($NS, 'AgentRole/', $itemURI, '-observation-survey-activity-responsible')" />
			                    		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
								select="'https://w3id.org/arco/ontology/core/AgentRole'" />
					                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Ente responsabile del rilevamento del bene culturale ', $itemURI, ': ', normalize-space(record/metadata/schede/BDM/DR/DRV/DRVE))" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Ente responsabile del rilevamento del bene culturale ', $itemURI, ': ', normalize-space(record/metadata/schede/BDM/DR/DRV/DRVE))" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Responsible agency of obervation of cultural property ', $itemURI, ': ', normalize-space(record/metadata/schede/BDM/DR/DRV/DRVE))" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Responsible agency of observation of cultural property ', $itemURI, ': ', normalize-space(record/metadata/schede/BDM/DR/DRV/DRVE))" />
						</l0:name>
						<arco-core:hasRole>
							<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
								select="concat($NS, 'Role/ActivityResponsible')" />
					                        </xsl:attribute>
						</arco-core:hasRole>
						<arco-core:hasAgent>
							<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(record/metadata/schede/BDM/DR/DRV/DRVE))" />
					                        </xsl:attribute>
						</arco-core:hasAgent>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
					                        <xsl:value-of
							select="concat($NS, 'Role/ActivityResponsible')" />
					                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
								select="'https://w3id.org/italia/onto/RO/Role'" />
					                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of select="'Responsabile dell''attività'" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of select="'Activity Responsible'" />
						</rdfs:label>
						<arco-core:isRoleOf>
							<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-observation-survey-activity-responsible')" />
					                        </xsl:attribute>
						</arco-core:isRoleOf>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
					                        <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(record/metadata/schede/BDM/DR/DRV/DRVE))" />
					                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Agent'" />
					                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/BDM/DR/DRV/DRVE)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/BDM/DR/DRV/DRVE)" />
						</l0:name>
						<arco-core:isAgentOf>
							<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-observation-survey-activity-responsible')" />
					                        </xsl:attribute>
						</arco-core:isAgentOf>
					</rdf:Description>
				</xsl:if>
				<xsl:if test="record/metadata/schede/BDM/DR/DRV/DRVR">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
									<xsl:value-of
							select="concat($NS, 'Research/', $itemURI)" />
								</xsl:attribute>
						<rdf:type
							rdf:resource="https://w3id.org/arco/ontology/context-description/Research" />
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Research on cultural property ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Research on cultural property ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Ricerca sul bene culturale ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Ricerca sul bene culturale ', $itemURI)" />
						</l0:name>
						<arco-cd:hasResearchScientificDirector>
							<xsl:attribute name="rdf:resource">
		                				<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(record/metadata/schede/BDM/DR/DRV/DRVR))" />
		                			</xsl:attribute>
						</arco-cd:hasResearchScientificDirector>
						<arco-core:hasAgentRole>
							<xsl:attribute name="rdf:resource">
								<xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-research-scientific-director')" />
								</xsl:attribute>
						</arco-core:hasAgentRole>
					</rdf:Description>
					<xsl:if
						test="record/metadata/schede/BDM/DR/DRV/DRVR and (not(starts-with(lower-case(normalize-space(record/metadata/schede/BDM/DR/DRV/DRVR)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/BDM/DR/DRV/DRVR)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
			                        		<xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-research-scientific-director')" />
			                    		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/core/AgentRole'" />
					                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Agente responsabile scientifico della ricerca sul bene culturale ', $itemURI, ': ', normalize-space(record/metadata/schede/BDM/DR/DRV/DRVR))" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Agente responsabile scientifico della ricerca sul bene culturale ', $itemURI, ': ', normalize-space(record/metadata/schede/BDM/DR/DRV/DRVR))" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Responsible agent of research on cultural property ', $itemURI, ': ', normalize-space(record/metadata/schede/BDM/DR/DRV/DRVR))" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Responsible agent of research on cultural property ', $itemURI, ': ', normalize-space(record/metadata/schede/BDM/DR/DRV/DRVR))" />
							</l0:name>
							<arco-core:hasRole>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="concat($NS, 'Role/ResearchScientificResponsible')" />
					                        </xsl:attribute>
							</arco-core:hasRole>
							<arco-core:hasAgent>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(record/metadata/schede/BDM/DR/DRV/DRVR))" />
					                        </xsl:attribute>
							</arco-core:hasAgent>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
					                        <xsl:value-of
								select="concat($NS, 'Role/ResearchScientificResponsible')" />
					                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/Role'" />
					                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="'Responsabile scientifico della ricerca'" />
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="'Research scientific Responsible'" />
							</rdfs:label>
							<arco-core:isRoleOf>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-research-scientific-director')" />
					                        </xsl:attribute>
							</arco-core:isRoleOf>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
					                        <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(record/metadata/schede/BDM/DR/DRV/DRVR))" />
					                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
					                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of
									select="normalize-space(record/metadata/schede/BDM/DR/DRV/DRVR)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of
									select="normalize-space(record/metadata/schede/BDM/DR/DRV/DRVR)" />
							</l0:name>
							<arco-core:isAgentOf>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-research-scientific-director')" />
					                        </xsl:attribute>
							</arco-core:isAgentOf>
						</rdf:Description>
					</xsl:if>
				</xsl:if>
			</xsl:if>
			<!-- Archaeometric and diagnostic survey -->
			<xsl:if
				test="not(record/metadata/schede/*/RE/AIN/AIND='0000/00/00' or record/metadata/schede/*/RE/AIN/AIND='/') and record/metadata/schede/*/RE/AIN/*">
				<xsl:for-each select="record/metadata/schede/*/RE/AIN">
					<xsl:variable name="survey-position">
						<xsl:value-of select="position()" />
					</xsl:variable>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                			<xsl:value-of
							select="concat($NS, 'ArchaeometricDiagnosticSurvey/', $itemURI, '-survey-', position())" />
                		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                			<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/ArchaeometricDiagnosticSurvey'" />
                		</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Archaeometric and diagnostic survey of cultural property ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Archaeometric and diagnostic survey of cultural property ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Indagine archeometrica e diagnostica del bene culturale ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Indagine archeometrica e diagnostica del bene culturale ', $itemURI)" />
						</l0:name>
						<xsl:if
							test="./AIND and (not(starts-with(lower-case(normalize-space(./AIND)), 'nr')) and not(starts-with(lower-case(normalize-space(./AIND)), 'n.r')))">
							<tiapit:time>
								<xsl:value-of select="normalize-space(./AIND)" />
							</tiapit:time>
						</xsl:if>
						<xsl:if test="./AINT">
							<arco-cd:hasArchaeometricDiagnosticSurveyType>
								<xsl:attribute name="rdf:resource">
                					<xsl:value-of
									select="concat($NS, 'ArchaeometricDiagnosticSurveyType/', arco-fn:urify(normalize-space(./AINT)))" />
                				</xsl:attribute>
							</arco-cd:hasArchaeometricDiagnosticSurveyType>
						</xsl:if>
						<xsl:if test="./AINS">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./AINS)" />
							</arco-core:note>
						</xsl:if>
						<xsl:if test="./AINR">
							<arco-cd:hasActivityOperator>
								<xsl:attribute name="rdf:resource">
		                				<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(./AINR))" />
		                			</xsl:attribute>
							</arco-cd:hasActivityOperator>
						</xsl:if>
					</rdf:Description>
					<xsl:if test="./AINT">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                					<xsl:value-of
								select="concat($NS, 'ArchaeometricDiagnosticSurveyType/', arco-fn:urify(normalize-space(./AINT)))" />
                				</xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/context-description/ArchaeometricDiagnosticSurveyType" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(./AINT)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./AINT)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- activiy operator as an individual -->
					<xsl:if test="./AINR">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
							                        <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./AINR))" />
							                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
							                            <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
							            </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./AINR)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./AINR)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- Archaeological field survey of cultural property -->
			<xsl:if
				test="not(record/metadata/schede/*/RE/RCG/RCGD='0000/00/00' or record/metadata/schede/*/RE/RCG/RCGD='/') and record/metadata/schede/*/RE/RCG/*">
				<xsl:for-each select="record/metadata/schede/*/RE/RCG">
					<xsl:variable name="survey-position">
						<xsl:value-of select="position()" />
					</xsl:variable>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                			<xsl:value-of
							select="concat($NS, 'ArchaeologicalFieldSurvey/', $itemURI, '-survey-', position())" />
                		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                			<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/ArchaeologicalFieldSurvey'" />
                		</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:choose>
								<xsl:when
									test="./RCGV and (not(starts-with(lower-case(normalize-space(./RCGV)), 'nr')) and not(starts-with(lower-case(normalize-space(./RCGV)), 'n.r')))">
									<xsl:value-of
										select="concat('Ricognizione archeologica ', position(), ' sul bene ', $itemURI, ': ', normalize-space(./RCGV))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat('Ricognizione archeologica ' , position(), ' sul bene ', $itemURI)" />
								</xsl:otherwise>
							</xsl:choose>
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:choose>
								<xsl:when
									test="./RCGV and (not(starts-with(lower-case(normalize-space(./RCGV)), 'nr')) and not(starts-with(lower-case(normalize-space(./RCGV)), 'n.r')))">
									<xsl:value-of
										select="concat('Ricognizione archeologica ', position(), ' sul bene ', $itemURI, ': ', normalize-space(./RCGV))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat('Ricognizione archeologica ' , position(), ' sul bene ', $itemURI)" />
								</xsl:otherwise>
							</xsl:choose>
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:choose>
								<xsl:when
									test="./RCGV and (not(starts-with(lower-case(normalize-space(./RCGV)), 'nr')) and not(starts-with(lower-case(normalize-space(./RCGV)), 'n.r')))">
									<xsl:value-of
										select="concat('Archaeological field survey ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./RCGV))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat('Archaeological field survey ' , position(), ' of cultural property ', $itemURI)" />
								</xsl:otherwise>
							</xsl:choose>
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:choose>
								<xsl:when
									test="./RCGV and (not(starts-with(lower-case(normalize-space(./RCGV)), 'nr')) and not(starts-with(lower-case(normalize-space(./RCGV)), 'n.r')))">
									<xsl:value-of
										select="concat('Ricognizione archeologica ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./RCGV))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat('Ricognizione archeologica ' , position(), ' of cultural property ', $itemURI)" />
								</xsl:otherwise>
							</xsl:choose>
						</l0:name>
						<xsl:if test="./RCGZ">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./RCGZ)" />
							</arco-core:note>
						</xsl:if>
						<xsl:if
							test="./RCGD and (not(starts-with(lower-case(normalize-space(./RCGD)), 'nr')) and not(starts-with(lower-case(normalize-space(./RCGD)), 'n.r')))">
							<tiapit:time>
								<xsl:value-of select="normalize-space(./RCGD)" />
							</tiapit:time>
						</xsl:if>
						<xsl:if
							test="./RCGK and (not(starts-with(lower-case(normalize-space(./RCGK)), 'nr')) and not(starts-with(lower-case(normalize-space(./RCGK)), 'n.r')))">
							<arco-cd:archeologicalFieldSurveyICCDIdentifier>
								<xsl:value-of select="normalize-space(./RCGK)" />
							</arco-cd:archeologicalFieldSurveyICCDIdentifier>
						</xsl:if>
						<xsl:if
							test="./NCUN and (not(starts-with(lower-case(normalize-space(./NCUN)), 'nr')) and not(starts-with(lower-case(normalize-space(./NCUN)), 'n.r')))">
							<arco-cd:archeologicalFieldSurveyICCDIdentifier>
								<xsl:value-of select="normalize-space(./NCUN)" />
							</arco-cd:archeologicalFieldSurveyICCDIdentifier>
						</xsl:if>
						<xsl:if
							test="./RCGH and (not(starts-with(lower-case(normalize-space(./RCGH)), 'nr')) and not(starts-with(lower-case(normalize-space(./RCGH)), 'n.r')))">
							<arco-cd:archeologicalFielSurveyLocalIdentifier>
								<xsl:value-of select="normalize-space(./RCGH)" />
							</arco-cd:archeologicalFielSurveyLocalIdentifier>
						</xsl:if>
						<xsl:if test="./RCGU or ./RCGT or ./RCGC">
							<arco-cd:environmentalState>
								<xsl:choose>
									<xsl:when test="./RCGT">
										<xsl:value-of select="normalize-space(./RCGT)" />
									</xsl:when>
									<xsl:when test="./RCGU and ./RCGC">
										<xsl:value-of
											select="concat(normalize-space(./RCGU), ' - ', normalize-space(./RCGC))" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="concat(normalize-space(./RCGC), normalize-space(./RCGU))" />
									</xsl:otherwise>
								</xsl:choose>
							</arco-cd:environmentalState>
						</xsl:if>
						<xsl:if
							test="./RCGS and (not(starts-with(lower-case(normalize-space(./RCGS)), 'nr')) and not(starts-with(lower-case(normalize-space(./RCGS)), 'n.r')))">
							<arco-cd:hasBibliography>
								<xsl:attribute name="rdf:resource">
	                			<xsl:value-of
									select="concat($NS, 'Bibliography/', $itemURI, '-archaeological-field-survey-bibliography-', position())" />
	                		</xsl:attribute>
							</arco-cd:hasBibliography>
						</xsl:if>
						<xsl:if
							test="./RCGM and (not(starts-with(lower-case(normalize-space(./RCGM)), 'nr')) and not(starts-with(lower-case(normalize-space(./RCGM)), 'n.r')))">
							<arco-cd:hasSurveyMethod>
								<xsl:attribute name="rdf:resource">
	                			<xsl:value-of
									select="concat($NS, 'SurveyMethod/', arco-fn:urify(normalize-space(./RCGM)))" />
	                		</xsl:attribute>
							</arco-cd:hasSurveyMethod>
						</xsl:if>
						<xsl:if
							test="./RCGA and (not(starts-with(lower-case(normalize-space(./RCGA)), 'nr')) and not(starts-with(lower-case(normalize-space(./RCGA)), 'n.r')))">
							<xsl:for-each select="RCGA">
								<arco-cd:hasSurveyScientificDirector>
									<xsl:attribute name="rdf:resource">
	                				<xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                			</xsl:attribute>
								</arco-cd:hasSurveyScientificDirector>
								<arco-core:hasAgentRole>
									<xsl:attribute name="rdf:resource">
									<xsl:value-of
										select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-field-survey-', $survey-position, '-scientific-director-',arco-fn:arcofy(.))" />
								</xsl:attribute>
								</arco-core:hasAgentRole>
							</xsl:for-each>
						</xsl:if>
						<xsl:if
							test="./RCGR and (not(starts-with(lower-case(normalize-space(./RCGR)), 'nr')) and not(starts-with(lower-case(normalize-space(./RCGR)), 'n.r')))">
							<arco-cd:hasActivityResponsible>
								<xsl:attribute name="rdf:resource">
	                				<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(./RCGR))" />
	                			</xsl:attribute>
							</arco-cd:hasActivityResponsible>
							<arco-core:hasAgentRole>
								<xsl:attribute name="rdf:resource">
							<xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-field-survey-', $survey-position, '-activity-responsible')" />
							</xsl:attribute>
							</arco-core:hasAgentRole>
						</xsl:if>
						<xsl:if
							test="./RCGJ and (not(starts-with(lower-case(normalize-space(./RCGJ)), 'nr')) and not(starts-with(lower-case(normalize-space(./RCGJ)), 'n.r')))">
							<arco-cd:hasAuthorityFileCataloguingAgency>
								<xsl:attribute name="rdf:resource">
	                				<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(./RCGJ))" />
	                			</xsl:attribute>
							</arco-cd:hasAuthorityFileCataloguingAgency>
							<arco-core:hasAgentRole>
								<xsl:attribute name="rdf:resource">
							<xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-field-survey-', $survey-position, '-cataloguing-agency')" />
							</xsl:attribute>
							</arco-core:hasAgentRole>
						</xsl:if>
					</rdf:Description>
					<!-- bibliography of survey as an individual -->
					<xsl:if
						test="./RCGS and (not(starts-with(lower-case(normalize-space(./RCGS)), 'nr')) and not(starts-with(lower-case(normalize-space(./RCGS)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                			<xsl:value-of
								select="concat($NS, 'Bibliography/', $itemURI, '-archaeological-field-survey-bibliography-', position())" />
	                		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
	                				<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/Bibliography'" />
	                			</xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Bibliografia relativa alla ricognizione archeologica sul bene ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Bibliografia relativa alla ricognizione archeologica sul bene ', $itemURI)" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Bibliography about archaeological field survey of cultural property ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Bibliography about archaeological field survey of cultural property ', $itemURI)" />
							</l0:name>
							<arco-cd:completeBibliographicReference>
								<xsl:value-of select="normalize-space(./RCGS)" />
							</arco-cd:completeBibliographicReference>
						</rdf:Description>
					</xsl:if>
					<!-- method of survey as an individual -->
					<xsl:if
						test="./RCGM and (not(starts-with(lower-case(normalize-space(./RCGM)), 'nr')) and not(starts-with(lower-case(normalize-space(./RCGM)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                			<xsl:value-of
								select="concat($NS, 'SurveyMethod/', arco-fn:urify(normalize-space(./RCGM)))" />
	                		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/SurveyMethod'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./RCGM)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./RCGM)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- agent role of survey scientific director as an individual -->
					<xsl:if
						test="./RCGA and (not(starts-with(lower-case(normalize-space(./RCGA)), 'nr')) and not(starts-with(lower-case(normalize-space(./RCGA)), 'n.r')))">

						<xsl:for-each select="./RCGA">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
			                        		<xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-field-survey-', $survey-position, '-scientific-director-', arco-fn:arcofy(.))" />
			                    		</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
										select="'https://w3id.org/arco/ontology/core/AgentRole'" />
					                        </xsl:attribute>
								</rdf:type>
								<rdfs:label xml:lang="it">
									<xsl:value-of
										select="concat('Responsabile scientifico della ricognizione archeologica ', $survey-position, ' del bene culturale ', $itemURI, ': ', normalize-space(.))" />
								</rdfs:label>
								<l0:name xml:lang="it">
									<xsl:value-of
										select="concat('Responsabile scientifico della ricognizione archeologica ', $survey-position, ' del bene culturale ', $itemURI, ': ', normalize-space(.))" />
								</l0:name>
								<rdfs:label xml:lang="en">
									<xsl:value-of
										select="concat('Scientific director of archaeological field survey ', $survey-position, ' of cultural property ', $itemURI, ': ', normalize-space(.))" />
								</rdfs:label>
								<l0:name xml:lang="en">
									<xsl:value-of
										select="concat('Scientific director of archaeological field survey ', $survey-position, ' of cultural property ', $itemURI, ': ', normalize-space(.))" />
								</l0:name>
								<arco-core:hasRole>
									<xsl:attribute name="rdf:resource">
									<xsl:value-of
										select="concat($NS, 'Role/ScientificDirector')" />
								</xsl:attribute>
								</arco-core:hasRole>
								<arco-core:hasAgent>
									<xsl:attribute name="rdf:resource">
									<xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
								</xsl:attribute>
								</arco-core:hasAgent>
							</rdf:Description>
							<rdf:Description>
								<xsl:attribute name="rdf:about">
					                        <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
					                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
										select="'https://w3id.org/italia/onto/l0/Agent'" />
					                        </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(.)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(.)" />
								</l0:name>
								<arco-core:isAgentOf>
									<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
										select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-field-survey-', $survey-position, '-scientific-director-',arco-fn:arcofy(.))" />
					                        </xsl:attribute>
								</arco-core:isAgentOf>
							</rdf:Description>
							<rdf:Description>
								<xsl:attribute name="rdf:about">
					                        <xsl:value-of
									select="concat($NS, 'Role/ScientificDirector')" />
					                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
										select="'https://w3id.org/italia/onto/RO/Role'" />
					                        </xsl:attribute>
								</rdf:type>
								<rdfs:label xml:lang="it">
									<xsl:value-of select="'Responsabile Scientifico'" />
								</rdfs:label>
								<rdfs:label xml:lang="en">
									<xsl:value-of select="'Scientific Director'" />
								</rdfs:label>
								<arco-core:isRoleOf>
									<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
										select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-field-survey-', $survey-position, '-scientific-director-',arco-fn:arcofy(.))" />
					                        </xsl:attribute>
								</arco-core:isRoleOf>
							</rdf:Description>
						</xsl:for-each>




					</xsl:if>
					<!-- agent role of activity responsible as an individual -->
					<xsl:if
						test="./RCGR and (not(starts-with(lower-case(normalize-space(./RCGR)), 'nr')) and not(starts-with(lower-case(normalize-space(./RCGR)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
			                        		<xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-field-survey-', $survey-position, '-activity-responsible')" />
			                    		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/core/AgentRole'" />
					                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Ente responsabile della ricognizione archeologica ', $survey-position, ' del bene culturale ', $itemURI, ': ', normalize-space(./RCGR))" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Ente responsabile della ricognizione archeologica ', $survey-position, ' del bene culturale ', $itemURI, ': ', normalize-space(./RCGR))" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Responsible agency of archaeological field survey ', $survey-position, ' of cultural property ', $itemURI, ': ', normalize-space(./RCGR))" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Responsible agency of archaeological field survey ', $survey-position, ' of cultural property ', $itemURI, ': ', normalize-space(./RCGR))" />
							</l0:name>
							<arco-core:hasRole>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="concat($NS, 'Role/ActivityResponsible')" />
					                        </xsl:attribute>
							</arco-core:hasRole>
							<arco-core:hasAgent>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(./RCGR))" />
					                        </xsl:attribute>
							</arco-core:hasAgent>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
					                        <xsl:value-of
								select="concat($NS, 'Role/ActivityResponsible')" />
					                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/Role'" />
					                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="'Responsabile dell''attività'" />
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:value-of select="'Activity Responsible'" />
							</rdfs:label>
							<arco-core:isRoleOf>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-field-survey-', $survey-position, '-activity-responsible')" />
					                        </xsl:attribute>
							</arco-core:isRoleOf>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
					                        <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./RCGR))" />
					                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
					                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./RCGR)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./RCGR)" />
							</l0:name>
							<arco-core:isAgentOf>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-field-survey-', $survey-position, '-activity-responsible')" />
					                        </xsl:attribute>
							</arco-core:isAgentOf>
						</rdf:Description>
					</xsl:if>
					<!-- agent role of authority file cataloguing agency as an individual -->
					<xsl:if
						test="./RCGJ and (not(starts-with(lower-case(normalize-space(./RCGJ)), 'nr')) and not(starts-with(lower-case(normalize-space(./RCGJ)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
			                        		<xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-field-survey-', $survey-position, '-cataloguing-agency')" />
			                    		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/core/AgentRole'" />
					                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Ente schedatore dell''Authority File della ricognizione archeologica ', $survey-position, ' del bene culturale ', $itemURI, ': ', normalize-space(./RCGJ))" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Ente schedatore dell''Authority File della ricognizione archeologica ', $survey-position, ' del bene culturale ', $itemURI, ': ', normalize-space(./RCGJ))" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Authority File cataloguing agency of archaeological field survey ', $survey-position, ' of cultural property ', $itemURI, ': ', normalize-space(./RCGJ))" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Authority File cataloguing agency of archaeological field survey ', $survey-position, ' of cultural property ', $itemURI, ': ', normalize-space(./RCGJ))" />
							</l0:name>
							<arco-core:hasRole>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="concat($NS, 'Role/AuthorityFileCataloguingAgency')" />
					                        </xsl:attribute>
							</arco-core:hasRole>
							<arco-core:hasAgent>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(./RCGJ))" />
					                        </xsl:attribute>
							</arco-core:hasAgent>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
					                        <xsl:value-of
								select="concat($NS, 'Role/AuthorityFileCataloguingAgency')" />
					                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/Role'" />
					                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="'Ente Schedatore dell''Authority File'" />
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="'Authority File Cataloguing Agency'" />
							</rdfs:label>
							<arco-core:isRoleOf>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-field-survey-', $survey-position, '-cataloguing-agency')" />
					                        </xsl:attribute>
							</arco-core:isRoleOf>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
					                        <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./RCGJ))" />
					                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="'https://w3id.org/italia/onto/COV/Organization'" />
					                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./RCGJ)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./RCGJ)" />
							</l0:name>
							<arco-core:isAgentOf>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-field-survey-', $survey-position, '-cataloguing-agency')" />
					                        </xsl:attribute>
							</arco-core:isAgentOf>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- Archaeological excavation of cultural property -->
			<xsl:if
				test="not(record/metadata/schede/*/*/DSC/DSCD='0000/00/00' or record/metadata/schede/*/*/DSC/DSCD='/') and record/metadata/schede/*/*/DSC/*">
				<xsl:for-each select="record/metadata/schede/*/*/DSC">
					<xsl:variable name="survey-position">
						<xsl:value-of select="position()" />
					</xsl:variable>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                			<xsl:value-of
							select="concat($NS, 'ArchaeologicalExcavation/', $itemURI, '-survey-', position())" />
                		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                			<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/ArchaeologicalExcavation'" />
                		</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:choose>
								<xsl:when test="./DSCV">
									<xsl:value-of
										select="concat('Scavo archeologico ', position(), ' del bene ', $itemURI, ': ', normalize-space(./DSCV))" />
								</xsl:when>
								<xsl:when test="./SCAN">
									<xsl:value-of
										select="concat('Scavo archeologico ', position(), ' del bene ', $itemURI, ': ', normalize-space(./SCAN))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat('Scavo archeologico ' , position(), ' del bene ', $itemURI)" />
								</xsl:otherwise>
							</xsl:choose>
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:choose>
								<xsl:when test="./DSCV">
									<xsl:value-of
										select="concat('Scavo archeologico ', position(), ' del bene ', $itemURI, ': ', normalize-space(./DSCV))" />
								</xsl:when>
								<xsl:when test="./SCAN">
									<xsl:value-of
										select="concat('Scavo archeologico ', position(), ' del bene ', $itemURI, ': ', normalize-space(./SCAN))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat('Scavo archeologico ' , position(), ' del bene ', $itemURI)" />
								</xsl:otherwise>
							</xsl:choose>
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:choose>
								<xsl:when test="./DSCV">
									<xsl:value-of
										select="concat('Archaeological excavation ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./DSCV))" />
								</xsl:when>
								<xsl:when test="./SCAN">
									<xsl:value-of
										select="concat('Archaeological excavation ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./SCAN))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat('Archaeological excavation ' , position(), ' of cultural property ', $itemURI)" />
								</xsl:otherwise>
							</xsl:choose>
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:choose>
								<xsl:when test="./DSCV">
									<xsl:value-of
										select="concat('Archaeological excavation ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./DSCV))" />
								</xsl:when>
								<xsl:when test="./SCAN">
									<xsl:value-of
										select="concat('Archaeological excavation ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./SCAN))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat('Archaeological excavation ' , position(), ' of cultural property ', $itemURI)" />
								</xsl:otherwise>
							</xsl:choose>
						</l0:name>
						<xsl:if test="./DSCN">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./DSCN)" />
							</arco-core:note>
						</xsl:if>
						<xsl:if
							test="./DSCD and (not(starts-with(lower-case(normalize-space(./DSCD)), 'nr')) and not(starts-with(lower-case(normalize-space(./DSCD)), 'n.r')))">
							<tiapit:time>
								<xsl:value-of select="normalize-space(./DSCD)" />
							</tiapit:time>
						</xsl:if>
						<xsl:if
							test="./DSCK and (not(starts-with(lower-case(normalize-space(./DSCK)), 'nr')) and not(starts-with(lower-case(normalize-space(./DSCK)), 'n.r')))">
							<arco-cd:archeologicalExcavationICCDIdentifier>
								<xsl:value-of select="normalize-space(./DSCK)" />
							</arco-cd:archeologicalExcavationICCDIdentifier>
						</xsl:if>
						<xsl:if
							test="./NCUN and (not(starts-with(lower-case(normalize-space(./NCUN)), 'nr')) and not(starts-with(lower-case(normalize-space(./NCUN)), 'n.r')))">
							<arco-cd:archeologicalExcavationICCDIdentifier>
								<xsl:value-of select="normalize-space(./NCUN)" />
							</arco-cd:archeologicalExcavationICCDIdentifier>
						</xsl:if>
						<xsl:if
							test="./DSCH and (not(starts-with(lower-case(normalize-space(./DSCH)), 'nr')) and not(starts-with(lower-case(normalize-space(./DSCH)), 'n.r')))">
							<arco-cd:archeologicalExcavationLocalIdentifier>
								<xsl:value-of select="normalize-space(./DSCH)" />
							</arco-cd:archeologicalExcavationLocalIdentifier>
						</xsl:if>
						<xsl:if
							test="./DSCQ and (not(starts-with(lower-case(normalize-space(./DSCQ)), 'nr')) and not(starts-with(lower-case(normalize-space(./DSCQ)), 'n.r')))">
							<arco-cd:areaRoomSquare>
								<xsl:value-of select="normalize-space(./DSCQ)" />
							</arco-cd:areaRoomSquare>
						</xsl:if>
						<xsl:if
							test="./DSCZ and (not(starts-with(lower-case(normalize-space(./DSCZ)), 'nr')) and not(starts-with(lower-case(normalize-space(./DSCZ)), 'n.r')))">
							<arco-cd:hasBibliography>
								<xsl:attribute name="rdf:resource">
	                			<xsl:value-of
									select="concat($NS, 'Bibliography/', $itemURI, '-archaeological-excavation-bibliography')" />
	                		</xsl:attribute>
							</arco-cd:hasBibliography>
						</xsl:if>
						<!-- bibliography in RA 2.00 -->
						<xsl:if
							test="./DSCB and (not(starts-with(lower-case(normalize-space(./DSCB)), 'nr')) and not(starts-with(lower-case(normalize-space(./DSCB)), 'n.r')))">
							<arco-cd:hasBibliography>
								<xsl:attribute name="rdf:resource">
	                			<xsl:value-of
									select="concat($NS, 'Bibliography/', $itemURI, '-archaeological-excavation-bibliography')" />
	                		</xsl:attribute>
							</arco-cd:hasBibliography>
						</xsl:if>
						<xsl:if
							test="./DSCI and (not(starts-with(lower-case(normalize-space(./DSCI)), 'nr')) and not(starts-with(lower-case(normalize-space(./DSCI)), 'n.r')))">
							<arco-cd:hasInventory>
								<xsl:attribute name="rdf:resource">
	                			<xsl:value-of
									select="concat($NS, 'Inventory/', $itemURI, '-archaeological-excavation-inventory')" />
	                		</xsl:attribute>
							</arco-cd:hasInventory>
						</xsl:if>
						<xsl:if
							test="./DSCM and (not(starts-with(lower-case(normalize-space(./DSCM)), 'nr')) and not(starts-with(lower-case(normalize-space(./DSCM)), 'n.r')))">
							<arco-cd:hasSurveyMethod>
								<xsl:attribute name="rdf:resource">
	                			<xsl:value-of
									select="concat($NS, 'SurveyMethod/', arco-fn:urify(normalize-space(./DSCM)))" />
	                		</xsl:attribute>
							</arco-cd:hasSurveyMethod>
						</xsl:if>
						<xsl:if
							test="./DSCT and (not(starts-with(lower-case(normalize-space(./DSCT)), 'nr')) and not(starts-with(lower-case(normalize-space(./DSCT)), 'n.r')))">
							<arco-cd:hasSurveyMotivation>
								<xsl:attribute name="rdf:resource">
	                			<xsl:value-of
									select="concat($NS, 'SurveyMotivation/', arco-fn:urify(normalize-space(./DSCT)))" />
	                		</xsl:attribute>
							</arco-cd:hasSurveyMotivation>
						</xsl:if>
						<xsl:if
							test="./DSCU and (not(starts-with(lower-case(normalize-space(./DSCU)), 'nr')) and not(starts-with(lower-case(normalize-space(./DSCU)), 'n.r')))">
							<arco-cd:hasStratigraphicUnit>
								<xsl:attribute name="rdf:resource">
	                			<xsl:value-of
									select="concat($NS, 'StratigraphicUnit/', arco-fn:urify(normalize-space(./DSCU)))" />
	                		</xsl:attribute>
							</arco-cd:hasStratigraphicUnit>
						</xsl:if>
						<xsl:if
							test="./DSCS and (not(starts-with(lower-case(normalize-space(./DSCS)), 'nr')) and not(starts-with(lower-case(normalize-space(./DSCS)), 'n.r')))">
							<arco-cd:hasTomb>
								<xsl:attribute name="rdf:resource">
	                			<xsl:value-of
									select="concat($NS, 'Tomb/', arco-fn:urify(normalize-space(./DSCS)))" />
	                		</xsl:attribute>
							</arco-cd:hasTomb>
						</xsl:if>
						<xsl:for-each select="./DSCA">
							<xsl:if
								test=". and (not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r')))">
								<arco-cd:hasSurveyScientificDirector>
									<xsl:attribute name="rdf:resource">
		                				<xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
		                			</xsl:attribute>
								</arco-cd:hasSurveyScientificDirector>
								<arco-core:hasAgentRole>
									<xsl:attribute name="rdf:resource">
								<xsl:value-of
										select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-excavation-', $survey-position, '-scientific-director')" />
								</xsl:attribute>
								</arco-core:hasAgentRole>
							</xsl:if>
						</xsl:for-each>
						<xsl:for-each select="./DSCF">
							<xsl:if
								test=". and (not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r')))">
								<arco-cd:hasActivityResponsible>
									<xsl:attribute name="rdf:resource">
		                				<xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
		                			</xsl:attribute>
								</arco-cd:hasActivityResponsible>
								<arco-core:hasAgentRole>
									<xsl:attribute name="rdf:resource">
								<xsl:value-of
										select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-excavation-', $survey-position, '-activity-responsible')" />
							</xsl:attribute>
								</arco-core:hasAgentRole>
							</xsl:if>
						</xsl:for-each>
						<xsl:for-each select="./DSCJ">
							<xsl:if
								test=". and (not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r')))">
								<arco-cd:hasAuthorityFileCataloguingAgency>
									<xsl:attribute name="rdf:resource">
		                				<xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
		                			</xsl:attribute>
								</arco-cd:hasAuthorityFileCataloguingAgency>
								<arco-core:hasAgentRole>
									<xsl:attribute name="rdf:resource">
								<xsl:value-of
										select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-excavation-', $survey-position, '-cataloguing-agency')" />
							
							</xsl:attribute>
								</arco-core:hasAgentRole>
							</xsl:if>
						</xsl:for-each>
					</rdf:Description>
					<!-- bibliography of survey as an individual -->
					<xsl:if
						test="./DSCZ and (not(starts-with(lower-case(normalize-space(./DSCZ)), 'nr')) and not(starts-with(lower-case(normalize-space(./DSCZ)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                			<xsl:value-of
								select="concat($NS, 'Bibliography/', $itemURI, '-archaeological-excavation-bibliography')" />
	                		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
	                				<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/Bibliography'" />
	                			</xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Bibliografia relativa allo scavo archeologico del bene ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Bibliografia relativa allo scavo archeologico del bene ', $itemURI)" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Bibliography about archaeological excavation of cultural property ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Bibliography about archaeological excavation of cultural property ', $itemURI)" />
							</l0:name>
							<arco-cd:completeBibliographicReference>
								<xsl:value-of select="normalize-space(./DSCZ)" />
							</arco-cd:completeBibliographicReference>
						</rdf:Description>
					</xsl:if>
					<!-- bibliography of survey as an individual (RA 2.00) -->
					<xsl:if
						test="./DSCB and (not(starts-with(lower-case(normalize-space(./DSCB)), 'nr')) and not(starts-with(lower-case(normalize-space(./DSCB)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                			<xsl:value-of
								select="concat($NS, 'Bibliography/', $itemURI, '-archaeological-excavation-bibliography')" />
	                		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
	                				<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/Bibliography'" />
	                			</xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Bibliografia relativa allo scavo archeologico del bene ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Bibliografia relativa allo scavo archeologico del bene ', $itemURI)" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Bibliography about archaeological excavation of cultural property ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Bibliography about archaeological excavation of cultural property ', $itemURI)" />
							</l0:name>
							<arco-cd:completeBibliographicReference>
								<xsl:value-of select="normalize-space(./DSCB)" />
							</arco-cd:completeBibliographicReference>
						</rdf:Description>
					</xsl:if>
					<!-- inventory of survey as an individual -->
					<xsl:if
						test="./DSCI and (not(starts-with(lower-case(normalize-space(./DSCI)), 'nr')) and not(starts-with(lower-case(normalize-space(./DSCI)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                			<xsl:value-of
								select="concat($NS, 'Inventory/', $itemURI, '-archaeological-excavation-inventory')" />
	                		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
	                				<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/Inventory'" />
	                			</xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Inventario relativo allo scavo archeologico del bene ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Inventario relativo allo scavo archeologico del bene ', $itemURI)" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Inventory about archaeological excavation of cultural property ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Inventory about archaeological excavation of cultural property ', $itemURI)" />
							</l0:name>
							<arco-cd:completeBibliographicReference>
								<xsl:value-of select="normalize-space(./DSCI)" />
							</arco-cd:completeBibliographicReference>
						</rdf:Description>
					</xsl:if>
					<!-- method of survey as an individual -->
					<xsl:if
						test="./DSCM and (not(starts-with(lower-case(normalize-space(./DSCM)), 'nr')) and not(starts-with(lower-case(normalize-space(./DSCM)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                			<xsl:value-of
								select="concat($NS, 'SurveyMethod/', arco-fn:urify(normalize-space(./DSCM)))" />
	                		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/SurveyMethod'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./DSCM)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./DSCM)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- motivation of survey as an individual -->
					<xsl:if
						test="./DSCT and (not(starts-with(lower-case(normalize-space(./DSCT)), 'nr')) and not(starts-with(lower-case(normalize-space(./DSCT)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                			<xsl:value-of
								select="concat($NS, 'SurveyMotivation/', arco-fn:urify(normalize-space(./DSCT)))" />
	                		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/SurveyMotivation'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./DSCT)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./DSCT)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- stratigraphic unit of survey as an individual -->
					<xsl:if
						test="./DSCU and (not(starts-with(lower-case(normalize-space(./DSCU)), 'nr')) and not(starts-with(lower-case(normalize-space(./DSCU)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                			<xsl:value-of
								select="concat($NS, 'StratigraphicUnit/', arco-fn:urify(normalize-space(./DSCU)))" />
	                		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/StratigraphicUnit'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./DSCU)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./DSCU)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- tomb of survey as an individual -->
					<xsl:if
						test="./DSCS and (not(starts-with(lower-case(normalize-space(./DSCS)), 'nr')) and not(starts-with(lower-case(normalize-space(./DSCS)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                			<xsl:value-of
								select="concat($NS, 'Tomb/', arco-fn:urify(normalize-space(./DSCS)))" />
	                		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/Tomb'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./DSCS)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./DSCS)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- agent role of survey scientific director as an individual -->
					<xsl:for-each select="./DSCA">
						<xsl:if
							test=". and (not(starts-with(lower-case(normalize-space(./DSCA)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
				                        		<xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-excavation-', $survey-position, '-scientific-director')" />
				                    		</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
										select="'https://w3id.org/arco/ontology/core/AgentRole'" />
						                        </xsl:attribute>
								</rdf:type>
								<rdfs:label xml:lang="it">
									<xsl:value-of
										select="concat('Responsabile scientifico dello scavo archeologico ', $survey-position, ' del bene culturale ', $itemURI, ': ', normalize-space(.))" />
								</rdfs:label>
								<l0:name xml:lang="it">
									<xsl:value-of
										select="concat('Responsabile scientifico dello scavo archeologico ', $survey-position, ' del bene culturale ', $itemURI, ': ', normalize-space(.))" />
								</l0:name>
								<rdfs:label xml:lang="en">
									<xsl:value-of
										select="concat('Scientific director of archaeological excavation ', $survey-position, ' of cultural property ', $itemURI, ': ', normalize-space(.))" />
								</rdfs:label>
								<l0:name xml:lang="en">
									<xsl:value-of
										select="concat('Scientific director of archaeological excavation ', $survey-position, ' of cultural property ', $itemURI, ': ', normalize-space(.))" />
								</l0:name>
								<arco-core:hasRole>
									<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
										select="concat($NS, 'Role/ScientificDirector')" />
						                        </xsl:attribute>
								</arco-core:hasRole>
								<arco-core:hasAgent>
									<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
						                        </xsl:attribute>
								</arco-core:hasAgent>
							</rdf:Description>
							<rdf:Description>
								<xsl:attribute name="rdf:about">
						                        <xsl:value-of
									select="concat($NS, 'Role/ScientificDirector')" />
						                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
										select="'https://w3id.org/italia/onto/RO/Role'" />
						                        </xsl:attribute>
								</rdf:type>
								<rdfs:label xml:lang="it">
									<xsl:value-of select="'Responsabile Scientifico'" />
								</rdfs:label>
								<rdfs:label xml:lang="en">
									<xsl:value-of select="'Scientific Director'" />
								</rdfs:label>
								<arco-core:isRoleOf>
									<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
										select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-excavation-', $survey-position, '-scientific-director')" />
						                        </xsl:attribute>
								</arco-core:isRoleOf>
							</rdf:Description>
							<rdf:Description>
								<xsl:attribute name="rdf:about">
						                        <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
						                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
										select="'https://w3id.org/italia/onto/l0/Agent'" />
						                        </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(.)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(.)" />
								</l0:name>
								<arco-core:isAgentOf>
									<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
										select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-excavation-', $survey-position, '-scientific-director')" />
						                        </xsl:attribute>
								</arco-core:isAgentOf>
							</rdf:Description>
						</xsl:if>
					</xsl:for-each>
					<!-- agent role of activity responsible as an individual -->
					<xsl:for-each select="./DSCF">
						<xsl:if
							test=". and (not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
				                        		<xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-excavation-', $survey-position, '-activity-responsible')" />
				                    		</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
										select="'https://w3id.org/arco/ontology/core/AgentRole'" />
						                        </xsl:attribute>
								</rdf:type>
								<rdfs:label xml:lang="it">
									<xsl:value-of
										select="concat('Ente responsabile dello scavo archeologico ', $survey-position, ' del bene culturale ', $itemURI, ': ', normalize-space(.))" />
								</rdfs:label>
								<l0:name xml:lang="it">
									<xsl:value-of
										select="concat('Ente responsabile dello scavo archeologico ', $survey-position, ' del bene culturale ', $itemURI, ': ', normalize-space(.))" />
								</l0:name>
								<rdfs:label xml:lang="en">
									<xsl:value-of
										select="concat('Responsible agency of archaeological excavation ', $survey-position, ' of cultural property ', $itemURI, ': ', normalize-space(.))" />
								</rdfs:label>
								<l0:name xml:lang="en">
									<xsl:value-of
										select="concat('Responsible agency of archaeological excavation ', $survey-position, ' of cultural property ', $itemURI, ': ', normalize-space(.))" />
								</l0:name>
								<arco-core:hasRole>
									<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
										select="concat($NS, 'Role/ActivityResponsible')" />
						                        </xsl:attribute>
								</arco-core:hasRole>
								<arco-core:hasAgent>
									<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
						                        </xsl:attribute>
								</arco-core:hasAgent>
							</rdf:Description>
							<rdf:Description>
								<xsl:attribute name="rdf:about">
						                        <xsl:value-of
									select="concat($NS, 'Role/ActivityResponsible')" />
						                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
										select="'https://w3id.org/italia/onto/RO/Role'" />
						                        </xsl:attribute>
								</rdf:type>
								<rdfs:label xml:lang="it">
									<xsl:value-of
										select="'Responsabile dell''attività'" />
								</rdfs:label>
								<rdfs:label xml:lang="en">
									<xsl:value-of select="'Activity Responsible'" />
								</rdfs:label>
								<arco-core:isRoleOf>
									<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
										select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-excavation-', $survey-position, '-activity-responsible')" />
						                        </xsl:attribute>
								</arco-core:isRoleOf>
							</rdf:Description>
							<rdf:Description>
								<xsl:attribute name="rdf:about">
						                        <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
						                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
										select="'https://w3id.org/italia/onto/l0/Agent'" />
						                        </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(.)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(.)" />
								</l0:name>
								<arco-core:isAgentOf>
									<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
										select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-excavation-', $survey-position, '-activity-responsible')" />
						                        </xsl:attribute>
								</arco-core:isAgentOf>
							</rdf:Description>
						</xsl:if>
					</xsl:for-each>
					<!-- agent role of authority file cataloguing agency as an individual -->
					<xsl:for-each select="./DSCJ">
						<xsl:if
							test=". and (not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
				                        		<xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-excavation-', $survey-position, '-cataloguing-agency')" />
				                    		</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
										select="'https://w3id.org/arco/ontology/core/AgentRole'" />
						                        </xsl:attribute>
								</rdf:type>
								<rdfs:label xml:lang="it">
									<xsl:value-of
										select="concat('Ente schedatore dell''Authority File dello scavo archeologico ', $survey-position, ' del bene culturale ', $itemURI, ': ', normalize-space(.))" />
								</rdfs:label>
								<l0:name xml:lang="it">
									<xsl:value-of
										select="concat('Ente schedatore dell''Authority File dello scavo archeologico ', $survey-position, ' del bene culturale ', $itemURI, ': ', normalize-space(.))" />
								</l0:name>
								<rdfs:label xml:lang="en">
									<xsl:value-of
										select="concat('Authority File cataloguing agency of archaeological excavation ', $survey-position, ' of cultural property ', $itemURI, ': ', normalize-space(.))" />
								</rdfs:label>
								<l0:name xml:lang="en">
									<xsl:value-of
										select="concat('Authority File cataloguing agency of archaeological excavation ', $survey-position, ' of cultural property ', $itemURI, ': ', normalize-space(.))" />
								</l0:name>
								<arco-core:hasRole>
									<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
										select="concat($NS, 'Role/AuthorityFileCataloguingAgency')" />
						                        </xsl:attribute>
								</arco-core:hasRole>
								<arco-core:hasAgent>
									<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
						                        </xsl:attribute>
								</arco-core:hasAgent>
							</rdf:Description>
							<rdf:Description>
								<xsl:attribute name="rdf:about">
						                        <xsl:value-of
									select="concat($NS, 'Role/AuthorityFileCataloguingAgency')" />
						                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
										select="'https://w3id.org/italia/onto/RO/Role'" />
						                        </xsl:attribute>
								</rdf:type>
								<rdfs:label xml:lang="it">
									<xsl:value-of
										select="'Ente Schedatore dell''Authority File'" />
								</rdfs:label>
								<rdfs:label xml:lang="en">
									<xsl:value-of
										select="'Authority File Cataloguing Agency'" />
								</rdfs:label>
								<arco-core:isRoleOf>
									<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
										select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-excavation-', $survey-position, '-cataloguing-agency')" />
						                        </xsl:attribute>
								</arco-core:isRoleOf>
							</rdf:Description>
							<rdf:Description>
								<xsl:attribute name="rdf:about">
						                        <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
						                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
										select="'https://w3id.org/italia/onto/COV/Organization'" />
						                        </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(.)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(.)" />
								</l0:name>
								<arco-core:isAgentOf>
									<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
										select="concat($NS, 'AgentRole/', $itemURI, '-archaeological-excavation-', $survey-position, '-cataloguing-agency')" />
						                        </xsl:attribute>
								</arco-core:isAgentOf>
							</rdf:Description>
						</xsl:if>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:if>
			<!-- Inspection of cultural property -->
			<xsl:if
				test="not(record/metadata/schede/*/CM/ISP/ISPD='0000/00/00' or record/metadata/schede/*/CM/ISP/ISPD='/') and record/metadata/schede/*/CM/ISP/*">
				<xsl:for-each select="record/metadata/schede/*/CM/ISP">
					<xsl:variable name="inspection-position">
						<xsl:value-of select="position()" />
					</xsl:variable>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                			<xsl:value-of
							select="concat($NS, 'Inspection/', $itemURI, '-inspection-', position())" />
                		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                				<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/Inspection'" />
                			</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Ispezione ' , position(), ' del bene ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Ispezione ' , position(), ' del bene ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Inspection ' , position(), ' of cultural property ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Inspection ' , position(), ' of cultural property ', $itemURI)" />
						</l0:name>
						<xsl:if test="./ISPS">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./DSCN)" />
							</arco-core:note>
						</xsl:if>
						<xsl:if
							test="./ISPD and (not(starts-with(lower-case(normalize-space(./ISPD)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISPD)), 'n.r')))">
							<tiapit:time>
								<xsl:value-of select="normalize-space(./ISPD)" />
							</tiapit:time>
						</xsl:if>
						<xsl:if
							test="./ISPN and (not(starts-with(lower-case(normalize-space(./ISPN)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISPN)), 'n.r')))">
							<arco-cd:hasActivityResponsible>
								<xsl:attribute name="rdf:resource">
	                				<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(./ISPN))" />
	                			</xsl:attribute>
							</arco-cd:hasActivityResponsible>
							<arco-core:hasAgentRole>
								<xsl:attribute name="rdf:resource">
							<xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-inspection-', $inspection-position, '-activity-responsible')" />
						</xsl:attribute>
							</arco-core:hasAgentRole>
						</xsl:if>
					</rdf:Description>
					<!-- agent role of activity responsible as an individual -->
					<xsl:if
						test="./ISPN and (not(starts-with(lower-case(normalize-space(./ISPN)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISPN)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
			                        		<xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-inspection-', $inspection-position, '-activity-responsible')" />
			                    		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/core/AgentRole'" />
					                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Ente responsabile dell''ispezione ', $inspection-position, ' del bene culturale ', $itemURI, ': ', normalize-space(./ISPN))" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Ente responsabile dell''ispezione ', $inspection-position, ' del bene culturale ', $itemURI, ': ', normalize-space(./ISPN))" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Responsible agency of inspection ', $inspection-position, ' of cultural property ', $itemURI, ': ', normalize-space(./ISPN))" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Responsible agency of inspection ', $inspection-position, ' of cultural property ', $itemURI, ': ', normalize-space(./ISPN))" />
							</l0:name>
							<arco-core:hasRole>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="concat($NS, 'Role/ActivityResponsible')" />
					                        </xsl:attribute>
							</arco-core:hasRole>
							<arco-core:hasAgent>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(./ISPN))" />
					                        </xsl:attribute>
							</arco-core:hasAgent>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
					                        <xsl:value-of
								select="concat($NS, 'Role/ActivityResponsible')" />
					                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/Role'" />
					                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="'Responsabile dell''attività'" />
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:value-of select="'Activity Responsible'" />
							</rdfs:label>
							<arco-core:isRoleOf>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-inspection-', $inspection-position, '-activity-responsible')" />
					                        </xsl:attribute>
							</arco-core:isRoleOf>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
					                        <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./ISPN))" />
					                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
					                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./ISPN)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./ISPN)" />
							</l0:name>
							<arco-core:isAgentOf>
								<xsl:attribute name="rdf:resource">
					                            <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-inspection-', $inspection-position, '-activity-responsible')" />
					                        </xsl:attribute>
							</arco-core:isAgentOf>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- affixed element (DA/STM) -->
			<xsl:if test="record/metadata/schede/*/DA/STM/*">
				<xsl:for-each select="record/metadata/schede/*/DA/STM">
					<rdf:Description>
						<xsl:choose>
							<xsl:when
								test="lower-case(normalize-space(./STMC))='timbro'">
								<xsl:attribute name="rdf:about">
									<xsl:value-of
									select="concat($NS, 'Stamp/', $itemURI, '-affixed-element-', position())" />
								</xsl:attribute>
							</xsl:when>
							<xsl:when
								test="lower-case(normalize-space(./STMC))='stemma'">
								<xsl:attribute name="rdf:about">
									<xsl:value-of
									select="concat($NS, 'CoatOfArms/', $itemURI, '-affixed-element-', position())" />
								</xsl:attribute>
							</xsl:when>
							<xsl:when
								test="lower-case(normalize-space(./STMC))='emblema'">
								<xsl:attribute name="rdf:about">
									<xsl:value-of
									select="concat($NS, 'Emblem/', $itemURI, '-affixed-element-', position())" />
								</xsl:attribute>
							</xsl:when>
							<xsl:when
								test="lower-case(normalize-space(./STMC))='marchio'">
								<xsl:attribute name="rdf:about">
									<xsl:value-of
									select="concat($NS, 'Brand/', $itemURI, '-affixed-element-', position())" />
								</xsl:attribute>
							</xsl:when>
							<xsl:when
								test="lower-case(normalize-space(./STMC))='logo'">
								<xsl:attribute name="rdf:about">
									<xsl:value-of
									select="concat($NS, 'Logo/', $itemURI, '-affixed-element-', position())" />
								</xsl:attribute>
							</xsl:when>
							<xsl:otherwise>
								<xsl:attribute name="rdf:about">
									<xsl:value-of
									select="concat($NS, 'AffixedElement/', $itemURI, '-affixed-element-', position())" />
								</xsl:attribute>
							</xsl:otherwise>
						</xsl:choose>
						<rdf:type>
							<xsl:choose>
								<xsl:when
									test="lower-case(normalize-space(./STMC))='timbro'">
									<xsl:attribute name="rdf:resource">
										<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/Stamp'" />
									</xsl:attribute>
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./STMC))='stemma'">
									<xsl:attribute name="rdf:resource">
										<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/CoatOfArms'" />
									</xsl:attribute>
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./STMC))='emblema'">
									<xsl:attribute name="rdf:resource">
										<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/Emblem'" />
									</xsl:attribute>
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./STMC))='marchio'">
									<xsl:attribute name="rdf:resource">
										<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/Brand'" />
									</xsl:attribute>
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./STMC))='logo'">
									<xsl:attribute name="rdf:resource">
										<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/Logo'" />
									</xsl:attribute>
								</xsl:when>
								<xsl:otherwise>
									<xsl:attribute name="rdf:resource">
										<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/AffixedElement'" />
									</xsl:attribute>
								</xsl:otherwise>
							</xsl:choose>
						</rdf:type>
						<rdfs:label xml:lang="en">
							<xsl:choose>
								<xsl:when
									test="lower-case(normalize-space(./STMC))='timbro'">
									<xsl:value-of
										select="concat('Element ', position(), ' affixed to cultural property ', $itemURI, ': stamp')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./STMC))='stemma'">
									<xsl:value-of
										select="concat('Element ', position(), ' affixed to cultural property ', $itemURI, ': coat of arms')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./STMC))='emblema'">
									<xsl:value-of
										select="concat('Element ', position(), ' affixed to cultural property ', $itemURI, ': emblem')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./STMC))='marchio'">
									<xsl:value-of
										select="concat('Element ', position(), ' affixed to cultural property ', $itemURI, ': brand')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./STMC))='logo'">
									<xsl:value-of
										select="concat('Element ', position(), ' affixed to cultural property ', $itemURI, ': logo')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat('Element ', position(), ' affixed to cultural property ', $itemURI, ': ', normalize-space(./STMC))" />
								</xsl:otherwise>
							</xsl:choose>
						</rdfs:label>
						<rdfs:label xml:lang="it">
							<xsl:choose>
								<xsl:when
									test="lower-case(normalize-space(./STMC))='timbro'">
									<xsl:value-of
										select="concat('Elemento ', position(), ' apposto sul bene ', $itemURI, ': timbro')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./STMC))='stemma'">
									<xsl:value-of
										select="concat('Elemento ', position(), ' apposto sul bene ', $itemURI, ': stemma')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./STMC))='emblema'">
									<xsl:value-of
										select="concat('Elemento ', position(), ' apposto sul bene ', $itemURI, ': emblema')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./STMC))='marchio'">
									<xsl:value-of
										select="concat('Elemento ', position(), ' apposto sul bene ', $itemURI, ': marchio')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./STMC))='logo'">
									<xsl:value-of
										select="concat('Elemento ', position(), ' apposto sul bene ', $itemURI, ': logo')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat('Elemento ', position(), ' apposto sul bene ', $itemURI, ': ', normalize-space(./STMC))" />
								</xsl:otherwise>
							</xsl:choose>
						</rdfs:label>
						<xsl:if
							test="./STMD and (not(starts-with(lower-case(normalize-space(./STMD)), 'nr')) and not(starts-with(lower-case(normalize-space(./STMD)), 'n.r')))">
							<arco-core:description>
								<xsl:value-of select="normalize-space(./STMD)" />
							</arco-core:description>
						</xsl:if>
						<xsl:if
							test="./STMU and (not(starts-with(lower-case(normalize-space(./STMU)), 'nr')) and not(starts-with(lower-case(normalize-space(./STMU)), 'n.r')))">
							<arco-dd:occurrences>
								<xsl:value-of select="normalize-space(./STMU)" />
							</arco-dd:occurrences>
						</xsl:if>
						<xsl:if
							test="./STMP and (not(starts-with(lower-case(normalize-space(./STMP)), 'nr')) and not(starts-with(lower-case(normalize-space(./STMP)), 'n.r')))">
							<arco-dd:positionOnCulturalProperty>
								<xsl:value-of select="normalize-space(./STMP)" />
							</arco-dd:positionOnCulturalProperty>
						</xsl:if>
						<xsl:if
							test="./STMQ and (not(starts-with(lower-case(normalize-space(./STMQ)), 'nr')) and not(starts-with(lower-case(normalize-space(./STMQ)), 'n.r')))">
							<arco-dd:hasAffixedElementType>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="concat($NS, 'AffixedElementType/', arco-fn:urify(normalize-space(./STMQ)))" />
								</xsl:attribute>
							</arco-dd:hasAffixedElementType>
						</xsl:if>
						<xsl:if
							test="./STMI and (not(starts-with(lower-case(normalize-space(./STMI)), 'nr')) and not(starts-with(lower-case(normalize-space(./STMI)), 'n.r')))">
							<arco-dd:refersToAgent>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(./STMI))" />
								</xsl:attribute>
							</arco-dd:refersToAgent>
						</xsl:if>
					</rdf:Description>
					<!-- affixed element type as an individual -->
					<xsl:if
						test="./STMQ and (not(starts-with(lower-case(normalize-space(./STMQ)), 'nr')) and not(starts-with(lower-case(normalize-space(./STMQ)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                                <xsl:value-of
								select="concat($NS, 'AffixedElementType/', arco-fn:urify(normalize-space(./STMQ)))" />
	                            </xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/denotative-description/AffixedElementType" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(./STMQ)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./STMQ)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- referred agent as an individual -->
					<xsl:if
						test="./STMI and (not(starts-with(lower-case(normalize-space(./STMI)), 'nr')) and not(starts-with(lower-case(normalize-space(./STMI)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                                <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./STMI))" />
	                            </xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/italia/onto/l0/Agent" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(./STMI)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./STMI)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- affixed element (*/LSI) -->
			<xsl:if test="record/metadata/schede/A/*/LSI/*">
				<xsl:for-each select="record/metadata/schede/A/*/LSI">
					<xsl:variable name="parentPosition">
						<xsl:value-of select="position()" />
					</xsl:variable>
					<rdf:Description>
						<xsl:choose>
							<xsl:when
								test="lower-case(normalize-space(./LSIG))='timbro'">
								<xsl:attribute name="rdf:about">
									<xsl:value-of
									select="concat($NS, 'Stamp/', $itemURI, '-affixed-element-', position())" />
								</xsl:attribute>
							</xsl:when>
							<xsl:when
								test="lower-case(normalize-space(./LSIG))='stemma'">
								<xsl:attribute name="rdf:about">
									<xsl:value-of
									select="concat($NS, 'CoatOfArms/', $itemURI, '-affixed-element-', position())" />
								</xsl:attribute>
							</xsl:when>
							<xsl:when
								test="lower-case(normalize-space(./LSIG))='emblema'">
								<xsl:attribute name="rdf:about">
									<xsl:value-of
									select="concat($NS, 'Emblem/', $itemURI, '-affixed-element-', position())" />
								</xsl:attribute>
							</xsl:when>
							<xsl:when
								test="lower-case(normalize-space(./LSIG))='marchio'">
								<xsl:attribute name="rdf:about">
									<xsl:value-of
									select="concat($NS, 'Brand/', $itemURI, '-affixed-element-', position())" />
								</xsl:attribute>
							</xsl:when>
							<xsl:when
								test="lower-case(normalize-space(./LSIG))='logo'">
								<xsl:attribute name="rdf:about">
									<xsl:value-of
									select="concat($NS, 'Logo/', $itemURI, '-affixed-element-', position())" />
								</xsl:attribute>
							</xsl:when>
							<xsl:when
								test="lower-case(normalize-space(./LSIG))='lapide'">
								<xsl:attribute name="rdf:about">
									<xsl:value-of
									select="concat($NS, 'HistoricalPlaque/', $itemURI, '-affixed-element-', position())" />
								</xsl:attribute>
							</xsl:when>
							<xsl:otherwise>
								<xsl:attribute name="rdf:about">
									<xsl:value-of
									select="concat($NS, 'AffixedElement/', $itemURI, '-affixed-element-', position())" />
								</xsl:attribute>
							</xsl:otherwise>
						</xsl:choose>
						<rdf:type>
							<xsl:choose>
								<xsl:when
									test="lower-case(normalize-space(./LSIG))='timbro'">
									<xsl:attribute name="rdf:resource">
										<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/Stamp'" />
									</xsl:attribute>
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./LSIG))='stemma'">
									<xsl:attribute name="rdf:resource">
										<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/CoatOfArms'" />
									</xsl:attribute>
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./LSIG))='emblema'">
									<xsl:attribute name="rdf:resource">
										<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/Emblem'" />
									</xsl:attribute>
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./LSIG))='marchio'">
									<xsl:attribute name="rdf:resource">
										<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/Brand'" />
									</xsl:attribute>
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./LSIG))='logo'">
									<xsl:attribute name="rdf:resource">
										<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/Logo'" />
									</xsl:attribute>
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./LSIG))='lapide'">
									<xsl:attribute name="rdf:resource">
										<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/HistoricalPlaque'" />
									</xsl:attribute>
								</xsl:when>
								<xsl:otherwise>
									<xsl:attribute name="rdf:resource">
										<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/AffixedElement'" />
									</xsl:attribute>
								</xsl:otherwise>
							</xsl:choose>
						</rdf:type>
						<rdfs:label xml:lang="en">
							<xsl:choose>
								<xsl:when
									test="lower-case(normalize-space(./LSIG))='timbro'">
									<xsl:value-of
										select="concat('Element ', position(), ' affixed to cultural property ', $itemURI, ': stamp')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./LSIG))='stemma'">
									<xsl:value-of
										select="concat('Element ', position(), ' affixed to cultural property ', $itemURI, ': coat of arms')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./LSIG))='emblema'">
									<xsl:value-of
										select="concat('Element ', position(), ' affixed to cultural property ', $itemURI, ': emblem')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./LSIG))='marchio'">
									<xsl:value-of
										select="concat('Element ', position(), ' affixed to cultural property ', $itemURI, ': brand')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./LSIG))='logo'">
									<xsl:value-of
										select="concat('Element ', position(), ' affixed to cultural property ', $itemURI, ': logo')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./LSIG))='lapide'">
									<xsl:value-of
										select="concat('Element ', position(), ' affixed to cultural property ', $itemURI, ': historical plaque')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat('Element ', position(), ' affixed to cultural property ', $itemURI, ': ', normalize-space(./LSIG))" />
								</xsl:otherwise>
							</xsl:choose>
						</rdfs:label>
						<rdfs:label xml:lang="it">
							<xsl:choose>
								<xsl:when
									test="lower-case(normalize-space(./LSIG))='timbro'">
									<xsl:value-of
										select="concat('Elemento ', position(), ' apposto sul bene ', $itemURI, ': timbro')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./LSIG))='stemma'">
									<xsl:value-of
										select="concat('Elemento ', position(), ' apposto sul bene ', $itemURI, ': stemma')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./LSIG))='emblema'">
									<xsl:value-of
										select="concat('Elemento ', position(), ' apposto sul bene ', $itemURI, ': emblema')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./LSIG))='marchio'">
									<xsl:value-of
										select="concat('Elemento ', position(), ' apposto sul bene ', $itemURI, ': marchio')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./LSIG))='logo'">
									<xsl:value-of
										select="concat('Elemento ', position(), ' apposto sul bene ', $itemURI, ': logo')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./LSIG))='lapide'">
									<xsl:value-of
										select="concat('Elemento ', position(), ' apposto sul bene ', $itemURI, ': lapide')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat('Elemento ', position(), ' apposto sul bene ', $itemURI, ': ', normalize-space(./LSIG))" />
								</xsl:otherwise>
							</xsl:choose>
						</rdfs:label>
						<xsl:if
							test="./LSIT and (not(starts-with(lower-case(normalize-space(./LSIT)), 'nr')) and not(starts-with(lower-case(normalize-space(./LSIT)), 'n.r')))">
							<arco-core:description>
								<xsl:value-of select="normalize-space(./LSIT)" />
							</arco-core:description>
						</xsl:if>
						<xsl:if
							test="./LSIU and (not(starts-with(lower-case(normalize-space(./LSIU)), 'nr')) and not(starts-with(lower-case(normalize-space(./LSIU)), 'n.r')))">
							<arco-dd:positionOnCulturalProperty>
								<xsl:value-of select="normalize-space(./LSIU)" />
							</arco-dd:positionOnCulturalProperty>
						</xsl:if>
						<xsl:if
							test="./LSII and (not(starts-with(lower-case(normalize-space(./LSII)), 'nr')) and not(starts-with(lower-case(normalize-space(./LSII)), 'n.r')))">
							<arco-dd:transcript>
								<xsl:value-of select="normalize-space(./LSII)" />
							</arco-dd:transcript>
						</xsl:if>
						<xsl:if
							test="(./LSIM and (not(starts-with(lower-case(normalize-space(./LSIM)), 'nr')) and not(starts-with(lower-case(normalize-space(./LSIM)), 'n.r')))) or (./LSIC and (not(starts-with(lower-case(normalize-space(./LSIC)), 'nr')) and not(starts-with(lower-case(normalize-space(./LSIC)), 'n.r'))))">

							<arco-dd:hasTechnicalStatus>
								<xsl:attribute name="rdf:resource">
			                		<xsl:value-of
									select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI, '-affixed-element-', $parentPosition)" />
		 	                	</xsl:attribute>
							</arco-dd:hasTechnicalStatus>
						</xsl:if>
						<xsl:for-each select="./LSIC">
							<arco-dd:hasTechnique>
								<xsl:attribute name="rdf:resource">
	                			<xsl:value-of
									select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(.)))" />
	                		</xsl:attribute>
							</arco-dd:hasTechnique>
						</xsl:for-each>
						<xsl:for-each select="./LSIM">
							<arco-dd:hasMaterial>
								<xsl:attribute name="rdf:resource">
	                			<xsl:value-of
									select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(.)))" />
	                		</xsl:attribute>
							</arco-dd:hasMaterial>
						</xsl:for-each>
					</rdf:Description>
					<!-- technical status as an individual -->
					<xsl:if
						test="(./LSIM and (not(starts-with(lower-case(normalize-space(./LSIM)), 'nr')) and not(starts-with(lower-case(normalize-space(./LSIM)), 'n.r')))) or (./LSIC and (not(starts-with(lower-case(normalize-space(./LSIC)), 'nr')) and not(starts-with(lower-case(normalize-space(./LSIC)), 'n.r'))))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
            			<xsl:value-of
								select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI, '-affixed-element-', $parentPosition)" />
            		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
							<xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/CulturalEntityTechnicalStatus'" />
						</xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Stato tecnico dell''elemento ', $parentPosition, ' apposto sul bene culturale ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Stato tecnico dell''elemento ', $parentPosition, ' apposto sul bene culturale ', $itemURI)" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Technical status of element ', $parentPosition, ' affixed to cultural property ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Technical status of element ', $parentPosition, ' affixed to cultural property ', $itemURI)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>

					<!-- technique as an individual -->
					<xsl:if
						test="./LSIC and (not(starts-with(lower-case(normalize-space(./LSIC)), 'nr')) and not(starts-with(lower-case(normalize-space(./LSIC)), 'n.r')))">
						<xsl:if test="./LSIC">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
            			<xsl:value-of
									select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI, '-affixed-element-', $parentPosition)" />
            		</xsl:attribute>
								<xsl:for-each select="./LSIC">
									<arco-dd:includesTechnicalCharacteristic>
										<xsl:attribute name="rdf:resource">
            				<xsl:value-of
											select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(.)))" />
            			</xsl:attribute>
									</arco-dd:includesTechnicalCharacteristic>
								</xsl:for-each>
							</rdf:Description>
							<!-- Technical detail as an individual -->
							<xsl:for-each select="./LSIC">
								<rdf:Description>
									<xsl:attribute name="rdf:about">
            			<xsl:value-of
										select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(.)))" />
            		</xsl:attribute>
									<rdf:type>
										<xsl:attribute name="rdf:resource">
							<xsl:value-of
											select="'https://w3id.org/arco/ontology/denotative-description/TechnicalCharacteristic'" />
						</xsl:attribute>
									</rdf:type>
									<rdfs:label>
										<xsl:value-of select="normalize-space(.)" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of select="normalize-space(.)" />
									</l0:name>
									<arco-dd:isCharacteristicClassifiedBy>
										<xsl:attribute name="rdf:resource">
            				<xsl:value-of
											select="'https://w3id.org/arco/ontology/denotative-description/Technique'" />
            			</xsl:attribute>
									</arco-dd:isCharacteristicClassifiedBy>
								</rdf:Description>
							</xsl:for-each>
						</xsl:if>
					</xsl:if>
					<!-- material as an individual -->
					<xsl:if
						test="./LSIM and (not(starts-with(lower-case(normalize-space(./LSIM)), 'nr')) and not(starts-with(lower-case(normalize-space(./LSIM)), 'n.r')))">
						<xsl:if test="./LSIM">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
            			<xsl:value-of
									select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI, '-affixed-element-', $parentPosition)" />
            		</xsl:attribute>
								<xsl:for-each select="./LSIM">
									<arco-dd:includesTechnicalCharacteristic>
										<xsl:attribute name="rdf:resource">
            				<xsl:value-of
											select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(.)))" />
            			</xsl:attribute>
									</arco-dd:includesTechnicalCharacteristic>
								</xsl:for-each>
							</rdf:Description>
							<!-- Technical detail as an individual -->
							<xsl:for-each select="./LSIM">
								<rdf:Description>
									<xsl:attribute name="rdf:about">
            			<xsl:value-of
										select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(.)))" />
            		</xsl:attribute>
									<rdf:type>
										<xsl:attribute name="rdf:resource">
							<xsl:value-of
											select="'https://w3id.org/arco/ontology/denotative-description/TechnicalCharacteristic'" />
						</xsl:attribute>
									</rdf:type>
									<rdfs:label>
										<xsl:value-of select="normalize-space(.)" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of select="normalize-space(.)" />
									</l0:name>
									<arco-dd:isCharacteristicClassifiedBy>
										<xsl:attribute name="rdf:resource">
            				<xsl:value-of
											select="'https://w3id.org/arco/ontology/denotative-description/Technique'" />
            			</xsl:attribute>
									</arco-dd:isCharacteristicClassifiedBy>
								</rdf:Description>
							</xsl:for-each>
						</xsl:if>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- affixed element (DA/ISE) -->
			<xsl:if test="record/metadata/schede/*/DA/ISE/*">
				<xsl:for-each select="record/metadata/schede/*/DA/ISE">
					<xsl:variable name="parentPosition">
						<xsl:value-of select="position()" />
					</xsl:variable>
					<rdf:Description>
						<xsl:choose>
							<xsl:when
								test="lower-case(normalize-space(./ISED))='timbro'">
								<xsl:attribute name="rdf:about">
									<xsl:value-of
									select="concat($NS, 'Stamp/', $itemURI, '-affixed-element-', position())" />
								</xsl:attribute>
							</xsl:when>
							<xsl:when
								test="lower-case(normalize-space(./ISED))='stemma'">
								<xsl:attribute name="rdf:about">
									<xsl:value-of
									select="concat($NS, 'CoatOfArms/', $itemURI, '-affixed-element-', position())" />
								</xsl:attribute>
							</xsl:when>
							<xsl:when
								test="lower-case(normalize-space(./ISED))='emblema'">
								<xsl:attribute name="rdf:about">
									<xsl:value-of
									select="concat($NS, 'Emblem/', $itemURI, '-affixed-element-', position())" />
								</xsl:attribute>
							</xsl:when>
							<xsl:when
								test="lower-case(normalize-space(./ISED))='marchio'">
								<xsl:attribute name="rdf:about">
									<xsl:value-of
									select="concat($NS, 'Brand/', $itemURI, '-affixed-element-', position())" />
								</xsl:attribute>
							</xsl:when>
							<xsl:when
								test="lower-case(normalize-space(./ISED))='logo'">
								<xsl:attribute name="rdf:about">
									<xsl:value-of
									select="concat($NS, 'Logo/', $itemURI, '-affixed-element-', position())" />
								</xsl:attribute>
							</xsl:when>
							<xsl:when
								test="lower-case(normalize-space(./ISED))='iscrizione'">
								<xsl:attribute name="rdf:about">
									<xsl:value-of
									select="concat($NS, 'Inscription/', $itemURI, '-affixed-element-', position())" />
								</xsl:attribute>
							</xsl:when>
							<xsl:otherwise>
								<xsl:attribute name="rdf:about">
									<xsl:value-of
									select="concat($NS, 'AffixedElement/', $itemURI, '-affixed-element-', position())" />
								</xsl:attribute>
							</xsl:otherwise>
						</xsl:choose>
						<rdf:type>
							<xsl:choose>
								<xsl:when
									test="lower-case(normalize-space(./ISED))='timbro'">
									<xsl:attribute name="rdf:resource">
										<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/Stamp'" />
									</xsl:attribute>
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./ISED))='stemma'">
									<xsl:attribute name="rdf:resource">
										<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/CoatOfArms'" />
									</xsl:attribute>
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./ISED))='emblema'">
									<xsl:attribute name="rdf:resource">
										<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/Emblem'" />
									</xsl:attribute>
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./ISED))='marchio'">
									<xsl:attribute name="rdf:resource">
										<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/Brand'" />
									</xsl:attribute>
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./ISED))='logo'">
									<xsl:attribute name="rdf:resource">
										<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/Logo'" />
									</xsl:attribute>
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./ISED))='iscrizione'">
									<xsl:attribute name="rdf:resource">
										<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/Inscription'" />
									</xsl:attribute>
								</xsl:when>
								<xsl:otherwise>
									<xsl:attribute name="rdf:resource">
										<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/AffixedElement'" />
									</xsl:attribute>
								</xsl:otherwise>
							</xsl:choose>
						</rdf:type>
						<rdfs:label xml:lang="en">
							<xsl:choose>
								<xsl:when
									test="lower-case(normalize-space(./ISED))='timbro'">
									<xsl:value-of
										select="concat('Element ', position(), ' affixed to cultural property ', $itemURI, ': stamp')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./ISED))='stemma'">
									<xsl:value-of
										select="concat('Element ', position(), ' affixed to cultural property ', $itemURI, ': coat of arms')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./ISED))='emblema'">
									<xsl:value-of
										select="concat('Element ', position(), ' affixed to cultural property ', $itemURI, ': emblem')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./ISED))='marchio'">
									<xsl:value-of
										select="concat('Element ', position(), ' affixed to cultural property ', $itemURI, ': brand')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./ISED))='logo'">
									<xsl:value-of
										select="concat('Element ', position(), ' affixed to cultural property ', $itemURI, ': logo')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./ISED))='iscrizione'">
									<xsl:value-of
										select="concat('Element ', position(), ' affixed to cultural property ', $itemURI, ': inscription')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat('Element ', position(), ' affixed to cultural property ', $itemURI, ': ', normalize-space(./STMC))" />
								</xsl:otherwise>
							</xsl:choose>
						</rdfs:label>
						<rdfs:label xml:lang="it">
							<xsl:choose>
								<xsl:when
									test="lower-case(normalize-space(./ISED))='timbro'">
									<xsl:value-of
										select="concat('Elemento ', position(), ' apposto sul bene ', $itemURI, ': timbro')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./ISED))='stemma'">
									<xsl:value-of
										select="concat('Elemento ', position(), ' apposto sul bene ', $itemURI, ': stemma')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./ISED))='emblema'">
									<xsl:value-of
										select="concat('Elemento ', position(), ' apposto sul bene ', $itemURI, ': emblema')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./ISED))='marchio'">
									<xsl:value-of
										select="concat('Elemento ', position(), ' apposto sul bene ', $itemURI, ': marchio')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./ISED))='logo'">
									<xsl:value-of
										select="concat('Elemento ', position(), ' apposto sul bene ', $itemURI, ': logo')" />
								</xsl:when>
								<xsl:when
									test="lower-case(normalize-space(./ISED))='iscrizione'">
									<xsl:value-of
										select="concat('Elemento ', position(), ' apposto sul bene ', $itemURI, ': iscrizione')" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat('Elemento ', position(), ' apposto sul bene ', $itemURI, ': ', normalize-space(./STMC))" />
								</xsl:otherwise>
							</xsl:choose>
						</rdfs:label>
						<xsl:if
							test="./ISEZ and (not(starts-with(lower-case(normalize-space(./ISEZ)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISEZ)), 'n.r')))">
							<arco-core:description>
								<xsl:value-of select="normalize-space(./ISEZ)" />
							</arco-core:description>
						</xsl:if>
						<xsl:if
							test="./ISEQ and (not(starts-with(lower-case(normalize-space(./ISEQ)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISEQ)), 'n.r')))">
							<arco-dd:occurrences>
								<xsl:value-of select="normalize-space(./ISEQ)" />
							</arco-dd:occurrences>
						</xsl:if>
						<xsl:if
							test="./ISEI and (not(starts-with(lower-case(normalize-space(./ISEI)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISEI)), 'n.r')))">
							<arco-dd:transcript>
								<xsl:value-of select="normalize-space(./ISEI)" />
							</arco-dd:transcript>
						</xsl:if>
						<xsl:if
							test="./ISEB and (not(starts-with(lower-case(normalize-space(./ISEB)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISEB)), 'n.r')))">
							<arco-dd:italianTranslation>
								<xsl:value-of select="normalize-space(./ISEB)" />
							</arco-dd:italianTranslation>
						</xsl:if>
						<xsl:if
							test="./ISEP and (not(starts-with(lower-case(normalize-space(./ISEP)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISEP)), 'n.r')))">
							<arco-dd:positionOnCulturalProperty>
								<xsl:value-of select="normalize-space(./ISEP)" />
							</arco-dd:positionOnCulturalProperty>
						</xsl:if>
						<xsl:if
							test="./ISEE and (not(starts-with(lower-case(normalize-space(./ISEE)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISEE)), 'n.r')))">
							<arco-dd:hasAffixedElementType>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="concat($NS, 'AffixedElementType/', arco-fn:urify(normalize-space(./ISEE)))" />
								</xsl:attribute>
							</arco-dd:hasAffixedElementType>
						</xsl:if>
						<xsl:if
							test="./ISEO and (not(starts-with(lower-case(normalize-space(./ISEO)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISEO)), 'n.r')))">
							<arco-dd:refersToAgent>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(./ISEO))" />
								</xsl:attribute>
							</arco-dd:refersToAgent>
						</xsl:if>
						<xsl:if
							test="./ISEL and (not(starts-with(lower-case(normalize-space(./ISEL)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISEL)), 'n.r')))">
							<xsl:for-each select="./ISEL">
								<language:hasLanguage>
									<xsl:attribute name="rdf:resource">
									<xsl:value-of
										select="concat($NS, 'Language/', arco-fn:urify(normalize-space(.)))" />
								</xsl:attribute>
								</language:hasLanguage>
							</xsl:for-each>
						</xsl:if>
						<xsl:if test="./ISEA and (not(starts-with(lower-case(normalize-space(./ISEA)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISEA)), 'n.r')))">
							<arco-cd:hasAuthor>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./ISEA))" />
								</xsl:attribute>
							</arco-cd:hasAuthor>
							<dc:creator>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./ISEA))" />
								</xsl:attribute>
							</dc:creator>
							<pico:author>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./ISEA))" />
								</xsl:attribute>
							</pico:author>
						</xsl:if>
						<xsl:if
							test="./ISEF and (not(starts-with(lower-case(normalize-space(./ISEF)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISEF)), 'n.r')))">
							<arco-dd:hasWritingSystem>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="concat($NS, 'WritingSystem/', arco-fn:urify(normalize-space(./ISEF)))" />
								</xsl:attribute>
							</arco-dd:hasWritingSystem>
						</xsl:if>
						<xsl:if
							test="./ISET and (not(starts-with(lower-case(normalize-space(./ISET)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISET)), 'n.r')))">
							<xsl:for-each select="./ISET">
								<arco-dd:hasFontStyle>
									<xsl:attribute name="rdf:resource">
									<xsl:value-of
										select="concat($NS, 'FontStyle/', arco-fn:urify(normalize-space(.)))" />
								</xsl:attribute>
								</arco-dd:hasFontStyle>
							</xsl:for-each>
						</xsl:if>
						<xsl:if
							test="./ISES and (not(starts-with(lower-case(normalize-space(./ISES)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISES)), 'n.r')))">
							<arco-dd:hasSupport>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="concat($NS, 'Support/', arco-fn:urify(normalize-space(./ISES)))" />
								</xsl:attribute>
							</arco-dd:hasSupport>
						</xsl:if>
						<xsl:if
							test="./ISEM and (not(starts-with(lower-case(normalize-space(./ISEM)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISEM)), 'n.r')))">
							<xsl:if test="./ISEM">
								<arco-dd:hasTechnicalStatus>
									<xsl:attribute name="rdf:resource">
			                		<xsl:value-of
										select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI, '-affixed-element-', $parentPosition)" />
		 	                	</xsl:attribute>
								</arco-dd:hasTechnicalStatus>
								<xsl:for-each select="./ISEM">
									<arco-dd:hasMaterialOrTechnique>
										<xsl:attribute name="rdf:resource">
		            				<xsl:value-of
											select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(.)))" />
		            			</xsl:attribute>
									</arco-dd:hasMaterialOrTechnique>
								</xsl:for-each>
							</xsl:if>
						</xsl:if>
						<xsl:if
							test="./ISEC and (not(starts-with(lower-case(normalize-space(./ISEC)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISEC)), 'n.r')))">
							<xsl:for-each select="./ISEC">
								<arco-dd:hasFunctionalPurpose>
									<xsl:attribute name="rdf:resource">
			                		<xsl:value-of
										select="concat($NS, 'FunctionalPurpose/', arco-fn:urify(normalize-space(.)))" />
		 	                	</xsl:attribute>
								</arco-dd:hasFunctionalPurpose>
							</xsl:for-each>
						</xsl:if>
					</rdf:Description>
					<!-- affixed element type as an individual -->
					<xsl:if
						test="./ISEE and (not(starts-with(lower-case(normalize-space(./ISEE)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISEE)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                                <xsl:value-of
								select="concat($NS, 'AffixedElementType/', arco-fn:urify(normalize-space(./ISEE)))" />
	                            </xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/denotative-description/AffixedElementType" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(./ISEE)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./ISEE)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- referred agent as an individual -->
					<xsl:if
						test="./ISEO and (not(starts-with(lower-case(normalize-space(./ISEO)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISEO)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                                <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./ISEO))" />
	                            </xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/italia/onto/l0/Agent" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(./ISEO)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./ISEO)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- language as an individual -->
					<xsl:if
						test="./ISEL and (not(starts-with(lower-case(normalize-space(./ISEL)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISEL)), 'n.r')))">
						<xsl:for-each select="./ISEL">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
	                                <xsl:value-of
									select="concat($NS, 'Language/', arco-fn:urify(normalize-space(.)))" />
	                            </xsl:attribute>
								<rdf:type
									rdf:resource="https://w3id.org/italia/onto/Language/Language" />
								<rdfs:label>
									<xsl:value-of select="normalize-space(.)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(.)" />
								</l0:name>
							</rdf:Description>
						</xsl:for-each>
					</xsl:if>
					<!-- author as an individual -->
					<xsl:if
						test="./ISEA and (not(starts-with(lower-case(normalize-space(./ISEA)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISEA)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                                <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./ISEA))" />
	                            </xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/italia/onto/l0/Agent" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(./ISEA)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./ISEA)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- writing system as an individual -->
					<xsl:if
						test="./ISEF and (not(starts-with(lower-case(normalize-space(./ISEF)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISEF)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                                <xsl:value-of
								select="concat($NS, 'WritingSystem/', arco-fn:urify(normalize-space(./ISEF)))" />
	                            </xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/denotative-description/WritingSystem" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(./ISEF)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./ISEF)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- font style as an individual -->
					<xsl:if
						test="./ISET and (not(starts-with(lower-case(normalize-space(./ISET)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISET)), 'n.r')))">
						<xsl:for-each select="./ISET">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
	                                <xsl:value-of
									select="concat($NS, 'FontStyle/', arco-fn:urify(normalize-space(.)))" />
	                            </xsl:attribute>
								<rdf:type
									rdf:resource="https://w3id.org/arco/ontology/denotative-description/FontStyle" />
								<rdfs:label>
									<xsl:value-of select="normalize-space(.)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(.)" />
								</l0:name>
							</rdf:Description>
						</xsl:for-each>
					</xsl:if>
					<!-- support as an individual -->
					<xsl:if
						test="./ISES and (not(starts-with(lower-case(normalize-space(./ISES)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISES)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                                <xsl:value-of
								select="concat($NS, 'Support/', arco-fn:urify(normalize-space(./ISES)))" />
	                            </xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/denotative-description/Support" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(./ISES)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./ISES)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- material technique as an individual -->
					<xsl:if
						test="./ISEM and (not(starts-with(lower-case(normalize-space(./ISEM)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISEM)), 'n.r')))">
						<xsl:if test="./ISEM">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
	            			<xsl:value-of
									select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI, '-affixed-element-', $parentPosition)" />
	            		</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
								<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/CulturalEntityTechnicalStatus'" />
							</xsl:attribute>
								</rdf:type>
								<rdfs:label xml:lang="it">
									<xsl:value-of
										select="concat('Stato tecnico dell''elemento ', $parentPosition, ' apposto sul bene culturale ', $itemURI)" />
								</rdfs:label>
								<l0:name xml:lang="it">
									<xsl:value-of
										select="concat('Stato tecnico dell''elemento ', $parentPosition, ' apposto sul bene culturale ', $itemURI)" />
								</l0:name>
								<rdfs:label xml:lang="en">
									<xsl:value-of
										select="concat('Technical status of element ', $parentPosition, ' affixed to cultural property ', $itemURI)" />
								</rdfs:label>
								<l0:name xml:lang="en">
									<xsl:value-of
										select="concat('Technical status of element ', $parentPosition, ' affixed to cultural property ', $itemURI)" />
								</l0:name>
								<xsl:for-each select="./ISEM">
									<arco-dd:includesTechnicalCharacteristic>
										<xsl:attribute name="rdf:resource">
	            				<xsl:value-of
											select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(.)))" />
	            			</xsl:attribute>
									</arco-dd:includesTechnicalCharacteristic>
								</xsl:for-each>
							</rdf:Description>
							<!-- Technical detail as an individual -->
							<xsl:for-each select="./ISEM">
								<rdf:Description>
									<xsl:attribute name="rdf:about">
	            			<xsl:value-of
										select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(.)))" />
	            		</xsl:attribute>
									<rdf:type>
										<xsl:attribute name="rdf:resource">
								<xsl:value-of
											select="'https://w3id.org/arco/ontology/denotative-description/TechnicalCharacteristic'" />
							</xsl:attribute>
									</rdf:type>
									<rdfs:label>
										<xsl:value-of select="normalize-space(.)" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of select="normalize-space(.)" />
									</l0:name>
									<arco-dd:isCharacteristicClassifiedBy>
										<xsl:attribute name="rdf:resource">
	            				<xsl:value-of
											select="'https://w3id.org/arco/ontology/denotative-description/MaterialOrTechnique'" />
	            			</xsl:attribute>
									</arco-dd:isCharacteristicClassifiedBy>
								</rdf:Description>
							</xsl:for-each>
						</xsl:if>
					</xsl:if>
					<!-- functional purpose as an individual -->
					<xsl:if
						test="./ISEC and (not(starts-with(lower-case(normalize-space(./ISEC)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISEC)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                                <xsl:value-of
								select="concat($NS, 'FunctionalPurpose/', arco-fn:urify(normalize-space(./ISEC)))" />
		                            </xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/denotative-description/FunctionalPurpose" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(./ISEC)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./ISEC)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- affixed element (DA/ISR) -->
			<xsl:if test="record/metadata/schede/*/DA/ISR/*">
				<xsl:for-each select="record/metadata/schede/*/DA/ISR">
					<xsl:variable name="parentPosition">
						<xsl:value-of select="position()" />
					</xsl:variable>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
							<xsl:value-of
							select="concat($NS, 'Inscription/', $itemURI, '-inscription-', position())" />
						</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
								<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/Inscription'" />
							</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Inscription ', position(), ' of cultural property ', $itemURI)" />
						</rdfs:label>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Iscrizione ', position(), ' sul bene culturale ', $itemURI)" />
						</rdfs:label>
						<xsl:if
							test="./ISRI and (not(starts-with(lower-case(normalize-space(./ISRI)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISRI)), 'n.r')))">
							<arco-dd:transcript>
								<xsl:value-of select="normalize-space(./ISRI)" />
							</arco-dd:transcript>
						</xsl:if>
						<xsl:if
							test="./ISRP and (not(starts-with(lower-case(normalize-space(./ISRP)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISRP)), 'n.r')))">
							<arco-dd:positionOnCulturalProperty>
								<xsl:value-of select="normalize-space(./ISRP)" />
							</arco-dd:positionOnCulturalProperty>
						</xsl:if>
						<xsl:if
							test="./ISRL and (not(starts-with(lower-case(normalize-space(./ISRL)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISRL)), 'n.r')))">
							<xsl:for-each select="./ISRL">
								<language:hasLanguage>
									<xsl:attribute name="rdf:resource">
									<xsl:value-of
										select="concat($NS, 'Language/', arco-fn:urify(normalize-space(.)))" />
								</xsl:attribute>
								</language:hasLanguage>
							</xsl:for-each>
						</xsl:if>
						<xsl:if test="./ISRA and (not(starts-with(lower-case(normalize-space(./ISRA)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISRA)), 'n.r')))">
							<arco-cd:hasAuthor>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./ISRA))" />
								</xsl:attribute>
							</arco-cd:hasAuthor>
							<dc:creator>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./ISRA))" />
								</xsl:attribute>
							</dc:creator>
							<pico:author>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./ISRA))" />
								</xsl:attribute>
							</pico:author>
						</xsl:if>
						<xsl:if
							test="./ISRT and (not(starts-with(lower-case(normalize-space(./ISRT)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISRT)), 'n.r')))">
							<xsl:for-each select="./ISRT">
								<arco-dd:hasFontStyle>
									<xsl:attribute name="rdf:resource">
									<xsl:value-of
										select="concat($NS, 'FontStyle/', arco-fn:urify(normalize-space(.)))" />
								</xsl:attribute>
								</arco-dd:hasFontStyle>
							</xsl:for-each>
						</xsl:if>
						<xsl:if
							test="./ISRS and (not(starts-with(lower-case(normalize-space(./ISRS)), 'nr')) and not(starts-with(lower-case(normalize-space(ISRS)), 'n.r')))">
							<xsl:if test="./ISRS">
								<arco-dd:hasTechnicalStatus>
									<xsl:attribute name="rdf:resource">
			                		<xsl:value-of
										select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI, '-inscription-', $parentPosition)" />
		 	                	</xsl:attribute>
								</arco-dd:hasTechnicalStatus>
								<xsl:for-each select="./ISRS">
									<arco-dd:hasMaterialOrTechnique>
										<xsl:attribute name="rdf:resource">
	 	                			<xsl:value-of
											select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(.)))" />
	 	                		</xsl:attribute>
									</arco-dd:hasMaterialOrTechnique>
								</xsl:for-each>
							</xsl:if>
						</xsl:if>
					</rdf:Description>
					<!-- language as an individual -->
					<xsl:if
						test="./ISRL and (not(starts-with(lower-case(normalize-space(./ISRL)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISRL)), 'n.r')))">
						<xsl:for-each select="./ISRL">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
	                                <xsl:value-of
									select="concat($NS, 'Language/', arco-fn:urify(normalize-space(.)))" />
	                            </xsl:attribute>
								<rdf:type
									rdf:resource="https://w3id.org/italia/onto/Language/Language" />
								<rdfs:label>
									<xsl:value-of select="normalize-space(.)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(.)" />
								</l0:name>
							</rdf:Description>
						</xsl:for-each>
					</xsl:if>
					<!-- author as an individual -->
					<xsl:if
						test="./ISRA and (not(starts-with(lower-case(normalize-space(./ISRA)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISRA)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                                <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./ISRA))" />
	                            </xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/italia/onto/l0/Agent" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(./ISRA)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./ISRA)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- font style as an individual -->
					<xsl:if
						test="./ISRT and (not(starts-with(lower-case(normalize-space(./ISRT)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISRT)), 'n.r')))">
						<xsl:for-each select="./ISRT">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
	                                <xsl:value-of
									select="concat($NS, 'FontStyle/', arco-fn:urify(normalize-space(.)))" />
	                            </xsl:attribute>
								<rdf:type
									rdf:resource="https://w3id.org/arco/ontology/denotative-description/FontStyle" />
								<rdfs:label>
									<xsl:value-of select="normalize-space(.)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(.)" />
								</l0:name>
							</rdf:Description>
						</xsl:for-each>
					</xsl:if>
					<!-- material technique as an individual -->
					<xsl:if
						test="./ISRS and (not(starts-with(lower-case(normalize-space(./ISRS)), 'nr')) and not(starts-with(lower-case(normalize-space(./ISRS)), 'n.r')))">
						<xsl:if test="./ISRS">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
            			<xsl:value-of
									select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI, '-inscription-', $parentPosition)" />
            		</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
							<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/CulturalEntityTechnicalStatus'" />
						</xsl:attribute>
								</rdf:type>
								<rdfs:label xml:lang="it">
									<xsl:value-of
										select="concat('Stato tecnico dell''iscrizione ', $parentPosition, ' sul bene culturale ', $itemURI)" />
								</rdfs:label>
								<l0:name xml:lang="it">
									<xsl:value-of
										select="concat('Stato tecnico dell''iscrizione ', $parentPosition, ' sul bene culturale ', $itemURI)" />
								</l0:name>
								<rdfs:label xml:lang="en">
									<xsl:value-of
										select="concat('Technical status of inscription ', $parentPosition, ' of cultural property ', $itemURI)" />
								</rdfs:label>
								<l0:name xml:lang="en">
									<xsl:value-of
										select="concat('Technical status of inscription ', $parentPosition, ' of cultural property ', $itemURI)" />
								</l0:name>
								<xsl:for-each select="./ISRS">
									<arco-dd:includesTechnicalCharacteristic>
										<xsl:attribute name="rdf:resource">
            				<xsl:value-of
											select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(.)))" />
            			</xsl:attribute>
									</arco-dd:includesTechnicalCharacteristic>
								</xsl:for-each>
							</rdf:Description>
							<!-- Technical detail as an individual -->
							<xsl:for-each select="./ISRS">
								<rdf:Description>
									<xsl:attribute name="rdf:about">
            			<xsl:value-of
										select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(.)))" />
            		</xsl:attribute>
									<rdf:type>
										<xsl:attribute name="rdf:resource">
							<xsl:value-of
											select="'https://w3id.org/arco/ontology/denotative-description/TechnicalCharacteristic'" />
						</xsl:attribute>
									</rdf:type>
									<rdfs:label>
										<xsl:value-of select="normalize-space(.)" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of select="normalize-space(.)" />
									</l0:name>
									<arco-dd:isCharacteristicClassifiedBy>
										<xsl:attribute name="rdf:resource">
            				<xsl:value-of
											select="'https://w3id.org/arco/ontology/denotative-description/MaterialOrTechnique'" />
            			</xsl:attribute>
									</arco-dd:isCharacteristicClassifiedBy>
								</rdf:Description>
							</xsl:for-each>
						</xsl:if>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- alternative photographic heritage classification -->
			<xsl:if test="record/metadata/schede/*/SG/CLF/*">
				<xsl:for-each select="record/metadata/schede/*/SG/CLF">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
									<xsl:value-of
							select="concat($NS, 'PhotographicHeritageClassification/', $itemURI, '-alternative-classification-', position())" />
							</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
									<xsl:value-of
								select="'https://w3id.org/arco/ontology/arco/PhotographicHeritageClassification'" />
								</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Alternative classification ', position(), ' of photographic heritage ', $itemURI)" />
						</rdfs:label>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Classificazione alternativa ', position(), ' del bene fotografico ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Alternative classification ', position(), ' of photographic heritage ', $itemURI)" />
						</l0:name>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Classificazione alternativa ', position(), ' del bene fotografico ', $itemURI)" />
						</l0:name>
						<xsl:if test="./CLFS">
							<arco-arco:classifiedSubject>
								<xsl:value-of select="normalize-space(./CLFS)" />
							</arco-arco:classifiedSubject>
						</xsl:if>
						<xsl:if test="./CLFT">
							<arco-arco:hasPhotographicHeritageClassificationType>
								<xsl:attribute name="rdf:resource">
										<xsl:value-of
									select="concat($NS, 'PhotographicHeritageClassificationType/', arco-fn:urify(normalize-space(./CLFT)))" />
									</xsl:attribute>
							</arco-arco:hasPhotographicHeritageClassificationType>
						</xsl:if>
					</rdf:Description>
					<xsl:if test="./CLFT">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
									<xsl:value-of
								select="concat($NS, 'PhotographicHeritageClassificationType/', arco-fn:urify(normalize-space(./CLFT)))" />
								</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="'https://w3id.org/arco/ontology/arco/PhotographicHeritageClassificationType'" />
								</xsl:attribute>
							</rdf:type>
							<l0:name>
								<xsl:value-of select="normalize-space(./CLFT)" />
							</l0:name>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./CLFT)" />
							</rdfs:label>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- cultural property classification based on inventory -->
			<xsl:if
				test="record/metadata/schede/*/OG/OGT/OGTS and not($sheetType='NU' or $sheetType='VeAC' or $sheetType='F' or $sheetType='BNB')">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
							<xsl:value-of
						select="concat($NS, 'CulturalPropertyInventoryCategory/', arco-fn:urify(normalize-space(record/metadata/schede/*/OG/OGT/OGTS)))" />
						</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
								<xsl:value-of
							select="'https://w3id.org/arco/ontology/arco/CulturalPropertyInventoryCategory'" />
							</xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/OG/OGT/OGTS)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/OG/OGT/OGTS)" />
					</l0:name>
				</rdf:Description>
			</xsl:if>
			<!-- numismatic property category -->
			<xsl:if test="record/metadata/schede/NU/OG/OGT/OGTH">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
							<xsl:value-of
						select="concat($NS, 'NumismaticPropertyFunctionalCategory/', arco-fn:urify(normalize-space(record/metadata/schede/NU/OG/OGT/OGTH)))" />
						</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
								<xsl:value-of
							select="'https://w3id.org/arco/ontology/arco/NumismaticPropertyFunctionalCategory'" />
							</xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/NU/OG/OGT/OGTH)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/NU/OG/OGT/OGTH)" />
					</l0:name>
				</rdf:Description>
			</xsl:if>
			<xsl:if test="record/metadata/schede/NU/OG/OGT/OGTT">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
							<xsl:value-of
						select="concat($NS, 'NumismaticPropertyTypologicalCategory/', arco-fn:urify(normalize-space(record/metadata/schede/NU/OG/OGT/OGTT)))" />
						</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
								<xsl:value-of
							select="'https://w3id.org/arco/ontology/arco/NumismaticPropertyTypologicalCategory'" />
							</xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/NU/OG/OGT/OGTT)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/NU/OG/OGT/OGTT)" />
					</l0:name>
				</rdf:Description>
			</xsl:if>
			<!-- copyright -->
			<xsl:for-each select="record/metadata/schede/*/TU/CPR">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
							<xsl:value-of
						select="concat($NS, 'Copyright/', $itemURI, '-copyright-', position())" />
						</xsl:attribute>
					<rdf:type>
						<xsl:choose>
							<xsl:when
								test="lower-case(normalize-space(./CPRD))='scaduti' or lower-case(normalize-space(./CPRD))='diritti scaduti' or lower-case(normalize-space(./CPRD))='in pubblico dominio'">
								<xsl:attribute name="rdf:resource">
										<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/ExpiredCopyright'" />
									</xsl:attribute>
							</xsl:when>
							<xsl:otherwise>
								<xsl:attribute name="rdf:resource">
										<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/Copyright'" />
									</xsl:attribute>
							</xsl:otherwise>
						</xsl:choose>
					</rdf:type>
					<xsl:choose>
						<xsl:when
							test="lower-case(normalize-space(./CPRD))='scaduti' or lower-case(normalize-space(./CPRD))='diritti scaduti' or lower-case(normalize-space(./CPRD))='in pubblico dominio'">
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Copyright ', position(), ' of cultural property ', $itemURI, ': expired')" />
							</rdfs:label>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Diritti d''autore ', position(), ' del bene culturale ', $itemURI, ': scaduti')" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Copyright ', position(), ' of cultural property ', $itemURI, ': expired')" />
							</l0:name>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Diritti d''autore ', position(), ' del bene culturale ', $itemURI, ': scaduti')" />
							</l0:name>
						</xsl:when>
						<xsl:otherwise>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Copyright ', position(), ' of cultural property ', $itemURI)" />
							</rdfs:label>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Diritti d''autore ', position(), ' del bene culturale ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Copyright ', position(), ' of cultural property ', $itemURI)" />
							</l0:name>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Diritti d''autore ', position(), ' del bene culturale ', $itemURI)" />
							</l0:name>
						</xsl:otherwise>
					</xsl:choose>
					<xsl:if test="./CPRD">
						<arco-cd:expiryDate>
							<xsl:value-of select="normalize-space(./CPRD)" />
						</arco-cd:expiryDate>
					</xsl:if>
					<xsl:if test="./CPRS">
						<arco-core:note>
							<xsl:value-of select="normalize-space(./CPRS)" />
						</arco-core:note>
					</xsl:if>
					<xsl:if test="./CPRN">
						<arco-cd:hasCopyrightHolder>
							<xsl:attribute name="rdf:resource">
									<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./CPRN))" />
								</xsl:attribute>
						</arco-cd:hasCopyrightHolder>
					</xsl:if>
				</rdf:Description>
				<xsl:if test="./CPRN">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	                                <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(./CPRN))" />
	                            </xsl:attribute>
						<rdf:type
							rdf:resource="https://w3id.org/italia/onto/l0/Agent" />
						<rdfs:label>
							<xsl:value-of select="normalize-space(./CPRN)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./CPRN)" />
						</l0:name>
						<xsl:if test="./CPRI">
							<arco-cd:address>
								<xsl:value-of select="normalize-space(./CPRI)" />
							</arco-cd:address>
						</xsl:if>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- dedication -->
			<xsl:if test="record/metadata/schede/*/AU/DDC/*">
				<xsl:for-each select="record/metadata/schede/*/AU/DDC">
					<xsl:variable name="parentPosition">
						<xsl:value-of select="position()" />
					</xsl:variable>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
							<xsl:value-of
							select="concat($NS, 'Dedication/', $itemURI, '-dedication-', position())" />
						</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
								<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/Dedication'" />
							</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Dedication ', position(), ' of cultural property ', $itemURI)" />
						</rdfs:label>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Dedica ', position(), ' sul bene culturale ', $itemURI)" />
						</rdfs:label>
						<xsl:if test="./DDCN and (not(starts-with(lower-case(normalize-space(./DDCN)), 'nr')) and not(starts-with(lower-case(normalize-space(./DDCN)), 'n.r')))">
							<xsl:for-each select="./DDCN">
								<arco-cd:hasAuthor>
									<xsl:attribute name="rdf:resource">
										<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(normalize-space(.)))" />
									</xsl:attribute>
								</arco-cd:hasAuthor>
								<dc:creator>
									<xsl:attribute name="rdf:resource">
										<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(normalize-space(.)))" />
									</xsl:attribute>
								</dc:creator>
								<pico:author>
									<xsl:attribute name="rdf:resource">
										<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(normalize-space(.)))" />
									</xsl:attribute>
								</pico:author>
							</xsl:for-each>
						</xsl:if>
						<xsl:if
							test="./DDCM and (not(starts-with(lower-case(normalize-space(./DDCM)), 'nr')) and not(starts-with(lower-case(normalize-space(./DDCM)), 'n.r')))">
							<xsl:for-each select="./DDCM">
								<arco-dd:hasDedicatee>
									<xsl:attribute name="rdf:resource">
									<xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
								</xsl:attribute>
								</arco-dd:hasDedicatee>
							</xsl:for-each>
						</xsl:if>
						<xsl:if
							test="./DDCF and (not(starts-with(lower-case(normalize-space(./DDCF)), 'nr')) and not(starts-with(lower-case(normalize-space(./DDCF)), 'n.r')))">
							<arco-cd:hasInterpretationCriterion>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./DDCF)))" />
								</xsl:attribute>
							</arco-cd:hasInterpretationCriterion>
						</xsl:if>
						<xsl:if
							test="./DDCC and (not(starts-with(lower-case(normalize-space(./DDCC)), 'nr')) and not(starts-with(lower-case(normalize-space(./DDCC)), 'n.r')))">
							<arco-cd:hasCircumstance>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="concat($NS, 'Circumstance/', arco-fn:urify(normalize-space(./DDCC)))" />
								</xsl:attribute>
							</arco-cd:hasCircumstance>
						</xsl:if>
						<xsl:if
							test="./DDCD and (not(starts-with(lower-case(normalize-space(./DDCD)), 'nr')) and not(starts-with(lower-case(normalize-space(./DDCD)), 'n.r')))">
							<tiapit:time>
								<xsl:value-of select="normalize-space(./DDCD)" />
							</tiapit:time>
						</xsl:if>
					</rdf:Description>
					<!-- dedicatee as an individual -->
					<xsl:if
						test="./DDCM and (not(starts-with(lower-case(normalize-space(./DDCM)), 'nr')) and not(starts-with(lower-case(normalize-space(./DDCM)), 'n.r')))">
						<xsl:for-each select="./DDCM">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
	                                <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                            </xsl:attribute>
								<rdf:type
									rdf:resource="https://w3id.org/italia/onto/l0/Agent" />
								<rdfs:label>
									<xsl:value-of select="normalize-space(.)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(.)" />
								</l0:name>
							</rdf:Description>
						</xsl:for-each>
					</xsl:if>
					<!-- author as an individual -->
					<xsl:if
						test="./DDCN and (not(starts-with(lower-case(normalize-space(./DDCN)), 'nr')) and not(starts-with(lower-case(normalize-space(./DDCN)), 'n.r')))">
						<xsl:for-each select="./DDCN">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
	                                <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                            </xsl:attribute>
								<rdf:type
									rdf:resource="https://w3id.org/italia/onto/l0/Agent" />
								<rdfs:label>
									<xsl:value-of select="normalize-space(.)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(.)" />
								</l0:name>
							</rdf:Description>
						</xsl:for-each>
					</xsl:if>
					<!-- source as an individual -->
					<xsl:if
						test="./DDCF and (not(starts-with(lower-case(normalize-space(./DDCF)), 'nr')) and not(starts-with(lower-case(normalize-space(./DDCF)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                                <xsl:value-of
								select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./DDCF)))" />
	                            </xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/context-description/InterpretationCriterion" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(./DDCF)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./DDCF)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- circumstance as an individual -->
					<xsl:if
						test="./DDCC and (not(starts-with(lower-case(normalize-space(./DDCC)), 'nr')) and not(starts-with(lower-case(normalize-space(./DDCC)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                                <xsl:value-of
								select="concat($NS, 'Circumstance/', arco-fn:urify(normalize-space(./DDCC)))" />
	                            </xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/context-description/Circumstance" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(./DDCC)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./DDCC)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>

			<!-- finding context (AT) -->
			<xsl:if
				test="record/metadata/schede/AT/OG/OGC and (not(starts-with(lower-case(normalize-space(record/metadata/schede/AT/OG/OGC/OGCT)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/AT/OG/OGC/OGCT)), 'n.r')))">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
							<xsl:value-of
						select="concat($NS, 'FindingContext/', $itemURI, '-', arco-fn:urify(normalize-space(record/metadata/schede/AT/OG/OGC/OGCT)))" />
						</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
	            				<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/FindingContext'" />
	            			</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Finding context of cultural property ', $itemURI, ': ', normalize-space(record/metadata/schede/AT/OG/OGC/OGCT))" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Finding context of cultural property ', $itemURI, ': ', normalize-space(record/metadata/schede/AT/OG/OGC/OGCT))" />
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Contesto di ritrovamento del bene culturale ', $itemURI, ': ', normalize-space(record/metadata/schede/AT/OG/OGC/OGCT))" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Contesto di ritrovamento del bene culturale ', $itemURI, ': ', normalize-space(record/metadata/schede/AT/OG/OGC/OGCT))" />
					</l0:name>
					<arco-cd:hasFindingContextType>
						<xsl:attribute name="rdf:resource">
								<xsl:value-of
							select="concat($NS, 'FindingContextType/', arco-fn:urify(normalize-space(record/metadata/schede/AT/OG/OGC/OGCT)))" />
							</xsl:attribute>
					</arco-cd:hasFindingContextType>
					<xsl:for-each
						select="record/metadata/schede/AT/OG/OGC/OGCE">
						<arco-cd:hasAssociatedObject>
							<xsl:attribute name="rdf:resource">
								<xsl:value-of
								select="concat($NS, 'Object/', arco-fn:urify(normalize-space(.)))" />
							</xsl:attribute>
						</arco-cd:hasAssociatedObject>
					</xsl:for-each>
					<xsl:if test="record/metadata/schede/AT/OG/OGC/OGCS">
						<arco-core:specifications>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/AT/OG/OGC/OGCS)" />
						</arco-core:specifications>
					</xsl:if>
					<xsl:if test="record/metadata/schede/AT/OG/OGC/OGCN">
						<arco-core:note>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/AT/OG/OGC/OGCN)" />
						</arco-core:note>
					</xsl:if>
				</rdf:Description>
				<!-- finding context type as an individual -->
				<rdf:Description>
					<xsl:attribute name="rdf:about">
							<xsl:value-of
						select="concat($NS, 'FindingContextType/', arco-fn:urify(normalize-space(record/metadata/schede/AT/OG/OGC/OGCT)))" />
						</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
	            				<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/FindingContextType'" />
	            			</xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/AT/OG/OGC/OGCT)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/AT/OG/OGC/OGCT)" />
					</l0:name>
				</rdf:Description>
				<!-- associated object as an individual -->
				<xsl:for-each
					select="record/metadata/schede/AT/OG/OGC/OGCE">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
								<xsl:value-of
							select="concat($NS, 'Object/', arco-fn:urify(normalize-space(.)))" />
							</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
		            				<xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Object'" />
		            			</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(.)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(.)" />
						</l0:name>
					</rdf:Description>
				</xsl:for-each>
			</xsl:if>
			<!-- coin issuance (NU) -->
			<xsl:for-each select="record/metadata/schede/*/DA/AUE">
				<xsl:variable name="issuancePosition">
					<xsl:value-of select="position()" />
				</xsl:variable>
				<rdf:Description>
					<xsl:attribute name="rdf:about">
							<xsl:value-of
						select="concat($NS, 'CoinIssuance/', $itemURI, '-issuance-', position())" />
						</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
	            				<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/CoinIssuance'" />
	            			</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Coin issuance ', position(), ' of cultural property ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Coin issuance ', position(), ' of cultural property ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Emissione di moneta ', position(), ' del bene culturale ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Emissione di moneta ', position(), ' del bene culturale ', $itemURI)" />
					</l0:name>
					<!-- has issuer -->
					<xsl:for-each select="./AUEE">
						<xsl:if
							test="(not(starts-with(lower-case(normalize-space(./AUEE)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUEE)), 'n.r')))">
							<arco-core:hasAgentRole>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-issuance-', $issuancePosition, '-issuer-', position())" />
                        		</xsl:attribute>
							</arco-core:hasAgentRole>
							<arco-cd:hasIssuer>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
                        		</xsl:attribute>
							</arco-cd:hasIssuer>
						</xsl:if>
					</xsl:for-each>
					<!-- has minter -->
					<xsl:for-each select="./AUEZ">
						<xsl:if
							test="(not(starts-with(lower-case(normalize-space(./AUEZ)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUEZ)), 'n.r')))">
							<arco-core:hasAgentRole>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-issuance-', $issuancePosition, '-minter-', position())" />
                        		</xsl:attribute>
							</arco-core:hasAgentRole>
							<arco-cd:hasMinter>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
                        		</xsl:attribute>
							</arco-cd:hasMinter>
						</xsl:if>
					</xsl:for-each>
					<!-- has mint -->
					<xsl:for-each select="../ZEC">
						<xsl:if
							test="(not(starts-with(lower-case(normalize-space(../ZEC)), 'nr')) and not(starts-with(lower-case(normalize-space(../ZEC)), 'n.r')))">
							<arco-core:hasAgentRole>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-issuance-', $issuancePosition, '-mint-', position())" />
                        		</xsl:attribute>
							</arco-core:hasAgentRole>
							<arco-cd:hasMint>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
                        		</xsl:attribute>
							</arco-cd:hasMint>
						</xsl:if>
					</xsl:for-each>
					<!-- has mint -->
					<xsl:for-each select="./AUES">
						<xsl:if
							test="(not(starts-with(lower-case(normalize-space(./AUES)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUES)), 'n.r')))">
							<arco-core:hasAgentRole>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-issuance-', $issuancePosition, '-issuing-state-', position())" />
                        		</xsl:attribute>
							</arco-core:hasAgentRole>
							<arco-cd:hasIssuingState>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
                        		</xsl:attribute>
							</arco-cd:hasIssuingState>
						</xsl:if>
					</xsl:for-each>
				</rdf:Description>
				<!-- issuer as individual -->
				<xsl:if
					test="./AUEE and (not(starts-with(lower-case(normalize-space(./AUEE)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUEE)), 'n.r')))">
					<xsl:for-each select="./AUEE">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                        <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-issuance-', $issuancePosition, '-issuer-', position())" />
		                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/core/AgentRole'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Soggetto emittente ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(.))" />
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Issuer ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(.))" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Soggetto emittente ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(.))" />
							</l0:name>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Issuer ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(.))" />
							</l0:name>
							<arco-core:hasRole>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="concat($NS, 'Role/Issuer')" />
		                        </xsl:attribute>
							</arco-core:hasRole>
							<arco-core:hasAgent>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
		                        </xsl:attribute>
							</arco-core:hasAgent>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                        <xsl:value-of
								select="concat($NS, 'Role/Issuer')" />
		                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/Role'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="'Soggetto emittente di moneta'" />
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:value-of select="'Coin issuer'" />
							</rdfs:label>
							<arco-core:isRoleOf>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-issuance-', $issuancePosition, '-issuer-', position())" />
		                        </xsl:attribute>
							</arco-core:isRoleOf>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                        <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
		                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(.)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(.)" />
							</l0:name>
							<arco-core:isAgentOf>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-issuance-', $issuancePosition, '-issuer-', position())" />
		                        </xsl:attribute>
							</arco-core:isAgentOf>
						</rdf:Description>
					</xsl:for-each>
				</xsl:if>
				<!-- minter as individual -->
				<xsl:if
					test="./AUEZ and (not(starts-with(lower-case(normalize-space(./AUEZ)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUEZ)), 'n.r')))">
					<xsl:for-each select="./AUEZ">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                        <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-issuance-', $issuancePosition, '-minter-', position())" />
		                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/core/AgentRole'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Zecchiere ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(.))" />
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Minter ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(.))" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Zecchiere ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(.))" />
							</l0:name>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Minter ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(.))" />
							</l0:name>
							<arco-core:hasRole>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="concat($NS, 'Role/Minter')" />
		                        </xsl:attribute>
							</arco-core:hasRole>
							<arco-core:hasAgent>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
		                        </xsl:attribute>
							</arco-core:hasAgent>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                        <xsl:value-of
								select="concat($NS, 'Role/Minter')" />
		                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/Role'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of select="'Zecchiere'" />
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:value-of select="'Minter'" />
							</rdfs:label>
							<arco-core:isRoleOf>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-issuance-', $issuancePosition, '-minter-', position())" />
		                        </xsl:attribute>
							</arco-core:isRoleOf>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                        <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
		                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(.)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(.)" />
							</l0:name>
							<arco-core:isAgentOf>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-issuance-', $issuancePosition, '-minter-', position())" />
		                        </xsl:attribute>
							</arco-core:isAgentOf>
						</rdf:Description>
					</xsl:for-each>
				</xsl:if>
				<!-- mint as individual -->
				<xsl:if
					test="../ZEC and (not(starts-with(lower-case(normalize-space(../ZEC)), 'nr')) and not(starts-with(lower-case(normalize-space(../ZEC)), 'n.r')))">
					<xsl:for-each select="../ZEC">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                        <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-issuance-', $issuancePosition, '-mint-', position())" />
		                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/core/AgentRole'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Zecca ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(.))" />
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Mint ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(.))" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Zecca ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(.))" />
							</l0:name>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Mint ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(.))" />
							</l0:name>
							<arco-core:hasRole>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="concat($NS, 'Role/Mint')" />
		                        </xsl:attribute>
							</arco-core:hasRole>
							<arco-core:hasAgent>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
		                        </xsl:attribute>
							</arco-core:hasAgent>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                        <xsl:value-of
								select="concat($NS, 'Role/Mint')" />
		                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/Role'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of select="'Zecca'" />
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:value-of select="'Mint'" />
							</rdfs:label>
							<arco-core:isRoleOf>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-issuance-', $issuancePosition, '-mint-', position())" />
		                        </xsl:attribute>
							</arco-core:isRoleOf>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                        <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
		                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(.)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(.)" />
							</l0:name>
							<arco-core:isAgentOf>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-issuance-', $issuancePosition, '-mint-', position())" />
		                        </xsl:attribute>
							</arco-core:isAgentOf>
						</rdf:Description>
					</xsl:for-each>
				</xsl:if>
				<!-- minter as individual -->
				<xsl:if
					test="./AUES and (not(starts-with(lower-case(normalize-space(./AUES)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUES)), 'n.r')))">
					<xsl:for-each select="./AUES">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                        <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-issuance-', $issuancePosition, '-issuing-state-', position())" />
		                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/core/AgentRole'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Realtà statuale emittente ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(.))" />
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Issuing State ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(.))" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Realtà statuale emittente ', position(), ' del bene culturale ', $itemURI, ': ', normalize-space(.))" />
							</l0:name>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Issuing State ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(.))" />
							</l0:name>
							<arco-core:hasRole>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="concat($NS, 'Role/IssuingState')" />
		                        </xsl:attribute>
							</arco-core:hasRole>
							<arco-core:hasAgent>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
		                        </xsl:attribute>
							</arco-core:hasAgent>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                        <xsl:value-of
								select="concat($NS, 'Role/IssuingState')" />
		                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/Role'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of select="'Realtà statuale emittente'" />
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:value-of select="'Issuing State'" />
							</rdfs:label>
							<arco-core:isRoleOf>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-issuance-', $issuancePosition, '-issuing-state-', position())" />
		                        </xsl:attribute>
							</arco-core:isRoleOf>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                        <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
		                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(.)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(.)" />
							</l0:name>
							<arco-core:isAgentOf>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-issuance-', $issuancePosition, '-issuing-state-', position())" />
		                        </xsl:attribute>
							</arco-core:isAgentOf>
						</rdf:Description>
					</xsl:for-each>
				</xsl:if>
			</xsl:for-each>

			<!-- Use of cultural property -->
			<xsl:if
				test="not(record/metadata/schede/A/UT or record/metadata/schede/PG/UT)">
				<xsl:for-each select="record/metadata/schede/*/UT">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'Use/', $itemURI, '-use-', position())" />
            		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            				<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/Use'" />
            			</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Use ', position(), ' of cultural property ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Use ', position(), ' of cultural property ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Uso ', position(), ' del bene culturale ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Uso ', position(), ' del bene culturale ', $itemURI)" />
						</l0:name>
						<xsl:if
							test="./UTA and (not(starts-with(lower-case(normalize-space(./UTA)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTA)), 'n.r')))">
							<arco-cd:isKeptIn>
								<xsl:value-of select="normalize-space(./UTA)" />
							</arco-cd:isKeptIn>
						</xsl:if>
						<xsl:if test="./UTU/UTUN">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./UTU/UTUN)" />
							</arco-core:note>
						</xsl:if>
						<xsl:if
							test="./UTU/UTUD or ./UTS and (not(starts-with(lower-case(normalize-space(./UTU/UTUD)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTU/UTUD)), 'n.r')) and not(starts-with(lower-case(normalize-space(./UTS)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTS)), 'n.r')))">
							<tiapit:time>
								<xsl:choose>
									<xsl:when test="./UTU/UTUD">
										<xsl:value-of
											select="normalize-space(./UTU/UTUD)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="normalize-space(./UTS)" />
									</xsl:otherwise>
								</xsl:choose>
							</tiapit:time>
						</xsl:if>
						<xsl:if
							test="./UTU/UTUT or ./UTF and (not(starts-with(lower-case(normalize-space(./UTU/UTUT)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTU/UTUT)), 'n.r')) and not(starts-with(lower-case(normalize-space(./UTF)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTF)), 'n.r')))">
							<arco-cd:useFunction>
								<xsl:choose>
									<xsl:when test="./UTU/UTUF">
										<xsl:value-of
											select="normalize-space(./UTU/UTUF)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="normalize-space(./UTF)" />
									</xsl:otherwise>
								</xsl:choose>
							</arco-cd:useFunction>
						</xsl:if>
						<xsl:if
							test="./UTU/UTUM or ./UTM and (not(starts-with(lower-case(normalize-space(./UTU/UTUM)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTU/UTUM)), 'n.r')) and not(starts-with(lower-case(normalize-space(./UTM)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTM)), 'n.r')))">
							<arco-cd:useConditions>
								<xsl:choose>
									<xsl:when test="./UTU/UTUM">
										<xsl:value-of
											select="normalize-space(./UTU/UTUM)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="normalize-space(./UTM)" />
									</xsl:otherwise>
								</xsl:choose>
							</arco-cd:useConditions>
						</xsl:if>
						<xsl:if
							test="./UTU/UTUT and (not(starts-with(lower-case(normalize-space(./UTU/UTUT)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTU/UTUT)), 'n.r')))">
							<arco-cd:hasUseType>
								<xsl:attribute name="rdf:resource">
	                				<xsl:if
									test="./UTU/UTUT and not(./UTU/UTUT='.' or ./UTU/UTUT='-' or ./UTU/UTUT='/')">
		                                <xsl:choose>
		                                    <xsl:when
									test="lower-case(normalize-space(./UTU/UTUT))='attuale'">
		                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/CurrentUse'" />
		                                    </xsl:when>
		                                    <xsl:when
									test="lower-case(normalize-space(./UTU/UTUT))='precedente'">
		                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/PreviousUse'" />
		                                    </xsl:when>
		                                    <xsl:when
									test="lower-case(normalize-space(./UTU/UTUT))='storico'">
		                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/HistoricalUse'" />
		                                    </xsl:when>
		                                    <xsl:when
									test="lower-case(normalize-space(./UTU/UTUT))='dato non disponibile'">
		                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/UseTypeUnavailable'" />
		                                    </xsl:when>
		                                    <xsl:when
									test="./UTU/UTUT">
		                                        <xsl:value-of
									select="concat($NS, 'UseType/', arco-fn:urify(normalize-space(./UTU/UTUT)))" />
		                                    </xsl:when>
		                                </xsl:choose>
                    				</xsl:if>
	                			</xsl:attribute>
							</arco-cd:hasUseType>
						</xsl:if>
						<xsl:if
							test="./UTU/UTUS and (not(starts-with(lower-case(normalize-space(./UTU/UTUS)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTU/UTUS)), 'n.r')))">
							<arco-cd:hasUseTypeSpecification>
								<xsl:attribute name="rdf:resource">
	                				<xsl:if
									test="./UTU/UTUS and not(./UTU/UTUS='.' or ./UTU/UTUS='-' or ./UTU/UTUS='/')">
		                                <xsl:choose>
		                                    <xsl:when
									test="lower-case(normalize-space(./UTU/UTUS))='edilizio'">
		                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/BuildingUse'" />
		                                    </xsl:when>
		                                    <xsl:when
									test="lower-case(normalize-space(./UTU/UTUS))='epigrafico'">
		                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/EpigraphicUse'" />
		                                    </xsl:when>
		                                    <xsl:when
									test="lower-case(normalize-space(./UTU/UTUS))='strutturale'">
		                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/StructuralUse'" />
		                                    </xsl:when>
		                                    <xsl:when
									test="lower-case(normalize-space(./UTU/UTUS))='ornamentale'">
		                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/OrnamentalUse'" />
		                                    </xsl:when>
		                                    <xsl:when
									test="lower-case(normalize-space(./UTU/UTUS))='strumentale'">
		                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/InstrumentalUse'" />
		                                    </xsl:when>
		                                    <xsl:when
									test="lower-case(normalize-space(./UTU/UTUS))='reimpiego'">
		                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/Reuse'" />
		                                    </xsl:when>
		                                    <xsl:when
									test="./UTU/UTUS">
		                                        <xsl:value-of
									select="concat($NS, 'UseTypeSpecification/', arco-fn:urify(normalize-space(./UTU/UTUS)))" />
		                                    </xsl:when>
		                                </xsl:choose>
                    				</xsl:if>
	                			</xsl:attribute>
							</arco-cd:hasUseTypeSpecification>
						</xsl:if>
						<xsl:if
							test="./UTU/UTUO or ./UTO and (not(starts-with(lower-case(normalize-space(./UTU/UTUO)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTU/UTUO)), 'n.r')) and not(starts-with(lower-case(normalize-space(./UTO)), 'n.r')) and not(starts-with(lower-case(normalize-space(./UTO)), 'n.r')))">
							<arco-cd:hasCircumstance>
								<xsl:attribute name="rdf:resource">
	                				<xsl:choose>
	                					<xsl:when test="./UTU/UTUO">
	                						<xsl:value-of
									select="concat($NS, 'Circumstance/', arco-fn:urify(normalize-space(./UTU/UTUO)))" />
	                					</xsl:when>
	                					<xsl:otherwise>
	                						<xsl:value-of
									select="concat($NS, 'Circumstance/', arco-fn:urify(normalize-space(./UTO)))" />
	                					</xsl:otherwise>
	                				</xsl:choose>
	                			</xsl:attribute>
							</arco-cd:hasCircumstance>
						</xsl:if>
						<xsl:for-each select="./UTN">
							<xsl:if test=".">
								<arco-cd:hasUser>
									<xsl:attribute name="rdf:resource">
		                				<xsl:choose>
					            			<xsl:when test="./UTNN">
					            				<xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(./UTNN))" />
					            			</xsl:when>
					            			<xsl:otherwise>
					            				<xsl:value-of
										select="concat($NS, 'Agent/', $itemURI, '-user-', position())" />
					            			</xsl:otherwise>
			            				</xsl:choose>
		                			</xsl:attribute>
								</arco-cd:hasUser>
							</xsl:if>
						</xsl:for-each>
						<xsl:if
							test="./UTL and (not(starts-with(lower-case(normalize-space(./UTL)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTL)), 'n.r')))">
							<clvapit:hasSpatialCoverage>
								<xsl:attribute name="rdf:resource">
	                				<xsl:value-of
									select="concat($NS, 'Feature/', arco-fn:arcofy(normalize-space(./UTL)))" />
	                			</xsl:attribute>
							</clvapit:hasSpatialCoverage>
						</xsl:if>
						<xsl:if
							test="./AGC and (not(starts-with(lower-case(normalize-space(./AGC)), 'nr')) and not(starts-with(lower-case(normalize-space(./AGC)), 'n.r')))">
							<clvapit:hasSpatialCoverage>
								<xsl:attribute name="rdf:resource">
	                				<xsl:value-of
									select="concat($NS, 'Feature/', arco-fn:urify(normalize-space(./AGC)))" />
	                			</xsl:attribute>
							</clvapit:hasSpatialCoverage>
						</xsl:if>
					</rdf:Description>
					<!-- use type as an individual -->
					<xsl:if
						test="./UTU/UTUT and (not(starts-with(lower-case(normalize-space(./UTU/UTUT)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTU/UTUT)), 'n.r')))">
						<xsl:choose>
							<xsl:when
								test="lower-case(normalize-space(./UTU/UTUT))='attuale'" />
							<xsl:when
								test="lower-case(normalize-space(./UTU/UTUT))='precedente'" />
							<xsl:when
								test="lower-case(normalize-space(./UTU/UTUT))='storico'" />
							<xsl:when
								test="lower-case(normalize-space(./UTU/UTUT))='dato non disponibile'" />
							<xsl:when
								test="../UTU/UTUT and not(./UTU/UTUT='.' or ./UTU/UTUT='-' or ./UTU/UTUT='/')">
								<rdf:Description>
									<xsl:attribute name="rdf:about">
                                    <xsl:value-of
										select="concat($NS, 'UseType/', arco-fn:urify(normalize-space(./UTU/UTUT)))" />
                                </xsl:attribute>
									<rdf:type
										rdf:resource="https://w3id.org/arco/ontology/context-description/UseType" />
									<rdfs:label>
										<xsl:value-of
											select="normalize-space(./UTU/UTUT)" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of
											select="normalize-space(./UTU/UTUT)" />
									</l0:name>
								</rdf:Description>
							</xsl:when>
						</xsl:choose>
					</xsl:if>
					<!-- use type specification as an individual -->
					<xsl:if
						test="./UTU/UTUS and (not(starts-with(lower-case(normalize-space(./UTU/UTUS)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTU/UTUS)), 'n.r')))">
						<xsl:choose>
							<xsl:when
								test="lower-case(normalize-space(./UTU/UTUS))='strumentale'" />
							<xsl:when
								test="lower-case(normalize-space(./UTU/UTUS))='strutturale'" />
							<xsl:when
								test="lower-case(normalize-space(./UTU/UTUS))='edilizio'" />
							<xsl:when
								test="lower-case(normalize-space(./UTU/UTUS))='ornamentale'" />
							<xsl:when
								test="lower-case(normalize-space(./UTU/UTUS))='epigrafico'" />
							<xsl:when
								test="lower-case(normalize-space(./UTU/UTUS))='reimpiego'" />
							<xsl:when
								test="../UTU/UTUS and not(./UTU/UTUS='.' or ./UTU/UTUS='-' or ./UTU/UTUS='/')">
								<rdf:Description>
									<xsl:attribute name="rdf:about">
                                    <xsl:value-of
										select="concat($NS, 'UseTypeSpecification/', arco-fn:urify(normalize-space(./UTU/UTUS)))" />
                                </xsl:attribute>
									<rdf:type
										rdf:resource="https://w3id.org/arco/ontology/context-description/UseType" />
									<rdfs:label>
										<xsl:value-of
											select="normalize-space(./UTU/UTUT)" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of
											select="normalize-space(./UTU/UTUT)" />
									</l0:name>
								</rdf:Description>
							</xsl:when>
						</xsl:choose>
					</xsl:if>
					<!-- use circumstance as an individual -->
					<xsl:if
						test="./UTU/UTUO or ./UTO and (not(starts-with(lower-case(normalize-space(./UTU/UTUO)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTU/UTUO)), 'n.r')) and not(starts-with(lower-case(normalize-space(./UTO)), 'n.r')) and not(starts-with(lower-case(normalize-space(./UTO)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                             <xsl:choose>
	                			<xsl:when test="./UTU/UTUO">
	                				<xsl:value-of
								select="concat($NS, 'Circumstance/', arco-fn:urify(normalize-space(./UTU/UTUO)))" />
	                			</xsl:when>
	                			<xsl:otherwise>
	                				<xsl:value-of
								select="concat($NS, 'Circumstance/', arco-fn:urify(normalize-space(./UTO)))" />
	                			</xsl:otherwise>
	                		</xsl:choose>
                           </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
								<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/Circumstance'" />
							</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:choose>
									<xsl:when test="./UTU/UTUO">
										<xsl:value-of
											select="normalize-space(./UTU/UTUO)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="normalize-space(./UTO)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<l0:name>
								<xsl:choose>
									<xsl:when test="./UTU/UTUO">
										<xsl:value-of
											select="normalize-space(./UTU/UTUO)" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="normalize-space(./UTO)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- user as individual -->
					<xsl:for-each select="./UTN">
						<xsl:if test=".">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
			            		<xsl:choose>
			            			<xsl:when test="./UTNN">
			            				<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
			            			</xsl:when>
			            			<xsl:otherwise>
			            				<xsl:value-of
									select="concat($NS, 'Agent/', $itemURI, '-user-', position())" />
			            			</xsl:otherwise>
			            		</xsl:choose>	
		            		</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
										select="'https://w3id.org/italia/onto/l0/Agent'" />
	                            </xsl:attribute>
								</rdf:type>
								<xsl:choose>
									<xsl:when test="./UTNN">
										<rdfs:label>
											<xsl:value-of select="normalize-space(./UTNN)" />
										</rdfs:label>
										<l0:name>
											<xsl:value-of select="normalize-space(./UTNN)" />
										</l0:name>
									</xsl:when>
									<xsl:otherwise>
										<rdfs:label xml:lang="en">
											<xsl:value-of
												select="concat('User of cultural property ', $itemURI)" />
										</rdfs:label>
										<l0:name xml:lang="en">
											<xsl:value-of
												select="concat('User of cultural property ', $itemURI)" />
										</l0:name>
										<rdfs:label xml:lang="it">
											<xsl:value-of
												select="concat('Utente del bene culturale ', $itemURI)" />
										</rdfs:label>
										<l0:name xml:lang="it">
											<xsl:value-of
												select="concat('Utente del bene culturale ', $itemURI)" />
										</l0:name>
									</xsl:otherwise>
								</xsl:choose>
								<xsl:if
									test="./UTNA and (not(starts-with(lower-case(normalize-space(./UTNA)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTNA)), 'n.r')))">
									<arco-cd:agentDate>
										<xsl:value-of select="normalize-space(./UTNA)" />
									</arco-cd:agentDate>
								</xsl:if>
								<xsl:if
									test="./UTNM and (not(starts-with(lower-case(normalize-space(./UTNM)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTNM)), 'n.r')))">
									<arco-cd:hasProfession>
										<xsl:attribute name="rdf:resource">
		            					<xsl:value-of
											select="concat($NS, 'Profession/', arco-fn:urify(normalize-space(./UTNM)))" />
		            				</xsl:attribute>
									</arco-cd:hasProfession>
								</xsl:if>
								<xsl:if
									test="./UTNC and (not(starts-with(lower-case(normalize-space(./UTNC)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTNC)), 'n.r')))">
									<arco-cd:hasUserSocialCategory>
										<xsl:attribute name="rdf:resource">
		            					<xsl:value-of
											select="concat($NS, 'SocialCategory/', arco-fn:urify(normalize-space(./UTNC)))" />
		            				</xsl:attribute>
									</arco-cd:hasUserSocialCategory>
								</xsl:if>
							</rdf:Description>
						</xsl:if>
						<!-- profession of user as an individual -->
						<xsl:if
							test="./UTNM and (not(starts-with(lower-case(normalize-space(./UTNM)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTNM)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
	            				<xsl:value-of
									select="concat($NS, 'Profession/', arco-fn:urify(normalize-space(./UTNM)))" />
	            			</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
	            					<xsl:value-of
										select="'https://w3id.org/arco/ontology/context-description/Profession'" />
	            				</xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(./UTNM)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./UTNM)" />
								</l0:name>
							</rdf:Description>
						</xsl:if>
						<!-- social category of user as an individual -->
						<xsl:if
							test="./UTNC and (not(starts-with(lower-case(normalize-space(./UTNC)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTNC)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
	            				<xsl:value-of
									select="concat($NS, 'UserSocialCategory/', arco-fn:urify(normalize-space(./UTNC)))" />
	            			</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
	            					<xsl:value-of
										select="'https://w3id.org/arco/ontology/context-description/UserSocialCategory'" />
	            				</xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(./UTNC)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./UTNC)" />
								</l0:name>
							</rdf:Description>
						</xsl:if>
					</xsl:for-each>
					<!-- use location AGC as an individual -->
					<xsl:if
						test="./AGC and (not(starts-with(lower-case(normalize-space(./AGC)), 'nr')) and not(starts-with(lower-case(normalize-space(./AGC)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                	<xsl:value-of
								select="concat($NS, 'Feature/', arco-fn:urify(normalize-space(./AGC)))" />
		                </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
								<xsl:value-of
									select="'https://w3id.org/italia/onto/CLV/Feature'" />
								</xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Luogo identificato da: ', normalize-space(./AGC))" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Luogo identificato da: ', normalize-space(./AGC))" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Location identified by: ', normalize-space(./AGC))" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Location identified by: ', normalize-space(./AGC))" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- use location UTL as an individual -->
					<xsl:if
						test="./UTL and (not(starts-with(lower-case(normalize-space(./UTL)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTL)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                	<xsl:value-of
								select="concat($NS, 'Feature/', arco-fn:arcofy(normalize-space(./UTL)))" />
		                </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
								<xsl:value-of
									select="'https://w3id.org/italia/onto/CLV/Feature'" />
							</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./UTL)" />
							</rdfs:label>
							<clvapit:hasAddress>
								<xsl:attribute name="rdf:resource">
	                           <xsl:value-of
									select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(./UTL/UTLP)), normalize-space(lower-case(./UTL/UTLC)), normalize-space(lower-case(./UTL/UTLF)), normalize-space(lower-case(./UTL/UTLL)))))" />
	                        </xsl:attribute>
							</clvapit:hasAddress>
						</rdf:Description>
						<!-- address of use location as an individual -->
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                	<xsl:value-of
								select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(./UTL/UTLP)), normalize-space(lower-case(./UTL/UTLC)), normalize-space(lower-case(./UTL/UTLF)), normalize-space(lower-case(./UTL/UTLL)))))" />
		                </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
								<xsl:value-of
									select="'https://w3id.org/italia/onto/CLV/Address'" />
							</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:for-each select="./UTL/*">
									<xsl:choose>
										<xsl:when test="position() = 1">
											<xsl:value-of select="./text()" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of select="concat(', ', ./text())" />
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</rdfs:label>
							<l0:name>
								<xsl:for-each select="./UTL/*">
									<xsl:choose>
										<xsl:when test="position() = 1">
											<xsl:value-of select="./text()" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of select="concat(', ', ./text())" />
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</l0:name>
							<xsl:if
								test="./UTL/UTLL and (not(starts-with(lower-case(normalize-space(./UTL/UTLL)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTL/UTLL)), 'n.r')))">
								<clvapit:hasAddressArea>
									<xsl:attribute name="rdf:resource">
									<xsl:value-of
										select="concat($NS, 'AddressArea/', arco-fn:urify(normalize-space(./UTL/UTLL)))" />
								</xsl:attribute>
								</clvapit:hasAddressArea>
							</xsl:if>
							<xsl:if
								test="./UTL/UTLF and (not(starts-with(lower-case(normalize-space(./UTL/UTLF)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTL/UTLF)), 'n.r')))">
								<clvapit:hasAddressArea>
									<xsl:attribute name="rdf:resource">
									<xsl:value-of
										select="concat($NS, 'AddressArea/', arco-fn:urify(normalize-space(./UTL/UTLF)))" />
								</xsl:attribute>
								</clvapit:hasAddressArea>
							</xsl:if>
							<xsl:if
								test="./UTL/UTLS and (not(starts-with(lower-case(normalize-space(./UTL/UTLS)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTL/UTLS)), 'n.r')))">
								<clvapit:hasCountry>
									<xsl:attribute name="rdf:resource">
									<xsl:value-of
										select="concat($NS, 'Country/', arco-fn:urify(normalize-space(./UTL/UTLS)))" />
								</xsl:attribute>
								</clvapit:hasCountry>
							</xsl:if>
							<xsl:if
								test="./UTL/UTLR and (not(starts-with(lower-case(normalize-space(./UTL/UTLR)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTL/UTLR)), 'n.r')))">
								<clvapit:hasRegion>
									<xsl:attribute name="rdf:resource">
									<xsl:value-of
										select="concat($NS, 'Region/', arco-fn:urify(normalize-space(./UTL/UTLR)))" />
									</xsl:attribute>
								</clvapit:hasRegion>
							</xsl:if>
							<xsl:if
								test="./UTL/UTLP and (not(starts-with(lower-case(normalize-space(./UTL/UTLP)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTL/UTLP)), 'n.r')))">
								<clvapit:hasProvince>
									<xsl:attribute name="rdf:resource">
									<xsl:value-of
										select="concat($NS, 'Province/', arco-fn:urify(normalize-space(./UTL/UTLP)))" />
								</xsl:attribute>
								</clvapit:hasProvince>
							</xsl:if>
							<xsl:if
								test="./UTL/UTLC and (not(starts-with(lower-case(normalize-space(./UTL/UTLC)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTL/UTLC)), 'n.r')))">
								<clvapit:hasCity>
									<xsl:attribute name="rdf:resource">
									<xsl:value-of
										select="concat($NS, 'City/', arco-fn:urify(normalize-space(./UTL/UTLC)))" />
								</xsl:attribute>
								</clvapit:hasCity>
							</xsl:if>
						</rdf:Description>
						<xsl:if
							test="./UTL/UTLL and (not(starts-with(lower-case(normalize-space(./UTL/UTLL)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTL/UTLL)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                            	<xsl:value-of
									select="concat($NS, 'AddressArea/', arco-fn:urify(normalize-space(./UTL/UTLL)))" />
                       	 	</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                <xsl:value-of
										select="'https://w3id.org/italia/onto/CLV/AddressArea'" />
                            </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:call-template name="CamelCase">
										<xsl:with-param name="text"
											select="normalize-space(./UTL/UTLL)" />
									</xsl:call-template>
								</rdfs:label>
								<l0:name>
									<xsl:call-template name="CamelCase">
										<xsl:with-param name="text"
											select="normalize-space(./UTL/UTLL)" />
									</xsl:call-template>
								</l0:name>
							</rdf:Description>
						</xsl:if>
						<xsl:if
							test="./UTL/UTLF and (not(starts-with(lower-case(normalize-space(./UTL/UTLF)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTL/UTLF)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                            	<xsl:value-of
									select="concat($NS, 'AddressArea/', arco-fn:urify(normalize-space(./UTL/UTLF)))" />
                       	 	</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                <xsl:value-of
										select="'https://w3id.org/italia/onto/CLV/AddressArea'" />
                            </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:call-template name="CamelCase">
										<xsl:with-param name="text"
											select="normalize-space(./UTL/UTLF)" />
									</xsl:call-template>

								</rdfs:label>
								<l0:name>
									<xsl:call-template name="CamelCase">
										<xsl:with-param name="text"
											select="normalize-space(./UTL/UTLF)" />
									</xsl:call-template>

								</l0:name>
							</rdf:Description>
						</xsl:if>
						<xsl:if
							test="./UTL/UTLS and (not(starts-with(lower-case(normalize-space(./UTL/UTLS)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTL/UTLS)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                            	<xsl:value-of
									select="concat($NS, 'Country/', arco-fn:urify(normalize-space(./UTL/UTLS)))" />
                       	 	</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
										select="'https://w3id.org/italia/onto/CLV/Country'" />
	                            </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:call-template name="CamelCase">
										<xsl:with-param name="text"
											select="normalize-space(./UTL/UTLS)" />
									</xsl:call-template>

								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./UTL/UTLS)" />
								</l0:name>
							</rdf:Description>
						</xsl:if>
						<xsl:if
							test="./UTL/UTLR and (not(starts-with(lower-case(normalize-space(./UTL/UTLR)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTL/UTLR)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                            	<xsl:value-of
									select="concat($NS, 'Region/', arco-fn:urify(normalize-space(./UTL/UTLR)))" />
                       	 	</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
										select="'https://w3id.org/italia/onto/CLV/Region'" />
	                            </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:call-template name="CamelCase">
										<xsl:with-param name="text"
											select="normalize-space(./UTL/UTLR)" />
									</xsl:call-template>

								</rdfs:label>
								<l0:name>
									<xsl:call-template name="CamelCase">
										<xsl:with-param name="text"
											select="normalize-space(./UTL/UTLR)" />
									</xsl:call-template>

								</l0:name>
							</rdf:Description>
						</xsl:if>
						<xsl:if
							test="./UTL/UTLP and (not(starts-with(lower-case(normalize-space(./UTL/UTLP)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTL/UTLP)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                            	<xsl:value-of
									select="concat($NS, 'Province/', arco-fn:urify(normalize-space(./UTL/UTLP)))" />
                       	 	</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
										select="'https://w3id.org/italia/onto/CLV/Province'" />
	                            </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(./UTL/UTLP)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./UTL/UTLP)" />
								</l0:name>
							</rdf:Description>
						</xsl:if>
						<xsl:if
							test="./UTL/UTLC and (not(starts-with(lower-case(normalize-space(./UTL/UTLC)), 'nr')) and not(starts-with(lower-case(normalize-space(./UTL/UTLC)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                            	<xsl:value-of
									select="concat($NS, 'City/', arco-fn:urify(normalize-space(./UTL/UTLC)))" />
                       	 	</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
										select="'https://w3id.org/italia/onto/CLV/City'" />
	                            </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:call-template name="CamelCase">
										<xsl:with-param name="text"
											select="normalize-space(./UTL/UTLC)" />
									</xsl:call-template>

								</rdfs:label>
								<l0:name>
									<xsl:call-template name="CamelCase">
										<xsl:with-param name="text"
											select="normalize-space(./UTL/UTLC)" />
									</xsl:call-template>
								</l0:name>
							</rdf:Description>
						</xsl:if>
					</xsl:if>
					<!-- address of location of use as an individual -->
				</xsl:for-each>
			</xsl:if>
			<!-- SMO and PST NORM - Use of cultural property -->
			<xsl:if
				test="record/metadata/schede/*/DA/UTM or record/metadata/schede/*/DA/UTF or record/metadata/schede/*/DA/UTS">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of
						select="concat($NS, 'Use/', $itemURI, '-use')" />
            		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
						<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/Use'" />
					</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Use of cultural property ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Use of cultural property ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Uso del bene culturale ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Uso del bene culturale ', $itemURI)" />
					</l0:name>
					<xsl:if test="record/metadata/schede/*/DA/UTS">
						<tiapit:time>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/DA/UTS)" />
						</tiapit:time>
					</xsl:if>
					<xsl:if test="record/metadata/schede/*/DA/UTF">
						<arco-cd:useFunction>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/DA/UTF)" />
						</arco-cd:useFunction>
					</xsl:if>
					<xsl:if test="record/metadata/schede/*/DA/UTM">
						<arco-cd:useConditions>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/DA/UTM)" />
						</arco-cd:useConditions>
					</xsl:if>
				</rdf:Description>
			</xsl:if>
			<!-- paleopathology survey -->
			<xsl:for-each select="record/metadata/schede/*/PT/PTC">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
						<xsl:value-of
						select="concat($NS, 'PaleopathologySurvey/', $itemURI, '-survey-', position())" />
					</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
	                		<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/PaleopathologySurvey'" />
 	                	</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Paleopathology survey of cultural property ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Paleopathology survey of cultural property ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Indagine su paleopatologia del bene culturale ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Indagine su paleopatologia del bene culturale ', $itemURI)" />
					</l0:name>
					<xsl:if test="./PTCM">
						<arco-cd:hasSurveyMethod>
							<xsl:attribute name="rdf:resource">
	                			<xsl:value-of
								select="concat($NS, 'SurveyMethod/', arco-fn:urify(normalize-space(./PTCM)))" />
 	                		</xsl:attribute>
						</arco-cd:hasSurveyMethod>
					</xsl:if>
					<xsl:if test="./PTCD">
						<arco-cd:diagnosis>
							<xsl:value-of select="normalize-space(./PTCD)" />
						</arco-cd:diagnosis>
					</xsl:if>
					<xsl:if test="./PTCI">
						<arco-cd:refersToSurvey>
							<xsl:value-of select="normalize-space(./PTCI)" />
						</arco-cd:refersToSurvey>
					</xsl:if>
					<xsl:if test="./PTCZ or ./PTCN">
						<arco-core:note>
							<xsl:choose>
								<xsl:when test="./PTCZ and ./PTCN">
									<xsl:value-of
										select="concat(normalize-space(./PTCN), ' ', normalize-space(./PTCZ))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat(normalize-space(./PTCN), normalize-space(./PTCZ))" />
								</xsl:otherwise>
							</xsl:choose>
						</arco-core:note>
					</xsl:if>
				</rdf:Description>
				<xsl:if test="./PTCM">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                			<xsl:value-of
							select="concat($NS, 'SurveyMethod/', arco-fn:urify(normalize-space(./PTCM)))" />
	                	</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
		                		<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/SurveyMethod'" />
	 	                	</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./PTCM)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./PTCM)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- A and PG - Use of cultural property -->
			<!-- USO -->
			<xsl:for-each select="record/metadata/schede/*/US/USO">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of
						select="concat($NS, 'Use/', $itemURI, '-historical-use-', position())" />
            		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/Use'" />
            			</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Historical use ', position(), ' of cultural property ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Historical use ', position(), ' of cultural property ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Uso storico ', position(), ' del bene culturale ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Uso storico ', position(), ' del bene culturale ', $itemURI)" />
					</l0:name>
					<xsl:if
						test="./USOD and (not(starts-with(lower-case(normalize-space(./USOD)), 'nr')) and not(starts-with(lower-case(normalize-space(./USOD)), 'n.r')))">
						<arco-cd:useFunction>
							<xsl:value-of select="normalize-space(./USOD)" />
						</arco-cd:useFunction>
					</xsl:if>
					<xsl:if
						test="./USOC and (not(starts-with(lower-case(normalize-space(./USOC)), 'nr')) and not(starts-with(lower-case(normalize-space(./USOC)), 'n.r')))">
						<tiapit:time>
							<xsl:value-of select="normalize-space(./USOC)" />
						</tiapit:time>
					</xsl:if>
					<arco-cd:hasUseType>
						<xsl:attribute name="rdf:resource">
		                       <xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/HistoricalUse'" />
							</xsl:attribute>
					</arco-cd:hasUseType>
				</rdf:Description>
			</xsl:for-each>
			<!-- USA -->
			<xsl:for-each select="record/metadata/schede/*/US/USA">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of
						select="concat($NS, 'Use/', $itemURI, '-current-use-', position())" />
            		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/Use'" />
            			</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Current use ', position(), ' of cultural property ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Current use ', position(), ' of cultural property ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Uso attuale ', position(), ' del bene culturale ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Uso attuale ', position(), ' del bene culturale ', $itemURI)" />
					</l0:name>
					<xsl:if
						test="./USAD and (not(starts-with(lower-case(normalize-space(./USAD)), 'nr')) and not(starts-with(lower-case(normalize-space(./USAD)), 'n.r')))">
						<arco-cd:useFunction>
							<xsl:value-of select="normalize-space(./USAD)" />
						</arco-cd:useFunction>
					</xsl:if>
					<arco-cd:hasUseType>
						<xsl:attribute name="rdf:resource">
		                       <xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/CurrentUse'" />
							</xsl:attribute>
					</arco-cd:hasUseType>
				</rdf:Description>
			</xsl:for-each>
			<!-- obverse of coin -->
			<xsl:if
				test="record/metadata/schede/NU/DA/DES/DESA or record/metadata/schede/NU/DA/DES/DESL or record/metadata/schede/NU/DA/DES/DESN or record/metadata/schede/NU/DA/DES/DESF">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
	                				<xsl:value-of
						select="concat($NS, 'CulturalPropertyPart/', $itemURI, '-obverse')" />
	                	</xsl:attribute>
					<rdf:type
						rdf:resource="https://w3id.org/arco/ontology/arco/CulturalPropertyPart" />
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Dritto del bene numismatico ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Dritto del bene numismatico ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Obverse of numismatic property ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Obverse of numismatic property ', $itemURI)" />
					</l0:name>
					<xsl:if test="record/metadata/schede/NU/DA/DES/DESA">
						<arco-dd:hasAffixedElement>
							<xsl:attribute name="rdf:resource">
									<xsl:value-of
								select="concat($NS, 'CoinDesign/', $itemURI, '-obverse-design')" />
								</xsl:attribute>
						</arco-dd:hasAffixedElement>
					</xsl:if>
					<xsl:if
						test="record/metadata/schede/NU/DA/DES/DESN or record/metadata/schede/NU/DA/DES/DESF or record/metadata/schede/NU/DA/DES/DESL">
						<arco-dd:hasAffixedElement>
							<xsl:attribute name="rdf:resource">
									<xsl:value-of
								select="concat($NS, 'CoinLegend/', $itemURI, '-obverse-legend')" />
								</xsl:attribute>
						</arco-dd:hasAffixedElement>
					</xsl:if>
				</rdf:Description>
			</xsl:if>
			<!-- coin design -->
			<xsl:if test="record/metadata/schede/NU/DA/DES/DESA">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
								<xsl:value-of
						select="concat($NS, 'CoinDesign/', $itemURI, '-obverse-design')" />
							</xsl:attribute>
					<rdf:type
						rdf:resource="https://w3id.org/arco/ontology/denotative-description/CoinDesign" />
					<arco-core:description>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/NU/DA/DES/DESA)" />
					</arco-core:description>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Raffigurazione presente sul dritto del bene numismatico ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Raffigurazione presente sul dritto del bene numismatico ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Design on obverse of numismatic property ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Design on obverse of numismatic property ', $itemURI)" />
					</l0:name>
				</rdf:Description>
			</xsl:if>
			<!-- coin legend -->
			<xsl:if
				test="record/metadata/schede/NU/DA/DES/DESN or record/metadata/schede/NU/DA/DES/DESF or record/metadata/schede/NU/DA/DES/DESL">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
								<xsl:value-of
						select="concat($NS, 'CoinLegend/', $itemURI, '-obverse-legend')" />
							</xsl:attribute>
					<rdf:type
						rdf:resource="https://w3id.org/arco/ontology/denotative-description/CoinLegend" />
					<xsl:if test="record/metadata/schede/NU/DA/DES/DESL">
						<arco-dd:transcript>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/NU/DA/DES/DESL)" />
						</arco-dd:transcript>
					</xsl:if>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Legenda presente sul dritto del bene numismatico ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Legenda presente sul dritto del bene numismatico ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Legend on obverse of numismatic property ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Legend on obverse of numismatic property ', $itemURI)" />
					</l0:name>
					<xsl:if
						test="record/metadata/schede/NU/DA/DES/DESF and (not(starts-with(lower-case(normalize-space(record/metadata/schede/NU/DA/DES/DESF)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/NU/DA/DES/DESF)), 'n.r')))">
						<arco-dd:hasWritingSystem>
							<xsl:attribute name="rdf:resource">
										<xsl:value-of
								select="concat($NS, 'WritingSystem/', arco-fn:urify(normalize-space(record/metadata/schede/NU/DA/DES/DESF)))" />
									</xsl:attribute>
						</arco-dd:hasWritingSystem>
					</xsl:if>
					<xsl:if
						test="record/metadata/schede/NU/DA/DES/DESN and (not(starts-with(lower-case(normalize-space(record/metadata/schede/NU/DA/DES/DESN)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/NU/DA/DES/DESN)), 'n.r')))">
						<language:hasLanguage>
							<xsl:attribute name="rdf:resource">
										<xsl:value-of
								select="concat($NS, 'Language/', arco-fn:urify(normalize-space(record/metadata/schede/NU/DA/DES/DESN)))" />
									</xsl:attribute>
						</language:hasLanguage>
					</xsl:if>
				</rdf:Description>
				<xsl:if
					test="record/metadata/schede/NU/DA/DES/DESF and (not(starts-with(lower-case(normalize-space(record/metadata/schede/NU/DA/DES/DESF)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/NU/DA/DES/DESF)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
		                                <xsl:value-of
							select="concat($NS, 'WritingSystem/', arco-fn:urify(normalize-space(record/metadata/schede/NU/DA/DES/DESF)))" />
		                            </xsl:attribute>
						<rdf:type
							rdf:resource="https://w3id.org/arco/ontology/denotative-description/WritingSystem" />
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/NU/DA/DES/DESF)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/NU/DA/DES/DESF)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<xsl:if
					test="record/metadata/schede/NU/DA/DES/DESN and (not(starts-with(lower-case(normalize-space(record/metadata/schede/NU/DA/DES/DESN)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/NU/DA/DES/DESN)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	                                <xsl:value-of
							select="concat($NS, 'Language/', arco-fn:urify(normalize-space(record/metadata/schede/NU/DA/DES/DESN)))" />
	                            </xsl:attribute>
						<rdf:type
							rdf:resource="https://w3id.org/italia/onto/Language/Language" />
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/NU/DA/DES/DESN)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/NU/DA/DES/DESN)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
			</xsl:if>
			<!-- reverse of coin -->
			<xsl:if
				test="record/metadata/schede/NU/DA/DES/DESM or record/metadata/schede/NU/DA/DES/DESG or record/metadata/schede/NU/DA/DES/DESR or record/metadata/schede/NU/DA/DES/DEST">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
	                				<xsl:value-of
						select="concat($NS, 'CulturalPropertyPart/', $itemURI, '-reverse')" />
	                	</xsl:attribute>
					<rdf:type
						rdf:resource="https://w3id.org/arco/ontology/arco/CulturalPropertyPart" />
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Rovescio del bene numismatico ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Rovescio del bene numismatico ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Reverse of numismatic property ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Reverse of numismatic property ', $itemURI)" />
					</l0:name>
					<xsl:if test="record/metadata/schede/NU/DA/DES/DESM">
						<arco-dd:hasAffixedElement>
							<xsl:attribute name="rdf:resource">
									<xsl:value-of
								select="concat($NS, 'CoinDesign/', $itemURI, '-reverse-design')" />
								</xsl:attribute>
						</arco-dd:hasAffixedElement>
					</xsl:if>
					<xsl:if
						test="record/metadata/schede/NU/DA/DES/DESG or record/metadata/schede/NU/DA/DES/DESR or record/metadata/schede/NU/DA/DES/DEST">
						<arco-dd:hasAffixedElement>
							<xsl:attribute name="rdf:resource">
									<xsl:value-of
								select="concat($NS, 'CoinLegend/', $itemURI, '-reverse-legend')" />
								</xsl:attribute>
						</arco-dd:hasAffixedElement>
					</xsl:if>
				</rdf:Description>
			</xsl:if>
			<!-- coin design -->
			<xsl:if test="record/metadata/schede/NU/DA/DES/DESM">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
								<xsl:value-of
						select="concat($NS, 'CoinDesign/', $itemURI, '-reverse-design')" />
							</xsl:attribute>
					<rdf:type
						rdf:resource="https://w3id.org/arco/ontology/denotative-description/CoinDesign" />
					<arco-core:description>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/NU/DA/DES/DESM)" />
					</arco-core:description>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Raffigurazione presente sul rovescio del bene numismatico ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Raffigurazione presente sul rovescio del bene numismatico ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Design on reverse of numismatic property ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Design on reverse of numismatic property ', $itemURI)" />
					</l0:name>
				</rdf:Description>
			</xsl:if>
			<!-- coin legend -->
			<xsl:if
				test="record/metadata/schede/NU/DA/DES/DESG or record/metadata/schede/NU/DA/DES/DESR or record/metadata/schede/NU/DA/DES/DEST">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
								<xsl:value-of
						select="concat($NS, 'CoinLegend/', $itemURI, '-reverse-legend')" />
							</xsl:attribute>
					<rdf:type
						rdf:resource="https://w3id.org/arco/ontology/denotative-description/CoinLegend" />
					<xsl:if test="record/metadata/schede/NU/DA/DES/DESG">
						<arco-dd:transcript>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/NU/DA/DES/DESG)" />
						</arco-dd:transcript>
					</xsl:if>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Legenda presente sul rovescio del bene numismatico ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Legenda presente sul rovescio del bene numismatico ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Legend on reverse of numismatic property ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Legend on reverse of numismatic property ', $itemURI)" />
					</l0:name>
					<xsl:if
						test="record/metadata/schede/NU/DA/DES/DEST and (not(starts-with(lower-case(normalize-space(record/metadata/schede/NU/DA/DES/DEST)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/NU/DA/DES/DEST)), 'n.r')))">
						<arco-dd:hasWritingSystem>
							<xsl:attribute name="rdf:resource">
										<xsl:value-of
								select="concat($NS, 'WritingSystem/', arco-fn:urify(normalize-space(record/metadata/schede/NU/DA/DES/DEST)))" />
									</xsl:attribute>
						</arco-dd:hasWritingSystem>
					</xsl:if>
					<xsl:if
						test="record/metadata/schede/NU/DA/DES/DESR and (not(starts-with(lower-case(normalize-space(record/metadata/schede/NU/DA/DES/DESR)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/NU/DA/DES/DESR)), 'n.r')))">
						<language:hasLanguage>
							<xsl:attribute name="rdf:resource">
										<xsl:value-of
								select="concat($NS, 'Language/', arco-fn:urify(normalize-space(record/metadata/schede/NU/DA/DES/DESR)))" />
									</xsl:attribute>
						</language:hasLanguage>
					</xsl:if>
				</rdf:Description>
				<xsl:if
					test="record/metadata/schede/NU/DA/DES/DEST and (not(starts-with(lower-case(normalize-space(record/metadata/schede/NU/DA/DES/DEST)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/NU/DA/DES/DEST)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
		                                <xsl:value-of
							select="concat($NS, 'WritingSystem/', arco-fn:urify(normalize-space(record/metadata/schede/NU/DA/DES/DEST)))" />
		                            </xsl:attribute>
						<rdf:type
							rdf:resource="https://w3id.org/arco/ontology/denotative-description/WritingSystem" />
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/NU/DA/DES/DEST)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/NU/DA/DES/DEST)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<xsl:if
					test="record/metadata/schede/NU/DA/DES/DESR and (not(starts-with(lower-case(normalize-space(record/metadata/schede/NU/DA/DES/DESR)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/NU/DA/DES/DESR)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	                                <xsl:value-of
							select="concat($NS, 'Language/', arco-fn:urify(normalize-space(record/metadata/schede/NU/DA/DES/DESR)))" />
	                            </xsl:attribute>
						<rdf:type
							rdf:resource="https://w3id.org/italia/onto/Language/Language" />
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/NU/DA/DES/DESR)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/NU/DA/DES/DESR)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
			</xsl:if>
			<!-- parts of anthropological material -->
			<xsl:for-each select="record/metadata/schede/AT/EL/ELE">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
	                				<xsl:value-of
						select="concat($NS, 'CulturalPropertyPart/', $itemURI, '-part-', arco-fn:urify(normalize-space(./ELEE)))" />
	                	</xsl:attribute>
					<rdf:type
						rdf:resource="https://w3id.org/arco/ontology/arco/CulturalPropertyPart" />
					<rdfs:label>
						<xsl:value-of select="normalize-space(./ELEE)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of select="normalize-space(./ELEE)" />
					</l0:name>
					<xsl:if
						test="./ELEM and (not(starts-with(lower-case(normalize-space(./ELEM)), 'nr')) and not(starts-with(lower-case(normalize-space(./ELEM)), 'n.r')) and not(./ELEM='-'))">
						<arco-arco:numberOfCulturalPropertyParts>
							<xsl:value-of select="normalize-space(./ELEM)" />
						</arco-arco:numberOfCulturalPropertyParts>
					</xsl:if>
					<xsl:if
						test="./ELES and (not(starts-with(lower-case(normalize-space(./ELES)), 'nr')) and not(starts-with(lower-case(normalize-space(./ELES)), 'n.r')) and not(./ELES='-'))">
						<arco-core:specifications>
							<xsl:value-of select="normalize-space(./ELES)" />
						</arco-core:specifications>
					</xsl:if>
					<xsl:choose>
						<xsl:when test="./ELEN and ./ELEZ">
							<arco-core:note>
								<xsl:value-of
									select="concat(normalize-space(./ELEN), ' - Documentazione: ', normalize-space(./ELEZ))" />
							</arco-core:note>
						</xsl:when>
						<xsl:when test="./ELEZ">
							<arco-core:note>
								<xsl:value-of
									select="concat('Documentazione: ', normalize-space(./ELEZ))" />
							</arco-core:note>
						</xsl:when>
						<xsl:when test="./ELEN">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./ELEN)" />
							</arco-core:note>
						</xsl:when>
					</xsl:choose>
				</rdf:Description>
			</xsl:for-each>
			<!-- sex estimate -->
			<xsl:if test="record/metadata/schede/AT/DA/STS">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                			<xsl:value-of
						select="concat($NS, 'SexInterpretation/', $itemURI)" />
                		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                				<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/SexInterpretation'" />
                			</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Stima del sesso della morte del bene culturale ', $itemURI, ': ', normalize-space(record/metadata/schede/AT/DA/STS/STSS))" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Stima del sesso del bene culturale ', $itemURI, ': ', normalize-space(record/metadata/schede/AT/DA/STS/STSS))" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Sex interpretation of cultural property ', $itemURI, ': ', normalize-space(record/metadata/schede/AT/DA/STS/STSS))" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Sex interpretation of cultural property ', $itemURI, ': ', normalize-space(record/metadata/schede/AT/DA/STS/STSS))" />
					</l0:name>
					<arco-cd:sex>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/AT/DA/STS/STSS)" />
					</arco-cd:sex>
					<xsl:if
						test="record/metadata/schede/AT/DA/STS/STSC and (not(starts-with(lower-case(normalize-space(record/metadata/schede/AT/DA/STS/STSC)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/AT/DA/STS/STSC)), 'n.r')) and not(record/metadata/schede/AT/DA/STS/STSC='-'))">
						<arco-cd:hasInterpretationCriterion>
							<xsl:attribute name="rdf:resource">
	                        			<xsl:value-of
								select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(record/metadata/schede/AT/DA/STS/STSC)))" />
	                        		</xsl:attribute>
						</arco-cd:hasInterpretationCriterion>
					</xsl:if>
				</rdf:Description>
				<xsl:if
					test="record/metadata/schede/AT/DA/STS/STSC and (not(starts-with(lower-case(normalize-space(record/metadata/schede/AT/DA/STS/STSC)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/AT/DA/STS/STSC)), 'n.r')) and not(record/metadata/schede/AT/DA/STS/STSC='-'))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                				<xsl:value-of
							select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(record/metadata/schede/AT/DA/STS/STSC)))" />
                			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/InterpretationCriterion'" />
                        		</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/AT/DA/STS/STSC)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/AT/DA/STS/STSC)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
			</xsl:if>
			<!-- age of death estimate -->
			<xsl:if test="record/metadata/schede/AT/DA/SEM">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                			<xsl:value-of
						select="concat($NS, 'AgeOfDeathInterpretation/', $itemURI)" />
                		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                				<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/AgeOfDeathInterpretation'" />
                			</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Stima dell''età della morte del bene culturale ', $itemURI, ': ', normalize-space(record/metadata/schede/AT/DA/SEM/SEME))" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Stima dell''età della morte del bene culturale ', $itemURI, ': ', normalize-space(record/metadata/schede/AT/DA/SEM/SEME))" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Age of death interpretation of cultural property ', $itemURI, ': ', normalize-space(record/metadata/schede/AT/DA/SEM/SEME))" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Age of death interpretation of cultural property ', $itemURI, ': ', normalize-space(record/metadata/schede/AT/DA/SEM/SEME))" />
					</l0:name>
					<arco-cd:ageOfDeath>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/AT/DA/SEM/SEME)" />
					</arco-cd:ageOfDeath>
					<xsl:if
						test="record/metadata/schede/AT/DA/SEM/SEMC and (not(starts-with(lower-case(normalize-space(record/metadata/schede/AT/DA/SEM/SEMC)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/AT/DA/SEM/SEMC)), 'n.r')) and not(record/metadata/schede/AT/DA/SEM/SEMC='-'))">
						<arco-cd:hasInterpretationCriterion>
							<xsl:attribute name="rdf:resource">
	                        			<xsl:value-of
								select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(record/metadata/schede/AT/DA/SEM/SEMC)))" />
	                        		</xsl:attribute>
						</arco-cd:hasInterpretationCriterion>
					</xsl:if>
				</rdf:Description>
				<xsl:if
					test="record/metadata/schede/AT/DA/SEM/SEMC and (not(starts-with(lower-case(normalize-space(record/metadata/schede/AT/DA/SEM/SEMC)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/AT/DA/SEM/SEMC)), 'n.r')) and not(record/metadata/schede/AT/DA/SEM/SEMC='-'))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                				<xsl:value-of
							select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(record/metadata/schede/AT/DA/SEM/SEMC)))" />
                			</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/InterpretationCriterion'" />
                        		</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/AT/DA/SEM/SEMC)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/AT/DA/SEM/SEMC)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
			</xsl:if>
			<!-- material of cultural property (version 4.00) and VeAC as an individual -->
			<xsl:if
				test="not(starts-with(lower-case(normalize-space(record/metadata/schede/*/MT/MTC/MTCM)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/VeAC/MT/MTC/MTCF)), 'n.r')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/VeAC/MT/MTC/MTCF)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/MT/MTC/MTCM)), 'n.r'))">
				<xsl:if
					test="(not(record/metadata/schede/*/MT/MTC/MTCP) or record/metadata/schede/*/MT/MTC/MTCP='intero bene' or record/metadata/schede/*/MT/MTC/MTCP='integrale' or record/metadata/schede/*/MT/MTC/MTCP='tutta' or record/metadata/schede/*/MT/MTC/MTCP='totale') or (starts-with(lower-case(normalize-space(record/metadata/schede/*/MT/MTC/MTCP)), 'nr')) or (starts-with(lower-case(normalize-space(record/metadata/schede/*/MT/MTC/MTCP)), 'n.r')) or (starts-with(lower-case(normalize-space(record/metadata/schede/*/MT/MTC/MTCP)), 'intero')) or (starts-with(lower-case(normalize-space(record/metadata/schede/*/MT/MTC/MTCP)), 'intera')) or (starts-with(lower-case(normalize-space(record/metadata/schede/*/MT/MTC/MTCP)), 'esemplar'))">
					<xsl:if
						test="record/metadata/schede/*/MT/MTC/MTCM or record/metadata/schede/VeAC/MT/MTC/MTCF">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
            			<xsl:value-of
								select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI)" />
            		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
						<xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/CulturalEntityTechnicalStatus'" />
					</xsl:attribute>
							</rdf:type>
							<xsl:choose>
								<xsl:when test="record/metadata/schede/*/MT/MTC/MTCM">
									<rdfs:label xml:lang="it">
										<xsl:value-of
											select="concat('Stato tecnico del bene culturale ', $itemURI)" />
									</rdfs:label>
									<l0:name xml:lang="it">
										<xsl:value-of
											select="concat('Stato tecnico del bene culturale ', $itemURI)" />
									</l0:name>
									<rdfs:label xml:lang="en">
										<xsl:value-of
											select="concat('Technical status of cultural property ', $itemURI)" />
									</rdfs:label>
									<l0:name xml:lang="en">
										<xsl:value-of
											select="concat('Technical status of cultural property ', $itemURI)" />
									</l0:name>
									<xsl:if test="record/metadata/schede/*/MT/MTC/MTCS">
										<arco-core:note>
											<xsl:value-of
												select="record/metadata/schede/*/MT/MTC/MTCS" />
										</arco-core:note>
									</xsl:if>
								</xsl:when>
								<xsl:when
									test="record/metadata/schede/VeAC/MT/MTC/MTCF">
									<rdfs:label xml:lang="it">
										<xsl:value-of
											select="concat('Stato tecnico del bene culturale ', $itemURI)" />
									</rdfs:label>
									<l0:name xml:lang="it">
										<xsl:value-of
											select="concat('Stato tecnico del bene culturale ', $itemURI)" />
									</l0:name>
									<rdfs:label xml:lang="en">
										<xsl:value-of
											select="concat('Technical status of cultural property ', $itemURI)" />
									</rdfs:label>
									<l0:name xml:lang="en">
										<xsl:value-of
											select="concat('Technical status of cultural property ', $itemURI)" />
									</l0:name>
								</xsl:when>
							</xsl:choose>
							<arco-dd:includesTechnicalCharacteristic>
								<xsl:attribute name="rdf:resource">
            				<xsl:choose>
            					<xsl:when
									test="record/metadata/schede/*/MT/MTC/MTCM">
            						<xsl:value-of
									select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/*/MT/MTC/MTCM)))" />
            					</xsl:when>
            					<xsl:when
									test="record/metadata/schede/VeAC/MT/MTC/MTCF">
            						<xsl:value-of
									select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/VeAC/MT/MTC/MTCF)))" />
            					</xsl:when>
            				</xsl:choose>
            			</xsl:attribute>
							</arco-dd:includesTechnicalCharacteristic>
						</rdf:Description>
						<!-- Technical characteristic as an individual -->
						<rdf:Description>
							<xsl:attribute name="rdf:about">
            			<xsl:choose>
            				<xsl:when
								test="record/metadata/schede/*/MT/MTC/MTCM">
            					<xsl:value-of
								select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/*/MT/MTC/MTCM)))" />
            				</xsl:when>
            				<xsl:when
								test="record/metadata/schede/VeAC/MT/MTC/MTCF">
            					<xsl:value-of
								select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/VeAC/MT/MTC/MTCF)))" />
            				</xsl:when>
            			</xsl:choose>
            		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
							<xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/TechnicalCharacteristic'" />
						</xsl:attribute>
							</rdf:type>
							<xsl:choose>
								<xsl:when test="record/metadata/schede/*/MT/MTC/MTCM">
									<rdfs:label>
										<xsl:value-of
											select="normalize-space(record/metadata/schede/*/MT/MTC/MTCM)" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of
											select="normalize-space(record/metadata/schede/*/MT/MTC/MTCM)" />
									</l0:name>
								</xsl:when>
								<xsl:when
									test="record/metadata/schede/VeAC/MT/MTC/MTCF">
									<rdfs:label>
										<xsl:value-of
											select="normalize-space(record/metadata/schede/VeAC/MT/MTC/MTCF)" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of
											select="normalize-space(record/metadata/schede/VeAC/MT/MTC/MTCF)" />
									</l0:name>
								</xsl:when>
							</xsl:choose>
							<arco-dd:isCharacteristicClassifiedBy>
								<xsl:attribute name="rdf:resource">
            				<xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/Material'" />
            			</xsl:attribute>
							</arco-dd:isCharacteristicClassifiedBy>
						</rdf:Description>
					</xsl:if>
				</xsl:if>
			</xsl:if>
			<!-- technique of cultural property (version 4.00) as an individual -->
			<xsl:if
				test="not(starts-with(lower-case(normalize-space(record/metadata/schede/*/MT/MTC/MTCT)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/MT/MTC/MTCT)), 'n.r'))">
				<xsl:if
					test="(not(record/metadata/schede/*/MT/MTC/MTCP) or record/metadata/schede/*/MT/MTC/MTCP='intero bene' or record/metadata/schede/*/MT/MTC/MTCP='integrale' or record/metadata/schede/*/MT/MTC/MTCP='tutta' or record/metadata/schede/*/MT/MTC/MTCP='totale') or (starts-with(lower-case(normalize-space(record/metadata/schede/*/MT/MTC/MTCP)), 'nr')) or (starts-with(lower-case(normalize-space(record/metadata/schede/*/MT/MTC/MTCP)), 'n.r')) or (starts-with(lower-case(normalize-space(record/metadata/schede/*/MT/MTC/MTCP)), 'intero')) or (starts-with(lower-case(normalize-space(record/metadata/schede/*/MT/MTC/MTCP)), 'intera')) or (starts-with(lower-case(normalize-space(record/metadata/schede/*/MT/MTC/MTCP)), 'esemplar'))">
					<xsl:if test="record/metadata/schede/*/MT/MTC/MTCT">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
            			<xsl:value-of
								select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI)" />
            		</xsl:attribute>
							<arco-dd:includesTechnicalCharacteristic>
								<xsl:attribute name="rdf:resource">
            				<xsl:value-of
									select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/*/MT/MTC/MTCT)))" />
            			</xsl:attribute>
							</arco-dd:includesTechnicalCharacteristic>

						</rdf:Description>
						<!-- Technical detail as an individual -->
						<rdf:Description>
							<xsl:attribute name="rdf:about">
            			<xsl:value-of
								select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/*/MT/MTC/MTCT)))" />
            		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
							<xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/TechnicalCharacteristic'" />
						</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of
									select="normalize-space(record/metadata/schede/*/MT/MTC/MTCT)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of
									select="normalize-space(record/metadata/schede/*/MT/MTC/MTCT)" />
							</l0:name>
							<arco-dd:isCharacteristicClassifiedBy>
								<xsl:attribute name="rdf:resource">
            				<xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/Technique'" />
            			</xsl:attribute>
							</arco-dd:isCharacteristicClassifiedBy>
						</rdf:Description>
					</xsl:if>
				</xsl:if>
				<!-- materialOrTechnique of cultural property (previous versions) as 
					an individual -->
				<xsl:if
					test="not(record/metadata/schede/*/MT/MTC/*) and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/MT/MTC)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/MT/MTC)), 'n.r')))">
					<xsl:if test="record/metadata/schede/*/MT/MTC">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
            			<xsl:value-of
								select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI)" />
            		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
							<xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/CulturalEntityTechnicalStatus'" />
						</xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Stato tecnico del bene culturale ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Stato tecnico del bene culturale ', $itemURI)" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Technical status of cultural property ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Technical status of cultural property ', $itemURI)" />
							</l0:name>
							<arco-dd:includesTechnicalCharacteristic>
								<xsl:attribute name="rdf:resource">
            				<xsl:value-of
									select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/*/MT/MTC)))" />
            			</xsl:attribute>
							</arco-dd:includesTechnicalCharacteristic>


							<!-- Mapping with the thesaurus of find materials -->
							<xsl:variable name="material-method-ra1">
								<xsl:if
									test="$sheetType='RA' and starts-with($sheetVersion, '3.00')">
									<xsl:value-of
										select="arco-fn:mtc-definition(normalize-space(.))" />
								</xsl:if>
							</xsl:variable>
							<xsl:variable name="material-method-ra2">
								<xsl:if
									test="$sheetType='RA' and starts-with($sheetVersion, '3.00')">
									<xsl:value-of
										select="arco-fn:mtc2-definition(normalize-space(.))" />
								</xsl:if>
							</xsl:variable>
							<xsl:if test="$material-method-ra1 != ''">
								<skos:relatedMatch>
									<xsl:attribute name="rdf:resource">
									<xsl:value-of select="$material-method-ra1" />
								</xsl:attribute>
								</skos:relatedMatch>
							</xsl:if>
							<xsl:if test="$material-method-ra2 != ''">
								<skos:relatedMatch>
									<xsl:attribute name="rdf:resource">
									<xsl:value-of select="$material-method-ra2" />
								</xsl:attribute>
								</skos:relatedMatch>
							</xsl:if>
						</rdf:Description>
						<!-- Technical detail as an individual -->
						<rdf:Description>
							<xsl:attribute name="rdf:about">
            			<xsl:value-of
								select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/*/MT/MTC)))" />
            		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
							<xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/TechnicalCharacteristic'" />
						</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of
									select="normalize-space(record/metadata/schede/*/MT/MTC)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of
									select="normalize-space(record/metadata/schede/*/MT/MTC)" />
							</l0:name>
							<arco-dd:isCharacteristicClassifiedBy>
								<xsl:attribute name="rdf:resource">
            				<xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/MaterialOrTechnique'" />
            			</xsl:attribute>
							</arco-dd:isCharacteristicClassifiedBy>
						</rdf:Description>
					</xsl:if>
				</xsl:if>
			</xsl:if>
			<!-- materialOrTechnique of cultural property (OAC) as an individual -->
			<xsl:if
				test="not(starts-with(lower-case(normalize-space(record/metadata/schede/OAC/MT/MTC/MTCI)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/OAC/MT/MTC/MTCI)), 'n.r'))">
				<xsl:if test="record/metadata/schede/OAC/MT/MTC/MTCI">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI)" />
            		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
							<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/CulturalEntityTechnicalStatus'" />
						</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Stato tecnico del bene culturale ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Stato tecnico del bene culturale ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Technical status of cultural property ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Technical status of cultural property ', $itemURI)" />
						</l0:name>
						<arco-dd:includesTechnicalCharacteristic>
							<xsl:attribute name="rdf:resource">
            				<xsl:value-of
								select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/OAC/MT/MTC/MTCI)))" />
            			</xsl:attribute>
						</arco-dd:includesTechnicalCharacteristic>
					</rdf:Description>
					<!-- Technical detail as an individual -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/OAC/MT/MTC/MTCI)))" />
            		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
							<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/TechnicalCharacteristic'" />
						</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/OAC/MT/MTC/MTCI)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/OAC/MT/MTC/MTCI)" />
						</l0:name>
						<arco-dd:isCharacteristicClassifiedBy>
							<xsl:attribute name="rdf:resource">
            				<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/MaterialOrTechnique'" />
            			</xsl:attribute>
						</arco-dd:isCharacteristicClassifiedBy>
					</rdf:Description>
				</xsl:if>
			</xsl:if>
			<!-- shape of cultural property as an individual -->
			<xsl:if
				test="record/metadata/schede/*/MT/FRM and not(record/metadata/schede/F/MT/FRM)">
				<xsl:if
					test="not(starts-with(lower-case(normalize-space(record/metadata/schede/*/MT/FRM)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/MT/FRM)), 'n.r'))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI)" />
            		</xsl:attribute>
						<arco-dd:includesTechnicalCharacteristic>
							<xsl:attribute name="rdf:resource">
            				<xsl:value-of
								select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/*/MT/FRM)))" />
            			</xsl:attribute>
						</arco-dd:includesTechnicalCharacteristic>

					</rdf:Description>
					<!-- Technical detail as an individual -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/*/MT/FRM)))" />
            		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
							<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/TechnicalCharacteristic'" />
						</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/MT/FRM)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/MT/FRM)" />
						</l0:name>
						<arco-dd:isCharacteristicClassifiedBy>
							<xsl:attribute name="rdf:resource">
            				<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/Shape'" />
            			</xsl:attribute>
						</arco-dd:isCharacteristicClassifiedBy>
					</rdf:Description>
				</xsl:if>
			</xsl:if>
			<!-- filigree of cultural property as an individual -->
			<xsl:if
				test="not(starts-with(lower-case(normalize-space(record/metadata/schede/*/MT/FIL)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/MT/FIL)), 'n.r'))">
				<xsl:if test="record/metadata/schede/*/MT/FIL">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI)" />
            		</xsl:attribute>
						<arco-dd:includesTechnicalCharacteristic>
							<xsl:attribute name="rdf:resource">
            				<xsl:value-of
								select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/*/MT/FIL)))" />
            			</xsl:attribute>
						</arco-dd:includesTechnicalCharacteristic>

					</rdf:Description>
					<!-- Technical detail as an individual -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/*/MT/FIL)))" />
            		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
							<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/TechnicalCharacteristic'" />
						</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/MT/FIL)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/MT/FIL)" />
						</l0:name>
						<arco-dd:isCharacteristicClassifiedBy>
							<xsl:attribute name="rdf:resource">
            				<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/Filigree'" />
            			</xsl:attribute>
						</arco-dd:isCharacteristicClassifiedBy>
					</rdf:Description>
				</xsl:if>
			</xsl:if>
			<!-- file format of photograph (F) as an individual -->
			<xsl:if
				test="not(starts-with(lower-case(normalize-space(record/metadata/schede/F/MT/FVC/FVCF)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/MT/FVC/FVCF)), 'n.r'))">
				<xsl:if test="record/metadata/schede/F/MT/FVC/FVCF">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI)" />
            		</xsl:attribute>

						<arco-dd:includesTechnicalCharacteristic>
							<xsl:attribute name="rdf:resource">
            				<xsl:value-of
								select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/F/MT/FVC/FVCF)))" />
            			</xsl:attribute>
						</arco-dd:includesTechnicalCharacteristic>

					</rdf:Description>
					<!-- Technical detail as an individual -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/F/MT/FVC/FVCF)))" />
            		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
							<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/TechnicalCharacteristic'" />
						</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/MT/FVC/FVCF)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/MT/FVC/FVCF)" />
						</l0:name>
						<arco-dd:isCharacteristicClassifiedBy>
							<xsl:attribute name="rdf:resource">
            				<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/FileFormat'" />
            			</xsl:attribute>
						</arco-dd:isCharacteristicClassifiedBy>
					</rdf:Description>
				</xsl:if>
			</xsl:if>
			<!-- photo size of photograph (F) as an individual -->
			<xsl:if
				test="not(starts-with(lower-case(normalize-space(record/metadata/schede/F/MT/FRM)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/MT/FRM)), 'n.r'))">
				<xsl:if test="record/metadata/schede/F/MT/FRM">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI)" />
            		</xsl:attribute>
						<arco-dd:includesTechnicalCharacteristic>
							<xsl:attribute name="rdf:resource">
            				<xsl:value-of
								select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/F/MT/FRM)))" />
            			</xsl:attribute>
						</arco-dd:includesTechnicalCharacteristic>
					</rdf:Description>
					<!-- Technical detail as an individual -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/F/MT/FRM)))" />
            		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
							<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/TechnicalCharacteristic'" />
						</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/MT/FRM)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/MT/FRM)" />
						</l0:name>
						<arco-dd:isCharacteristicClassifiedBy>
							<xsl:attribute name="rdf:resource">
            				<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/PhotoSize'" />
            			</xsl:attribute>
						</arco-dd:isCharacteristicClassifiedBy>
					</rdf:Description>
				</xsl:if>
			</xsl:if>
			<!-- photo program of photograph (F) as an individual -->
			<xsl:if
				test="not(starts-with(lower-case(normalize-space(record/metadata/schede/F/MT/FVC/FVCP)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/MT/FVC/FVCP)), 'n.r'))">
				<xsl:if test="record/metadata/schede/F/MT/FVC/FVCP">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI)" />
            		</xsl:attribute>
						<arco-dd:includesTechnicalCharacteristic>
							<xsl:attribute name="rdf:resource">
            				<xsl:value-of
								select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/F/MT/FVC/FVCP)))" />
            			</xsl:attribute>
						</arco-dd:includesTechnicalCharacteristic>
					</rdf:Description>
					<!-- Technical detail as an individual -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/F/MT/FVC/FVCP)))" />
            		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
							<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/TechnicalCharacteristic'" />
						</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/MT/FVC/FVCP)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/MT/FVC/FVCP)" />
						</l0:name>
						<arco-dd:isCharacteristicClassifiedBy>
							<xsl:attribute name="rdf:resource">
            				<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/PhotoProgram'" />
            			</xsl:attribute>
						</arco-dd:isCharacteristicClassifiedBy>
					</rdf:Description>
				</xsl:if>
			</xsl:if>
			<!-- storage method and colour depth of photograph (F) as an individual -->
			<xsl:if
				test="not(starts-with(lower-case(normalize-space(record/metadata/schede/F/MT/FVC/FVCC)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/MT/FVC/FVCC)), 'n.r'))">
				<xsl:if test="record/metadata/schede/F/MT/FVC/FVCC">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI)" />
            		</xsl:attribute>
						<arco-dd:includesTechnicalCharacteristic>
							<xsl:attribute name="rdf:resource">
            				<xsl:value-of
								select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/F/MT/FVC/FVCC)))" />
            			</xsl:attribute>
						</arco-dd:includesTechnicalCharacteristic>

					</rdf:Description>
					<!-- Technical detail as an individual -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/F/MT/FVC/FVCC)))" />
            		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
							<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/TechnicalCharacteristic'" />
						</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/MT/FVC/FVCC)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/MT/FVC/FVCC)" />
						</l0:name>
						<arco-dd:isCharacteristicClassifiedBy>
							<xsl:attribute name="rdf:resource">
            				<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/StorageMethodColourDepth'" />
            			</xsl:attribute>
						</arco-dd:isCharacteristicClassifiedBy>
					</rdf:Description>
				</xsl:if>
			</xsl:if>
			<!-- resolution of photograph (F) as an individual -->
			<xsl:if
				test="not(starts-with(lower-case(normalize-space(record/metadata/schede/F/MT/FVC/FVCU)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/MT/FVC/FVCU)), 'n.r'))">
				<xsl:if test="record/metadata/schede/F/MT/FVC/FVCU">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI)" />
            		</xsl:attribute>
						<arco-dd:includesTechnicalCharacteristic>
							<xsl:attribute name="rdf:resource">
            				<xsl:value-of
								select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/F/MT/FVC/FVCU)))" />
            			</xsl:attribute>
						</arco-dd:includesTechnicalCharacteristic>
					</rdf:Description>
					<!-- Technical detail as an individual -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/F/MT/FVC/FVCU)))" />
            		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
							<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/TechnicalCharacteristic'" />
						</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/MT/FVC/FVCU)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/MT/FVC/FVCU)" />
						</l0:name>
						<arco-dd:isCharacteristicClassifiedBy>
							<xsl:attribute name="rdf:resource">
            				<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/Resolution'" />
            			</xsl:attribute>
						</arco-dd:isCharacteristicClassifiedBy>
					</rdf:Description>
				</xsl:if>
			</xsl:if>
			<!-- pixel dimension of photograph (F) -->
			<xsl:if
				test="not(starts-with(lower-case(normalize-space(record/metadata/schede/F/MT/FVC/FVCM)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/MT/FVC/FVCM)), 'n.r'))">
				<xsl:if test="record/metadata/schede/F/MT/FVC/FVCM">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI)" />
            		</xsl:attribute>
						<arco-dd:includesTechnicalCharacteristic>
							<xsl:attribute name="rdf:resource">
            				<xsl:value-of
								select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/F/MT/FVC/FVCM)))" />
            			</xsl:attribute>
						</arco-dd:includesTechnicalCharacteristic>

					</rdf:Description>
					<!-- Technical detail as an individual -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/F/MT/FVC/FVCM)))" />
            		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
							<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/TechnicalCharacteristic'" />
						</xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/MT/FVC/FVCM)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/MT/FVC/FVCM)" />
						</l0:name>
						<arco-dd:isCharacteristicClassifiedBy>
							<xsl:attribute name="rdf:resource">
            				<xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/PixelDimension'" />
            			</xsl:attribute>
						</arco-dd:isCharacteristicClassifiedBy>
					</rdf:Description>
				</xsl:if>
			</xsl:if>
			<!-- mass storage of photograph (F) as an individual -->
			<xsl:if
				test="record/metadata/schede/F/MT/FVM and (not(starts-with(lower-case(normalize-space(record/metadata/schede/F/MT/FVM)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/MT/FVM)), 'n.r')))">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of
						select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI)" />
            		</xsl:attribute>
					<arco-dd:includesTechnicalCharacteristic>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of
							select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/F/MT/FVM)))" />
            			</xsl:attribute>
					</arco-dd:includesTechnicalCharacteristic>

				</rdf:Description>
				<!-- Technical detail as an individual -->
				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of
						select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/F/MT/FVM)))" />
            		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
							<xsl:value-of
							select="'https://w3id.org/arco/ontology/denotative-description/TechnicalCharacteristic'" />
						</xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/F/MT/FVM)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/F/MT/FVM)" />
					</l0:name>
					<arco-dd:isCharacteristicClassifiedBy>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of
							select="'https://w3id.org/arco/ontology/denotative-description/MassStorage'" />
            			</xsl:attribute>
					</arco-dd:isCharacteristicClassifiedBy>
				</rdf:Description>
			</xsl:if>
			<!-- colour of photograph (F) as an individual -->
			<xsl:if
				test="record/metadata/schede/F/MT/MTX and (not(starts-with(lower-case(normalize-space(record/metadata/schede/F/MT/MTX)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/MT/MTX)), 'n.r')))">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of
						select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI)" />
            		</xsl:attribute>
            		<rdf:type>
						<xsl:attribute name="rdf:resource">
							<xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/CulturalEntityTechnicalStatus'" />
						</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="it">
						<xsl:value-of select="concat('Stato tecnico del bene culturale ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of select="concat('Stato tecnico del bene culturale ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of select="concat('Technical status of cultural property ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of select="concat('Technical status of cultural property ', $itemURI)" />
					</l0:name>
					<arco-dd:includesTechnicalCharacteristic>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of
							select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/F/MT/MTX)))" />
            			</xsl:attribute>
					</arco-dd:includesTechnicalCharacteristic>

				</rdf:Description>
				<!-- Technical detail as an individual -->
				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of
						select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/F/MT/MTX)))" />
            		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
							<xsl:value-of
							select="'https://w3id.org/arco/ontology/denotative-description/TechnicalCharacteristic'" />
						</xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/F/MT/MTX)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/F/MT/MTX)" />
					</l0:name>
					<arco-dd:isCharacteristicClassifiedBy>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of
							select="'https://w3id.org/arco/ontology/denotative-description/PhotoColour'" />
            			</xsl:attribute>
					</arco-dd:isCharacteristicClassifiedBy>
				</rdf:Description>
			</xsl:if>
			<!-- garment colour (VeAC) as an individual -->
			<xsl:if
				test="record/metadata/schede/VeAC/MT/MTC/MTCC and (not(starts-with(lower-case(normalize-space(record/metadata/schede/VeAC/MT/MTC/MTCC)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/VeAC/MT/MTC/MTCC)), 'n.r')))">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of
						select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI)" />
            		</xsl:attribute>
            		<rdf:type>
						<xsl:attribute name="rdf:resource">
							<xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/CulturalEntityTechnicalStatus'" />
						</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="it">
						<xsl:value-of select="concat('Stato tecnico del bene culturale ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of select="concat('Stato tecnico del bene culturale ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of select="concat('Technical status of cultural property ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of select="concat('Technical status of cultural property ', $itemURI)" />
					</l0:name>
					<arco-dd:includesTechnicalCharacteristic>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of
							select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/VeAC/MT/MTC/MTCC)))" />
            			</xsl:attribute>
					</arco-dd:includesTechnicalCharacteristic>

				</rdf:Description>
				<!-- Technical detail as an individual -->
				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of
						select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/VeAC/MT/MTC/MTCC)))" />
            		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
							<xsl:value-of
							select="'https://w3id.org/arco/ontology/denotative-description/TechnicalCharacteristic'" />
						</xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/VeAC/MT/MTC/MTCC)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/VeAC/MT/MTC/MTCC)" />
					</l0:name>
					<arco-dd:isCharacteristicClassifiedBy>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of
							select="'https://w3id.org/arco/ontology/denotative-description/GarmentColour'" />
            			</xsl:attribute>
					</arco-dd:isCharacteristicClassifiedBy>
				</rdf:Description>
			</xsl:if>
			<!-- garment analysis (VeAC) as an individual -->
			<xsl:if
				test="record/metadata/schede/VeAC/MT/MTC/MTCA and (not(starts-with(lower-case(normalize-space(record/metadata/schede/VeAC/MT/MTC/MTCA)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/VeAC/MT/MTC/MTCA)), 'n.r')))">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of
						select="concat($NS, 'CulturalEntityTechnicalStatus/', $itemURI)" />
            		</xsl:attribute>
					<arco-dd:includesTechnicalCharacteristic>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of
							select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/VeAC/MT/MTC/MTCA)))" />
            			</xsl:attribute>
					</arco-dd:includesTechnicalCharacteristic>
				</rdf:Description>
				<!-- Technical detail as an individual -->
				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of
						select="concat($NS, 'TechnicalCharacteristic/', arco-fn:urify(normalize-space(record/metadata/schede/VeAC/MT/MTC/MTCA)))" />
            		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
						<xsl:attribute name="rdf:resource">
							<xsl:value-of
							select="'https://w3id.org/arco/ontology/denotative-description/TechnicalCharacteristic'" />
						</xsl:attribute>
					</xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/VeAC/MT/MTC/MTCA)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/VeAC/MT/MTC/MTCA)" />
					</l0:name>
					<arco-dd:isCharacteristicClassifiedBy>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of
							select="'https://w3id.org/arco/ontology/denotative-description/GarmentAnalysis'" />
            			</xsl:attribute>
					</arco-dd:isCharacteristicClassifiedBy>
				</rdf:Description>
			</xsl:if>
			<!-- archivalrecordset membership -->
			<xsl:if test="record/metadata/schede/*/UB/UBF/*">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
						<xsl:value-of select="concat($NS, 'ArchivalRecordSetMembership/', $itemURI)" />
					</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
							<xsl:value-of select="'https://w3id.org/arco/ontology/context-description/ArchivalRecordSetMembership'" />
						</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="it">
						<xsl:value-of select="concat('Appartenenza a unità archivistica complessa del bene: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of select="concat('Appartenenza a unità archivistica complessa del bene: ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of select="concat('Archival record set membership of cultural property: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of select="concat('Archival record set membership of cultural property: ', $itemURI)" />
					</l0:name>
					<arco-cd:hasMemberOfArchivalRecordSet>
						<xsl:attribute name="rdf:resource">
							<xsl:value-of select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
						</xsl:attribute>
					</arco-cd:hasMemberOfArchivalRecordSet>
					<xsl:if test="record/metadata/schede/*/UB/UBF/UBFC">
						<arco-cd:archivalRecordLocation>
							<xsl:value-of select="normalize-space(record/metadata/schede/*/UB/UBF/UBFC)" />
						</arco-cd:archivalRecordLocation>
					</xsl:if>
					<xsl:if test="record/metadata/schede/*/UB/UBF/UBFU">
						<arco-cd:archivalRecordSetTitle>
							<xsl:value-of select="normalize-space(record/metadata/schede/*/UB/UBF/UBFU)" />
						</arco-cd:archivalRecordSetTitle>
					</xsl:if>
					<xsl:if test="record/metadata/schede/*/UB/UBF/UBFQ">
						<arco-core:note>
							<xsl:value-of select="normalize-space(record/metadata/schede/*/UB/UBF/UBFQ)" />
						</arco-core:note>
					</xsl:if>
					<xsl:if test="record/metadata/schede/*/UB/UBF/UBFP and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/UB/UBF/UBFP)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/UB/UBF/UBFP)), 'n.r')))">
						<arco-cd:hasArchivalRecordSet>
							<xsl:attribute name="rdf:resource">
								<xsl:value-of select="concat($NS, 'ArchivalFonds/', $itemURI, '-', arco-fn:urify(normalize-space(record/metadata/schede/*/UB/UBF/UBFP)))" />
							</xsl:attribute>
						</arco-cd:hasArchivalRecordSet>
					</xsl:if>
					<xsl:if test="record/metadata/schede/*/UB/UBF/UBFS and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/UB/UBF/UBFS)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/UB/UBF/UBFS)), 'n.r')))">
						<arco-cd:hasArchivalRecordSet>
							<xsl:attribute name="rdf:resource">
								<xsl:value-of select="concat($NS, 'ArchivalSeries/', $itemURI, '-', arco-fn:urify(normalize-space(record/metadata/schede/*/UB/UBF/UBFS)))" />
							</xsl:attribute>
						</arco-cd:hasArchivalRecordSet>
					</xsl:if>
					<xsl:if test="record/metadata/schede/*/UB/UBF/UBFT and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/UB/UBF/UBFT)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/UB/UBF/UBFT)), 'n.r')))">
						<arco-cd:hasArchivalRecordSet>
							<xsl:attribute name="rdf:resource">
								<xsl:value-of select="concat($NS, 'ArchivalSubseries/', $itemURI, '-', arco-fn:urify(normalize-space(record/metadata/schede/*/UB/UBF/UBFT)))" />
							</xsl:attribute>
						</arco-cd:hasArchivalRecordSet>
					</xsl:if>
				</rdf:Description>
			</xsl:if>
			<xsl:if test="record/metadata/schede/*/UB/UBF/UBFP and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/UB/UBF/UBFP)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/UB/UBF/UBFP)), 'n.r')))">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
										<xsl:value-of
						select="concat($NS, 'ArchivalFonds/', $itemURI, '-', arco-fn:urify(normalize-space(record/metadata/schede/*/UB/UBF/UBFP)))" />
								</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
										<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/ArchivalFonds'" />
									</xsl:attribute>
					</rdf:type>
					<arco-cd:isArchivalRecordSetIn>
						<xsl:attribute name="rdf:resource">
										<xsl:value-of
							select="concat($NS, 'ArchivalRecordSetMembership/', $itemURI)" />
									</xsl:attribute>
					</arco-cd:isArchivalRecordSetIn>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/UB/UBF/UBFP)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/UB/UBF/UBFP)" />
					</l0:name>
					<xsl:if
						test="record/metadata/schede/*/UB/UBF/UBFS and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/UB/UBF/UBFS)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/UB/UBF/UBFS)), 'n.r')))">
						<arco-core:hasComponent>
							<xsl:attribute name="rdf:resource">
											<xsl:value-of
								select="concat($NS, 'ArchivalSeries/', $itemURI, '-', arco-fn:urify(normalize-space(record/metadata/schede/*/UB/UBF/UBFS)))" />
										</xsl:attribute>
						</arco-core:hasComponent>
					</xsl:if>
				</rdf:Description>
			</xsl:if>
			<xsl:if
				test="record/metadata/schede/*/UB/UBF/UBFS and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/UB/UBF/UBFS)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/UB/UBF/UBFS)), 'n.r')))">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
										<xsl:value-of
						select="concat($NS, 'ArchivalSeries/', $itemURI, '-', arco-fn:urify(normalize-space(record/metadata/schede/*/UB/UBF/UBFS)))" />
								</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
										<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/ArchivalSeries'" />
									</xsl:attribute>
					</rdf:type>
					<arco-cd:isArchivalRecordSetIn>
						<xsl:attribute name="rdf:resource">
										<xsl:value-of
							select="concat($NS, 'ArchivalRecordSetMembership/', $itemURI)" />
									</xsl:attribute>
					</arco-cd:isArchivalRecordSetIn>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/UB/UBF/UBFS)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/UB/UBF/UBFS)" />
					</l0:name>
					<xsl:if
						test="record/metadata/schede/*/UB/UBF/UBFT and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/UB/UBF/UBFT)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/UB/UBF/UBFT)), 'n.r')))">
						<arco-core:hasComponent>
							<xsl:attribute name="rdf:resource">
											<xsl:value-of
								select="concat($NS, 'ArchivalSubseries/', $itemURI, '-', arco-fn:urify(normalize-space(record/metadata/schede/*/UB/UBF/UBFT)))" />
										</xsl:attribute>
						</arco-core:hasComponent>
					</xsl:if>
					<xsl:if
						test="record/metadata/schede/*/UB/UBF/UBFP and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/UB/UBF/UBFP)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/UB/UBF/UBFP)), 'n.r')))">
						<arco-core:isComponentOf>
							<xsl:attribute name="rdf:resource">
											<xsl:value-of
								select="concat($NS, 'ArchivalFonds/', $itemURI, '-', arco-fn:urify(normalize-space(record/metadata/schede/*/UB/UBF/UBFP)))" />
										</xsl:attribute>
						</arco-core:isComponentOf>
					</xsl:if>
				</rdf:Description>
			</xsl:if>
			<xsl:if
				test="record/metadata/schede/*/UB/UBF/UBFT and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/UB/UBF/UBFT)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/UB/UBF/UBFT)), 'n.r')))">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
										<xsl:value-of
						select="concat($NS, 'ArchivalSubseries/', $itemURI, '-', arco-fn:urify(normalize-space(record/metadata/schede/*/UB/UBF/UBFT)))" />
								</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
										<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/ArchivalSubseries'" />
									</xsl:attribute>
					</rdf:type>
					<arco-cd:isArchivalRecordSetIn>
						<xsl:attribute name="rdf:resource">
										<xsl:value-of
							select="concat($NS, 'ArchivalRecordSetMembership/', $itemURI)" />
									</xsl:attribute>
					</arco-cd:isArchivalRecordSetIn>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/UB/UBF/UBFT)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/UB/UBF/UBFT)" />
					</l0:name>
					<xsl:if
						test="record/metadata/schede/*/UB/UBF/UBFS and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/UB/UBF/UBFS)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/UB/UBF/UBFS)), 'n.r')))">
						<arco-core:isComponentOf>
							<xsl:attribute name="rdf:resource">
											<xsl:value-of
								select="concat($NS, 'ArchivalSeries/', $itemURI, '-', arco-fn:urify(normalize-space(record/metadata/schede/*/UB/UBF/UBFS)))" />
										</xsl:attribute>
						</arco-core:isComponentOf>
					</xsl:if>
				</rdf:Description>
			</xsl:if>
			<!-- photographicseries membership -->
			<xsl:if test="record/metadata/schede/F/PD/SFI/*">
				<xsl:for-each select="record/metadata/schede/F/PD/SFI">

					<rdf:Description>
						<xsl:attribute name="rdf:about">
				                            <xsl:value-of
							select="concat($NS, 'PhotographicSeriesMembership/', $itemURI, position())" />
				                     </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
				                    		<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/PhotographicSeriesMembership'" />
				                    	</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Appartenenza a serie fotografica ', position(), ' del bene: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Appartenenza a serie fotografica ', position(), ' del bene: ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Photographic series membership ', position(), ' of cultural property: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Photographic series membership ', position(), ' of cultural property: ', $itemURI)" />
						</l0:name>
						<xsl:if test="./SFIN">
							<arco-cd:photographicSeriesItemNumber>
								<xsl:value-of select="normalize-space(./SFIN)" />
							</arco-cd:photographicSeriesItemNumber>
						</xsl:if>
						<arco-cd:hasPhotographicSeries>
							<xsl:choose>
								<xsl:when test="./SFIT">
									<xsl:attribute name="rdf:resource">
													<xsl:value-of
										select="concat($NS, 'PhotographicSeries/', $itemURI, '-', arco-fn:urify(normalize-space(./SFIT)))" />
												</xsl:attribute>
								</xsl:when>
								<xsl:otherwise>
									<xsl:attribute name="rdf:resource">
													<xsl:value-of
										select="concat($NS, 'PhotographicSeries/', $itemURI, '-', position())" />
												</xsl:attribute>
								</xsl:otherwise>
							</xsl:choose>
						</arco-cd:hasPhotographicSeries>
					</rdf:Description>
					<!-- photographic series -->
					<rdf:Description>
						<xsl:choose>
							<xsl:when test="./SFIT">
								<xsl:attribute name="rdf:about">
											<xsl:value-of
									select="concat($NS, 'PhotographicSeries/', $itemURI, '-', arco-fn:urify(normalize-space(./SFIT)))" />
										</xsl:attribute>
							</xsl:when>
							<xsl:otherwise>
								<xsl:attribute name="rdf:about">
											<xsl:value-of
									select="concat($NS, 'PhotographicSeries/', $itemURI, '-', position())" />
										</xsl:attribute>
							</xsl:otherwise>
						</xsl:choose>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
			                    		<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/PhotographicSeries'" />
			                    	</xsl:attribute>
						</rdf:type>
						<xsl:choose>
							<xsl:when test="./SFIT">
								<rdfs:label>
									<xsl:value-of select="normalize-space(./SFIT)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./SFIT)" />
								</l0:name>
							</xsl:when>
							<xsl:otherwise>
								<rdfs:label xml:lang="it">
									<xsl:value-of
										select="concat('Serie fotografica ', position(), ' del bene: ', $itemURI)" />
								</rdfs:label>
								<l0:name xml:lang="it">
									<xsl:value-of
										select="concat('Serie fotografica ', position(), ' del bene: ', $itemURI)" />
								</l0:name>
								<rdfs:label xml:lang="en">
									<xsl:value-of
										select="concat('Photographic series ', position(), ' of cultural property: ', $itemURI)" />
								</rdfs:label>
								<l0:name xml:lang="en">
									<xsl:value-of
										select="concat('Photographic series ', position(), ' of cultural property: ', $itemURI)" />
								</l0:name>
							</xsl:otherwise>
						</xsl:choose>
						<arco-cd:isPhotographicSeriesIn>
							<xsl:attribute name="rdf:resource">
				                		<xsl:value-of
								select="concat($NS, 'PhotographicSeriesMembership/', $itemURI, position())" />
				                	</xsl:attribute>
						</arco-cd:isPhotographicSeriesIn>
						<xsl:if test="./SFIT">
							<arco-cd:hasTitle>
								<xsl:attribute name="rdf:resource">
				                			<xsl:value-of
									select="concat($NS, 'Title/', $itemURI, '-', arco-fn:urify(normalize-space(./SFIT)))" />
				                		</xsl:attribute>
							</arco-cd:hasTitle>
						</xsl:if>
						<xsl:if test="./SFIP">
							<arco-cd:hasTitle>
								<xsl:attribute name="rdf:resource">
				                			<xsl:value-of
									select="concat($NS, 'Title/', $itemURI, '-', arco-fn:urify(normalize-space(./SFIP)))" />
				                		</xsl:attribute>
							</arco-cd:hasTitle>
						</xsl:if>
					</rdf:Description>
					<xsl:if test="./SFIT">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
				                			<xsl:value-of
								select="concat($NS, 'Title/', $itemURI, '-', arco-fn:urify(normalize-space(./SFIT)))" />
				                	</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
				                			<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/Title'" />
				                		</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./SFIT)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./SFIT)" />
							</l0:name>
							<arco-cd:hasTitleType>
								<xsl:attribute name="rdf:resource">
											<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/MainTitle'" />
										</xsl:attribute>
							</arco-cd:hasTitleType>
							<arco-core:specifications>
								<xsl:value-of select="normalize-space(./SFIS)" />
							</arco-core:specifications>
						</rdf:Description>
					</xsl:if>
					<xsl:if test="./SFIP">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
				                			<xsl:value-of
								select="concat($NS, 'Title/', $itemURI, '-', arco-fn:urify(normalize-space(./SFIP)))" />
				                	</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
				                			<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/Title'" />
				                		</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./SFIP)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./SFIP)" />
							</l0:name>
							<arco-cd:hasTitleType>
								<xsl:attribute name="rdf:resource">
											<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/ParallelTitle'" />
										</xsl:attribute>
							</arco-cd:hasTitleType>
							<xsl:if test="./SFIS">
								<arco-core:specifications>
									<xsl:value-of select="normalize-space(./SFIS)" />
								</arco-core:specifications>
							</xsl:if>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- production realization location for BDM < version 4.00 -->
			<xsl:for-each select="record/metadata/schede/BDM/AU/LDF">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
									 <xsl:value-of
						select="concat($NS, 'TimeIndexedTypedLocation/', $itemURI, '-production-realization-', position())" />
								</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/location/TimeIndexedTypedLocation'" />
		                        </xsl:attribute>
					</rdf:type>
					<arco-location:isTimeIndexedTypedLocationOf>
						<xsl:attribute name="rdf:resource"> 
									<xsl:value-of
							select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
								</xsl:attribute>
					</arco-location:isTimeIndexedTypedLocationOf>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Localizzazione di produzione/realizzazione del bene: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Localizzazione di produzione/realizzazione del bene: ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Production/realization location of cultural property: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Production/realization location of cultural property: ', $itemURI)" />
					</l0:name>
					<arco-location:hasLocationType>
						<xsl:attribute name="rdf:resource">
		                                <xsl:value-of
							select="'https://w3id.org/arco/ontology/location/ProductionRealizationLocation'" />
		                            </xsl:attribute>
					</arco-location:hasLocationType>
				</rdf:Description>
			</xsl:for-each>
			<xsl:for-each select="record/metadata/schede/BDM/AU/LDF">
				<xsl:variable name="location">
					<xsl:value-of
						select="concat($NS, 'Feature/',arco-fn:arcofy(normalize-space(.)))" />
				</xsl:variable>
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                                    <xsl:value-of
						select="concat($NS, 'TimeIndexedTypedLocation/', $itemURI, '-production-realization-', position())" />
                                </xsl:attribute>
					<arco-location:atLocation>
						<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
							select="$location" />
                                    </xsl:attribute>
					</arco-location:atLocation>
				</rdf:Description>
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                                    <xsl:value-of
						select="$location" />
                                </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
							select="'https://w3id.org/italia/onto/CLV/Feature'" />
                                    </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of select="normalize-space(.)" />
					</rdfs:label>
					<clvapit:hasAddress>
						<xsl:attribute name="rdf:resource">
						<xsl:choose>
							<xsl:when
							test="./LDFS and not(lower-case(normalize-space(./LDFS))='italia')">
								<xsl:value-of
							select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(./LDFS)), normalize-space(lower-case(./LDFL)), normalize-space(lower-case(./LDFU)))))" />
							</xsl:when>
							<xsl:otherwise>
	                             <xsl:value-of
							select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(./LDFP)), normalize-space(lower-case(./LDFC)), normalize-space(lower-case(./LDFF)), normalize-space(lower-case(./LDFL)), normalize-space(lower-case(./LDFU)))))" />
							</xsl:otherwise>
						</xsl:choose>
                        </xsl:attribute>
					</clvapit:hasAddress>
					<xsl:if test="./LDFF">
						<arco-location:hasToponymInTime>
							<xsl:attribute name="rdf:resource">
                                                        <xsl:value-of
								select="concat($NS, 'ToponymInTime/', arco-fn:urify(normalize-space(./LDFF)))" />
                                            </xsl:attribute>

						</arco-location:hasToponymInTime>
					</xsl:if>
				</rdf:Description>
				<!-- address -->
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                         <xsl:choose>
							<xsl:when
						test="./LDFS and not(lower-case(normalize-space(./LDFS))='italia')">
								<xsl:value-of
						select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(./LDFS)), normalize-space(lower-case(./LDFL)), normalize-space(lower-case(./LDFU)))))" />
							</xsl:when>
							<xsl:otherwise>
	                             <xsl:value-of
						select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(./LDFP)), normalize-space(lower-case(./LDFC)), normalize-space(lower-case(./LDFF)), normalize-space(lower-case(./LDFL)), normalize-space(lower-case(./LDFU)))))" />
							</xsl:otherwise>
						</xsl:choose>
                                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
							select="'https://w3id.org/italia/onto/CLV/Address'" />
                                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:for-each select="./*">
							<xsl:choose>
								<xsl:when test="position() = 1">
									<xsl:value-of select="./text()" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="concat(', ', ./text())" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>
					</rdfs:label>
					<!-- Stato -->
					<xsl:if
						test="./LDFS and (not(starts-with(lower-case(normalize-space(./LDFS)), 'nr')) and not(starts-with(lower-case(normalize-space(./LDFS)), 'n.r')))">
						<clvapit:hasCountry>
							<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
								select="concat($NS, 'Country/', arco-fn:urify(./LDFS))" />
                                            </xsl:attribute>
						</clvapit:hasCountry>
					</xsl:if>
					<!-- Regione -->
					<xsl:if
						test="./LDFR and (not(starts-with(lower-case(normalize-space(./LDFR)), 'nr')) and not(starts-with(lower-case(normalize-space(./LDFR)), 'n.r')))">
						<clvapit:hasRegion>
							<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
								select="concat($NS, 'Region/', arco-fn:urify(./LDFR))" />
                                            </xsl:attribute>
						</clvapit:hasRegion>
					</xsl:if>
					<!-- Provincia -->
					<xsl:if
						test="./LDFP and (not(starts-with(lower-case(normalize-space(./LDFP)), 'nr')) and not(starts-with(lower-case(normalize-space(./LDFP)), 'n.r')))">
						<clvapit:hasProvince>
							<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
								select="concat($NS, 'Province/', arco-fn:urify(./LDFP))" />
                                            </xsl:attribute>
						</clvapit:hasProvince>
					</xsl:if>
					<!-- Comune -->
					<xsl:if
						test="./LDFC and (not(starts-with(lower-case(normalize-space(./LDFC)), 'nr')) and not(starts-with(lower-case(normalize-space(./LDFC)), 'n.r')))">
						<clvapit:hasCity>
							<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
								select="concat($NS, 'City/', arco-fn:urify(./LDFC))" />
                                            </xsl:attribute>
						</clvapit:hasCity>
					</xsl:if>
					<!-- Località -->
					<xsl:if
						test="./LDFL and (not(starts-with(lower-case(normalize-space(./LDFL)), 'nr')) and not(starts-with(lower-case(normalize-space(./LDFL)), 'n.r')))">
						<clvapit:hasAddressArea>
							<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
								select="concat($NS, 'AddressArea/', arco-fn:urify(./LDFL))" />
                                            </xsl:attribute>
						</clvapit:hasAddressArea>
					</xsl:if>
					<xsl:if
						test="./LDFU and not(./LDFU='.' or ./LDFU='-' or ./LDFU='/') and (not(starts-with(lower-case(normalize-space(./LDFU)), 'nr')) and not(starts-with(lower-case(normalize-space(./LDFU)), 'n.r')))">
						<clvapit:fullAddress>
							<xsl:value-of select="normalize-space(./LDFU)" />
						</clvapit:fullAddress>
					</xsl:if>
				</rdf:Description>
				<!-- Country LA -->
				<xsl:if
					test="./LDFS and (not(starts-with(lower-case(normalize-space(./LDFS)), 'nr')) and not(starts-with(lower-case(normalize-space(./LDFS)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                                        <xsl:value-of
							select="concat($NS, 'Country/', arco-fn:urify(./LDFS))" />
                                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/Country'" />
                                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./LDFS)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./LDFS)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- Region LA -->
				<xsl:if
					test="./LDFR and (not(starts-with(lower-case(normalize-space(./LDFR)), 'nr')) and not(starts-with(lower-case(normalize-space(./LDFR)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                                        <xsl:value-of
							select="concat($NS, 'Region/', arco-fn:urify(./LDFR))" />
                                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/Region'" />
                                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(./LDFR)" />
							</xsl:call-template>

						</rdfs:label>
						<l0:name>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(./LDFR)" />
							</xsl:call-template>

						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- Province LA -->
				<xsl:if
					test="./LDFP and (not(starts-with(lower-case(normalize-space(./LDFP)), 'nr')) and not(starts-with(lower-case(normalize-space(./LDFP)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                                        <xsl:value-of
							select="concat($NS, 'Province/', arco-fn:urify(./LDFP))" />
                                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/Province'" />
                                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./LDFP)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./LDFP)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- City LA -->
				<xsl:if
					test="./LDFC and (not(starts-with(lower-case(normalize-space(./LDFC)), 'nr')) and not(starts-with(lower-case(normalize-space(./LDFC)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                                        <xsl:value-of
							select="concat($NS, 'City/', arco-fn:urify(./LDFC))" />
                                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/City'" />
                                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(./LDFC)" />
							</xsl:call-template>
						</rdfs:label>
						<l0:name>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(./LDFC)" />
							</xsl:call-template>
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- Località (Address Area) LA -->
				<xsl:if
					test="./LDFL and (not(starts-with(lower-case(normalize-space(./LDFL)), 'nr')) and not(starts-with(lower-case(normalize-space(./LDFL)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                                        <xsl:value-of
							select="concat($NS, 'AddressArea/', arco-fn:urify(./LDFL))" />
                                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/AddressArea'" />
                                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(./LDFL)" />
							</xsl:call-template>

						</rdfs:label>
						<l0:name>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(./LDFL)" />
							</xsl:call-template>

						</l0:name>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- author for BDM < 4.00 -->
			<xsl:for-each select="record/metadata/schede/BDM/AU/AUF">
				<xsl:if
					test="./* and not(starts-with(lower-case(normalize-space(./AUFN)), 'n.r')) and not(starts-with(lower-case(normalize-space(./AUFN)), 'nr'))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
		                            <xsl:value-of
							select="concat($NS, 'PreferredAuthorshipAttribution/', $itemURI, position())" />
		                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/PreferredAuthorshipAttribution'" />
                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Attribuzione di autore preferita, maggiormente accreditata o convincente del bene: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Attribuzione di autore preferita, maggiormente accreditata o convincente del bene: ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Preferred authorship attribution of cultural property: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Preferred authorship attribution of cultural property: ', $itemURI)" />
						</l0:name>
						<arco-cd:isAuthorshipAttributionOf>
							<xsl:attribute name="rdf:resource"> 
							<xsl:value-of
								select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
						</xsl:attribute>
						</arco-cd:isAuthorshipAttributionOf>
						<xsl:if
							test="(./AUFN and (not(starts-with(lower-case(normalize-space(./AUFN)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUFN)), 'n.r')))) 
							or (./AUFB and (not(starts-with(lower-case(normalize-space(./AUFB)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUFB)), 'n.r'))))">
							<arco-cd:hasAttributedAuthor>
								<xsl:attribute name="rdf:resource">
		                            <xsl:choose>
		                                <xsl:when
									test="./AUFN and (./AUFS and (not(starts-with(lower-case(normalize-space(./AUFS)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUFS)), 'n.r'))))">
		                                    <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(concat(./AUFN, '-', ./AUFS)))" />
		                                </xsl:when>
		                                <xsl:when test="./AUFN">
		                                    <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(./AUFN))" />
		                                </xsl:when>
		                                <xsl:when
									test="./AUFB and (./AUFS and (not(starts-with(lower-case(normalize-space(./AUFS)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUFS)), 'n.r'))))">
		                                    <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(concat(./AUFB, '-', ./AUFS)))" />
		                                </xsl:when>
		                                <xsl:otherwise>
		                                    <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(./AUFB))" />
		                                </xsl:otherwise>
		                            </xsl:choose>
                            </xsl:attribute>
							</arco-cd:hasAttributedAuthor>
						</xsl:if>
						<xsl:if
							test="./AUFR and (not(starts-with(lower-case(normalize-space(./AUFR)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUFR)), 'n.r')))">
							<arco-cd:authorIntervention>
								<xsl:value-of select="normalize-space(./AUFR)" />
							</arco-cd:authorIntervention>
						</xsl:if>
					</rdf:Description>
					<xsl:if test="./AUFN">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                                   <xsl:choose>
		                                <xsl:when
								test="./AUFA and (not(starts-with(lower-case(normalize-space(./AUFA)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUFA)), 'n.r')))">
		                                    <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(concat(./AUFN, '-', ./AUFA)))" />
		                                </xsl:when>
		                                <xsl:otherwise>
		                                    <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./AUFN))" />
		                                </xsl:otherwise>
		                            </xsl:choose>
                            
                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
                            </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./AUFN)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./AUFN)" />
							</l0:name>
							<xsl:if
								test="./AUFA and (not(starts-with(lower-case(normalize-space(./AUFA)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUFA)), 'n.r')))">
								<arco-cd:agentDate>
									<xsl:value-of select="normalize-space(./AUFA)" />
								</arco-cd:agentDate>
							</xsl:if>
							<xsl:if test="./AUFS">
								<arco-cd:hasProfession>
									<xsl:attribute name="rdf:resource">
									<xsl:value-of
										select="concat($NS, 'Profession/', arco-fn:urify(normalize-space(./AUFS)))" />
								</xsl:attribute>
								</arco-cd:hasProfession>
							</xsl:if>
						</rdf:Description>
						<xsl:if test="./AUFS">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
								<xsl:value-of
									select="concat($NS, 'Profession/', arco-fn:urify(normalize-space(./AUFS)))" />
							</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
									<xsl:value-of
										select="'https://w3id.org/arco/ontology/context-description/Profession'" />
								</xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(./AUFS)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./AUFS)" />
								</l0:name>
							</rdf:Description>
						</xsl:if>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<!-- Geometry of cultural property as an individual for GE (version 4.00) -->
			<xsl:if test="record/metadata/schede/*/GE/*/*">
				<xsl:for-each
					select="record/metadata/schede/*/GE | record/metadata/schede/*/MT/MTA/MTAR | record/metadata/schede/*/MT/MTA/MTAX / record/metadata/schede/*/MT/MTA/MTAM">
					<xsl:variable name="geometry-position"
						select="position()" />
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'Geometry/', $itemURI, '-geometry-', position())" />
            		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            				<xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/Geometry'" />
            			</xsl:attribute>
						</rdf:type>
						<clvapit:isGeometryFor>
							<xsl:attribute name="rdf:resource">
				           <xsl:value-of
								select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
				        </xsl:attribute>
						</clvapit:isGeometryFor>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Geometry ', position(), ' of cultural property: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Geometry ', position(), ' of cultural property: ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Georeferenziazione ', position(), ' del bene culturale: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Georeferenziazione ', position(), ' del bene culturale: ', $itemURI)" />
						</l0:name>
						<arco-core:note>
							<xsl:value-of select="normalize-space(./GEC/GECS)" />
						</arco-core:note>
						<xsl:if
							test="./GET and (not(starts-with(lower-case(normalize-space(./GET)), 'nr')) and not(starts-with(lower-case(normalize-space(./GET)), 'n.r')))">
							<clvapit:hasGeometryType>
								<xsl:attribute name="rdf:resource">
                            <xsl:choose>
                                <xsl:when
									test="./GET='georeferenziazione puntuale'">
                                    <xsl:value-of
									select="'https://w3id.org/italia/onto/CLV/Point'" />
                                </xsl:when>
                                <xsl:when
									test="./GET='georeferenziazione areale'">
                                    <xsl:value-of
									select="'https://w3id.org/italia/onto/CLV/Polygon'" />
                                </xsl:when>
                                <xsl:when
									test="./GET='georeferenziazione lineare'">
                                    <xsl:value-of
									select="'https://w3id.org/italia/onto/CLV/Line'" />
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of
									select="concat($NS, 'GeometryType/', arco-fn:urify(normalize-space(./GET)))" />
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:attribute>
							</clvapit:hasGeometryType>
						</xsl:if>
						<xsl:for-each select="./GEC">
							<xsl:if
								test="./GECX and (not(starts-with(lower-case(normalize-space(./GECX)), 'nr')) and not(starts-with(lower-case(normalize-space(./GECX)), 'n.r'))) or ./GECY and (not(starts-with(lower-case(normalize-space(./GECY)), 'nr')) and not(starts-with(lower-case(normalize-space(./GECY)), 'n.r'))) or ./GECZ">
								<arco-location:hasCoordinates>
									<xsl:attribute name="rdf:resource">
            					<xsl:value-of
										select="concat($NS, 'Coordinates/', $itemURI, '-geometry-', $geometry-position, '-coordinates', '-', position())" />
            				</xsl:attribute>
								</arco-location:hasCoordinates>
							</xsl:if>
						</xsl:for-each>
						<xsl:if
							test="./GEP and (not(starts-with(lower-case(normalize-space(./GEP)), 'nr')) and not(starts-with(lower-case(normalize-space(./GEP)), 'n.r')))">
							<arco-location:spacialReferenceSystem>
								<xsl:value-of select="normalize-space(./GEP)" />
							</arco-location:spacialReferenceSystem>
						</xsl:if>
						<xsl:if
							test="./GPT and (not(starts-with(lower-case(normalize-space(./GPT)), 'nr')) and not(starts-with(lower-case(normalize-space(./GPT)), 'n.r')))">
							<arco-location:hasGeometryTechnique>
								<xsl:attribute name="rdf:resource">
            					<xsl:value-of
									select="concat($NS, 'GeometryTechnique/', arco-fn:urify(normalize-space(./GPT)))" />
            				</xsl:attribute>
							</arco-location:hasGeometryTechnique>
						</xsl:if>
						<xsl:if
							test="./GPM and (not(starts-with(lower-case(normalize-space(./GPM)), 'nr')) and not(starts-with(lower-case(normalize-space(./GPM)), 'n.r')))">
							<arco-location:hasGeometryMethod>
								<xsl:attribute name="rdf:resource">
            					<xsl:value-of
									select="concat($NS, 'GeometryMethod/', arco-fn:urify(normalize-space(./GPM)))" />
            				</xsl:attribute>
							</arco-location:hasGeometryMethod>
						</xsl:if>
						<xsl:if test="./GPB">
							<arco-location:hasBaseMap>
								<xsl:attribute name="rdf:resource">
            					<xsl:value-of
									select="concat($NS, 'BaseMap/', $itemURI, '-geometry-', $geometry-position, '-base-map')" />
            				</xsl:attribute>
							</arco-location:hasBaseMap>
						</xsl:if>
						<xsl:if
							test="./GEL and not(./GEL='.' or ./GEL='-' or ./GEL='/') and (not(starts-with(lower-case(normalize-space(./GEL)), 'nr')) and not(starts-with(lower-case(normalize-space(./GEL)), 'n.r')))">
							<arco-location:hasLocationType>
								<xsl:attribute name="rdf:resource">
					                                <xsl:choose>
					                                    <xsl:when
									test="lower-case(normalize-space(./GEL))='luogo di provenienza/collocazione precedente' or lower-case(normalize-space(./GEL))='luogo di provenienza' or lower-case(normalize-space(./GEL))='provenienza' or lower-case(normalize-space(./GEL))='provenienza'">
					                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/location/LastLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
									test="lower-case(normalize-space(./GEL))='luogo di produzione/realizzazione' or lower-case(normalize-space(./GEL))='luogo di esecuzione/fabbricazione'">
					                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/location/ProductionRealizationLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
									test="lower-case(normalize-space(./GEL))='luogo di reperimento' or lower-case(normalize-space(./GEL))='luogo di reperimento' or lower-case(normalize-space(./GEL))='reperimento' or lower-case(normalize-space(./GEL))='reperimento'">
					                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/location/FindingLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
									test="lower-case(normalize-space(./GEL))='luogo di deposito' or lower-case(normalize-space(./GEL))='luogo di deposito' or lower-case(normalize-space(./GEL))='deposito temporaneo' or lower-case(normalize-space(./GEL))='deposito temporaneo' or lower-case(normalize-space(./GEL))='deposito' or lower-case(normalize-space(./GEL))='deposito'">
					                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/location/StorageLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
									test="lower-case(normalize-space(./GEL))='luogo di esposizione' or lower-case(normalize-space(./GEL))='luogo di esposizione' or lower-case(normalize-space(./GEL))='espositiva' or lower-case(normalize-space(./GEL))='espositiva' or lower-case(normalize-space(./GEL))='espositivo' or lower-case(normalize-space(./GEL))='espositivo' or lower-case(normalize-space(./GEL))='esposizione' or lower-case(normalize-space(./GEL))='esposizione'">
					                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/location/ExhibitionLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
									test="lower-case(normalize-space(./GEL))='luogo di rilevamento' or lower-case(normalize-space(./GEL))='luogo di rilevamento' or lower-case(normalize-space(./GEL))='di rilevamento' or lower-case(normalize-space(./GEL))='di rilevamento' or lower-case(normalize-space(./GEL))='localizzazione di rilevamento' or lower-case(normalize-space(./GEL))='localizzazione di rilevamento'">
					                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/location/ObservationLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
									test="lower-case(normalize-space(./GEL))='area rappresentata' or lower-case(normalize-space(./GEL))='area rappresentata'">
					                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/location/SubjectLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
									test="lower-case(normalize-space(./GEL))='localizzazione fisica'">
					                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/location/CurrentPhysicalLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
									test="./GEL">
					                                        <xsl:value-of
									select="concat($NS, 'LocationType/', arco-fn:urify(normalize-space(./GEL)))" />
					                                    </xsl:when>
					                                </xsl:choose>
					                            </xsl:attribute>
							</arco-location:hasLocationType>
						</xsl:if>
					</rdf:Description>
					<!-- referred location type for GE as an individual -->
					<xsl:if
						test="./GEL and not(./GEL='.' or ./GEL='-' or ./GEL='/') and (not(starts-with(lower-case(normalize-space(./GEL)), 'nr')) and not(starts-with(lower-case(normalize-space(./GEL)), 'n.r')))">
						<xsl:choose>
							<xsl:when
								test="lower-case(normalize-space(./GEL))='luogo di provenienza/collocazione precedente' or lower-case(normalize-space(./GEL))='luogo di provenienza' or lower-case(normalize-space(./GEL))='provenienza' or lower-case(normalize-space(./GEL))='provenienza'" />
							<xsl:when
								test="lower-case(normalize-space(./GEL))='luogo di produzione/realizzazione' or lower-case(normalize-space(./GEL))='luogo di esecuzione/fabbricazione'" />
							<xsl:when
								test="lower-case(normalize-space(./GEL))='luogo di reperimento' or lower-case(normalize-space(./GEL))='luogo di reperimento' or lower-case(normalize-space(./GEL))='reperimento' or lower-case(normalize-space(./GEL))='reperimento'" />
							<xsl:when
								test="lower-case(normalize-space(./GEL))='luogo di deposito' or lower-case(normalize-space(./GEL))='luogo di deposito' or lower-case(normalize-space(./GEL))='deposito temporaneo' or lower-case(normalize-space(./GEL))='deposito temporaneo' or lower-case(normalize-space(./GEL))='deposito' or lower-case(normalize-space(./GEL))='deposito'" />
							<xsl:when
								test="lower-case(normalize-space(./GEL))='luogo di esposizione' or lower-case(normalize-space(./GEL))='luogo di esposizione' or lower-case(normalize-space(./GEL))='espositiva' or lower-case(normalize-space(./GEL))='espositiva' or lower-case(normalize-space(./GEL))='espositivo' or lower-case(normalize-space(./GEL))='espositivo' or lower-case(normalize-space(./GEL))='esposizione' or lower-case(normalize-space(./GEL))='esposizione'" />
							<xsl:when
								test="lower-case(normalize-space(./GEL))='luogo di rilevamento' or lower-case(normalize-space(./GEL))='luogo di rilevamento' or lower-case(normalize-space(./GEL))='di rilevamento' or lower-case(normalize-space(./GEL))='di rilevamento' or lower-case(normalize-space(./GEL))='localizzazione di rilevamento' or lower-case(normalize-space(./GEL))='localizzazione di rilevamento'" />
							<xsl:when
								test="lower-case(normalize-space(./GEL))='area rappresentata' or lower-case(normalize-space(./GEL))='area rappresentata'" />
							<xsl:when test="./GEL">
								<rdf:Description>
									<xsl:attribute name="rdf:about">
                                    <xsl:value-of
										select="concat($NS, 'LocationType/', arco-fn:urify(normalize-space(./GEL)))" />
                                </xsl:attribute>
									<rdf:type
										rdf:resource="https://w3id.org/arco/ontology/location/LocationType" />
									<rdfs:label>
										<xsl:value-of select="normalize-space(./GEL)" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of select="normalize-space(./GEL)" />
									</l0:name>
								</rdf:Description>
							</xsl:when>
						</xsl:choose>
					</xsl:if>
					<!-- geometry type for GE as an individual -->
					<xsl:if
						test="./GET and not(./GET='.' or ./GET='-' or ./GET='/') and (not(starts-with(lower-case(normalize-space(./GET)), 'nr')) and not(starts-with(lower-case(normalize-space(./GET)), 'n.r')))">
						<xsl:choose>
							<xsl:when test="./GET='georeferenziazione puntuale'" />
							<xsl:when test="./GET='georeferenziazione areale'" />
							<xsl:when test="./GET='georeferenziazione lineare'" />
							<xsl:otherwise>
								<rdf:Description>
									<xsl:attribute name="rdf:about">
                                    <xsl:value-of
										select="concat($NS, 'GeometryType/', arco-fn:urify(normalize-space(./GET)))" />
                                </xsl:attribute>
									<rdf:type
										rdf:resource="https://w3id.org/italia/onto/CLV/GeometryType" />
									<rdfs:label>
										<xsl:value-of select="normalize-space(./GET)" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of select="normalize-space(./GET)" />
									</l0:name>
								</rdf:Description>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:if>
					<!-- geometry coordinates for GE as an individual -->
					<xsl:for-each select="./GEC">
						<xsl:if
							test="./GECX and (not(starts-with(lower-case(normalize-space(./GECX)), 'nr')) and not(starts-with(lower-case(normalize-space(./GECX)), 'n.r'))) or ./GECY and (not(starts-with(lower-case(normalize-space(./GECY)), 'nr')) and not(starts-with(lower-case(normalize-space(./GECY)), 'n.r'))) or ./GECZ">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
            			<xsl:value-of
									select="concat($NS, 'Coordinates/', $itemURI, '-geometry-', $geometry-position, '-coordinates', '-', position())" />
            		</xsl:attribute>
								<rdf:type
									rdf:resource="https://w3id.org/arco/ontology/location/Coordinates" />
								<rdfs:label xml:lang="en">
									<xsl:value-of
										select="concat('Coordinates ', position(), ' of cultural property: ', $itemURI)" />
								</rdfs:label>
								<l0:name xml:lang="en">
									<xsl:value-of
										select="concat('Coordinates ', position(), ' of cultural property: ', $itemURI)" />
								</l0:name>
								<rdfs:label xml:lang="it">
									<xsl:value-of
										select="concat('Coordinate ', position(), ' del bene culturale: ', $itemURI)" />
								</rdfs:label>
								<l0:name xml:lang="it">
									<xsl:value-of
										select="concat('Coordinate ', position(), ' del bene culturale: ', $itemURI)" />
								</l0:name>
								<xsl:if
									test="./GECX and (not(starts-with(lower-case(normalize-space(./GECX)), 'nr')) and not(starts-with(lower-case(normalize-space(./GECX)), 'n.r')))">
									<arco-location:long>
										<xsl:value-of select="normalize-space(./GECX)" />
									</arco-location:long>
								</xsl:if>
								<xsl:if
									test="./GECY and (not(starts-with(lower-case(normalize-space(./GECY)), 'nr')) and not(starts-with(lower-case(normalize-space(./GECY)), 'n.r')))">
									<arco-location:lat>
										<xsl:value-of select="normalize-space(./GECY)" />
									</arco-location:lat>
								</xsl:if>
								<xsl:if test="./GECZ">
									<arco-location:hasAltitude>
										<xsl:attribute name="rdf:resource">
            					<xsl:value-of
											select="concat($NS, 'Altitude/', $itemURI, '-geometry-', $geometry-position, '-altitude')" />
            				</xsl:attribute>
									</arco-location:hasAltitude>
								</xsl:if>
							</rdf:Description>
						</xsl:if>
					</xsl:for-each>

					<!-- geometry technique for GE as an individual -->
					<xsl:if
						test="./GPT and (not(starts-with(lower-case(normalize-space(./GPT)), 'nr')) and not(starts-with(lower-case(normalize-space(./GPT)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
            			<xsl:value-of
								select="concat($NS, 'GeometryTechnique/', arco-fn:urify(normalize-space(./GPT)))" />
            		</xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/location/GeometryTechnique" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(./GPT)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./GPT)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- geometry method for GE as an individual -->
					<xsl:if
						test="./GPM and (not(starts-with(lower-case(normalize-space(./GPM)), 'nr')) and not(starts-with(lower-case(normalize-space(./GPM)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
            			<xsl:value-of
								select="concat($NS, 'GeometryMethod/', arco-fn:urify(normalize-space(./GPM)))" />
            		</xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/location/GeometryMethod" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(./GPM)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./GPM)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- geometry base map for GE as an individual -->
					<xsl:if test="./GPB">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
            			<xsl:value-of
								select="concat($NS, 'BaseMap/', $itemURI, '-geometry-', $geometry-position, '-base-map')" />
            		</xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/location/BaseMap" />
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Base cartografica del bene culturale: ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Base cartografica del bene culturale: ', $itemURI)" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Base map of cultural property: ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Base map of cultural property: ', $itemURI)" />
							</l0:name>
							<xsl:if test="./GPB/GPBB">
								<arco-core:description>
									<xsl:value-of select="normalize-space(./GPB/GPBB)" />
								</arco-core:description>
							</xsl:if>
							<xsl:if
								test="./GPB/GPBT and (not(starts-with(lower-case(normalize-space(./GPB/GPBT)), 'nr')) and not(starts-with(lower-case(normalize-space(./GPB/GPBT)), 'n.r')))">
								<tiapit:time>
									<xsl:value-of select="normalize-space(./GPB/GPBT)" />
								</tiapit:time>
							</xsl:if>
							<xsl:if
								test="./GPB/GPBU and (not(starts-with(lower-case(normalize-space(./GPB/GPBU)), 'nr')) and not(starts-with(lower-case(normalize-space(./GPB/GPBU)), 'n.r')))">
								<smapit:url>
									<xsl:value-of select="normalize-space(./GPB/GPBU)" />
								</smapit:url>
							</xsl:if>
							<xsl:if
								test="./GPB/GPBO and (not(starts-with(lower-case(normalize-space(./GPB/GPBO)), 'nr')) and not(starts-with(lower-case(normalize-space(./GPB/GPBO)), 'n.r')))">
								<arco-core:note>
									<xsl:value-of select="normalize-space(./GPB/GPBO)" />
								</arco-core:note>
							</xsl:if>
						</rdf:Description>
					</xsl:if>
					<!-- altitude for GE as an individual -->
					<xsl:if
						test="./GEC/GECZ | ../MT/MTA/MTAR | ../MT/MTA/MTAX | ../MT/MTA/MTAM">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
            			<xsl:value-of
								select="concat($NS, 'Altitude/', $itemURI, '-geometry-', $geometry-position, '-altitude')" />
            		</xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/location/Altitude" />
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Altitudine del bene culturale: ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Altitudine del bene culturale: ', $itemURI)" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Altitude of cultural property: ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Altitude of cultural property: ', $itemURI)" />
							</l0:name>
							<xsl:if
								test="./GEC/GECZ and (not(starts-with(lower-case(normalize-space(./GEC/GECZ)), 'nr')) and not(starts-with(lower-case(normalize-space(./GEC/GECZ)), 'n.r')))">
								<arco-location:alt>
									<xsl:value-of select="normalize-space(./GEC/GECZ)" />
								</arco-location:alt>
							</xsl:if>
							<xsl:if
								test="../MT/MTA/MTAR and (not(starts-with(lower-case(normalize-space(../MT/MTA/MTAR)), 'nr')) and not(starts-with(lower-case(normalize-space(./MT/MTA/MTAR)), 'n.r')))">
								<arco-location:relativeAlt>
									<xsl:value-of select="../MT/MTA/MTAR" />
								</arco-location:relativeAlt>
							</xsl:if>
							<xsl:if
								test="../MT/MTA/MTAX and (not(starts-with(lower-case(normalize-space(./MT/MTA/MTAX)), 'nr')) and not(starts-with(lower-case(normalize-space(./MT/MTA/MTAX)), 'n.r')))">
								<arco-location:maxAlt>
									<xsl:value-of select="../MT/MTA/MTAX" />
								</arco-location:maxAlt>
							</xsl:if>
							<xsl:if
								test="../MT/MTA/MTAM and (not(starts-with(lower-case(normalize-space(./MT/MTA/MTAM)), 'nr')) and not(starts-with(lower-case(normalize-space(./MT/MTA/MTAM)), 'n.r')))">
								<arco-location:minAlt>
									<xsl:value-of select="../MT/MTA/MTAM" />
								</arco-location:minAlt>
							</xsl:if>
							<xsl:if test="../MT/MTA/MTAS">
								<arco-core:note>
									<xsl:value-of select="../MT/MTA/MTAS" />
								</arco-core:note>
							</xsl:if>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- Geometry of cultural property as an individual for GP (Point) -->
			<xsl:for-each select="record/metadata/schede/*/GP">
				<xsl:variable name="geometry-position"
					select="position()" />
				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of
						select="concat($NS, 'Geometry/', $itemURI, '-geometry-point-', position())" />
            		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of
							select="'https://w3id.org/italia/onto/CLV/Geometry'" />
            			</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Geometry (point) ', position(), ' of cultural property: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Geometry (point) ', position(), ' of cultural property: ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Georeferenziazione (puntuale) ', position(), ' del bene culturale: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Georeferenziazione (puntuale) ', position(), ' del bene culturale: ', $itemURI)" />
					</l0:name>
					<clvapit:isGeometryFor>
						<xsl:attribute name="rdf:resource">
				           <xsl:value-of
							select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
				        </xsl:attribute>
					</clvapit:isGeometryFor>
					<clvapit:hasGeometryType>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/italia/onto/CLV/Point'" />
                        </xsl:attribute>
					</clvapit:hasGeometryType>
					<xsl:for-each select="./GPD/GPDP">
						<arco-location:hasCoordinates>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'Coordinates/', $itemURI, '-geometry-point-', $geometry-position, '-coordinates', '-', position())" />
            				</xsl:attribute>
						</arco-location:hasCoordinates>
					</xsl:for-each>
					<xsl:if
						test="./GPP and (not(starts-with(lower-case(normalize-space(./GPP)), 'nr')) and not(starts-with(lower-case(normalize-space(./GPP)), 'n.r')))">
						<arco-location:spacialReferenceSystem>
							<xsl:value-of select="normalize-space(./GPP)" />
						</arco-location:spacialReferenceSystem>
					</xsl:if>
					<xsl:if
						test="./GPC/GPCT and (not(starts-with(lower-case(normalize-space(./GPC/GPCT)), 'nr')) and not(starts-with(lower-case(normalize-space(./GPC/GPCT)), 'n.r')))">
						<arco-location:pointType>
							<xsl:value-of select="normalize-space(./GPC/GPCT)" />
						</arco-location:pointType>
					</xsl:if>
					<xsl:if
						test="./GPT and (not(starts-with(lower-case(normalize-space(./GPT)), 'nr')) and not(starts-with(lower-case(normalize-space(./GPT)), 'n.r')))">
						<arco-location:hasGeometryTechnique>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'GeometryTechnique/', arco-fn:urify(normalize-space(./GPT)))" />
            				</xsl:attribute>
						</arco-location:hasGeometryTechnique>
					</xsl:if>
					<xsl:if
						test="./GPM and (not(starts-with(lower-case(normalize-space(./GPM)), 'nr')) and not(starts-with(lower-case(normalize-space(./GPM)), 'n.r')))">
						<arco-location:hasGeometryMethod>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'GeometryMethod/', arco-fn:urify(normalize-space(./GPM)))" />
            				</xsl:attribute>
						</arco-location:hasGeometryMethod>
					</xsl:if>
					<xsl:if test="./GPB">
						<arco-location:hasBaseMap>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'BaseMap/', $itemURI, '-geometry-point-', $geometry-position, '-base-map')" />
            				</xsl:attribute>
						</arco-location:hasBaseMap>
					</xsl:if>
					<!-- has referred laction type -->
					<xsl:if test="./GPL and not(./GPL='.' or ./GPL='-' or ./GPL='/') and (not(starts-with(lower-case(normalize-space(./GPL)), 'nr')) and not(starts-with(lower-case(normalize-space(./GPL)), 'n.r')))">
						<arco-location:hasLocationType>
							<xsl:attribute name="rdf:resource">
					                                <xsl:choose>
					                                    <xsl:when
								test="lower-case(normalize-space(./GPL))='luogo di provenienza/collocazione precedente' or lower-case(normalize-space(./GPL))='luogo di provenienza' or lower-case(normalize-space(./GPL))='provenienza' or lower-case(normalize-space(./GPL))='provenienza'">
					                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/location/LastLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
								test="lower-case(normalize-space(./GPL))='luogo di produzione/realizzazione' or lower-case(normalize-space(./GPL))='luogo di esecuzione/fabbricazione'">
					                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/location/ProductionRealizationLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
								test="lower-case(normalize-space(./GPL))='luogo di reperimento' or lower-case(normalize-space(./GPL))='luogo di reperimento' or lower-case(normalize-space(./GPL))='reperimento' or lower-case(normalize-space(./GPL))='reperimento'">
					                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/location/FindingLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
								test="lower-case(normalize-space(./GPL))='luogo di deposito' or lower-case(normalize-space(./GPL))='luogo di deposito' or lower-case(normalize-space(./GPL))='deposito temporaneo' or lower-case(normalize-space(./GPL))='deposito temporaneo' or lower-case(normalize-space(./GPL))='deposito' or lower-case(normalize-space(./GPL))='deposito'">
					                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/location/StorageLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
								test="lower-case(normalize-space(./GPL))='luogo di esposizione' or lower-case(normalize-space(./GPL))='luogo di esposizione' or lower-case(normalize-space(./GPL))='espositiva' or lower-case(normalize-space(./GPL))='espositiva' or lower-case(normalize-space(./GPL))='espositivo' or lower-case(normalize-space(./GPL))='espositivo' or lower-case(normalize-space(./GPL))='esposizione' or lower-case(normalize-space(./GPL))='esposizione'">
					                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/location/ExhibitionLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
								test="lower-case(normalize-space(./GPL))='luogo di rilevamento' or lower-case(normalize-space(./GPL))='luogo di rilevamento' or lower-case(normalize-space(./GPL))='di rilevamento' or lower-case(normalize-space(./GPL))='di rilevamento' or lower-case(normalize-space(./GPL))='localizzazione di rilevamento' or lower-case(normalize-space(./GPL))='localizzazione di rilevamento'">
					                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/location/ObservationLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
								test="lower-case(normalize-space(./GPL))='area rappresentata' or lower-case(normalize-space(./GPL))='area rappresentata'">
					                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/location/SubjectLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
								test="lower-case(normalize-space(./GPL))='localizzazione fisica'">
					                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/location/CurrentPhysicalLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
								test="./GPL">
					                                        <xsl:value-of
								select="concat($NS, 'LocationType/', arco-fn:urify(normalize-space(./GPL)))" />
					                                    </xsl:when>
					                                </xsl:choose>
					                            </xsl:attribute>
						</arco-location:hasLocationType>
					</xsl:if>
				</rdf:Description>
				<!-- referred location type for GE as an individual -->
				<xsl:if test="./GPL and not(./GPL='.' or ./GPL='-' or ./GPL='/') and (not(starts-with(lower-case(normalize-space(./GPL)), 'nr')) and not(starts-with(lower-case(normalize-space(./GPL)), 'n.r')))">
					<xsl:choose>
						<xsl:when
							test="lower-case(normalize-space(./GPL))='luogo di provenienza/collocazione precedente' or lower-case(normalize-space(./GPL))='luogo di provenienza' or lower-case(normalize-space(./GPL))='provenienza' or lower-case(normalize-space(./GPL))='provenienza'" />
						<xsl:when
							test="lower-case(normalize-space(./GPL))='luogo di produzione/realizzazione' or lower-case(normalize-space(./GPL))='luogo di esecuzione/fabbricazione'" />
						<xsl:when
							test="lower-case(normalize-space(./GPL))='luogo di reperimento' or lower-case(normalize-space(./GPL))='luogo di reperimento' or lower-case(normalize-space(./GPL))='reperimento' or lower-case(normalize-space(./GPL))='reperimento'" />
						<xsl:when
							test="lower-case(normalize-space(./GPL))='luogo di deposito' or lower-case(normalize-space(./GPL))='luogo di deposito' or lower-case(normalize-space(./GPL))='deposito temporaneo' or lower-case(normalize-space(./GPL))='deposito temporaneo' or lower-case(normalize-space(./GPL))='deposito' or lower-case(normalize-space(./GPL))='deposito'" />
						<xsl:when
							test="lower-case(normalize-space(./GPL))='luogo di esposizione' or lower-case(normalize-space(./GPL))='luogo di esposizione' or lower-case(normalize-space(./GPL))='espositiva' or lower-case(normalize-space(./GPL))='espositiva' or lower-case(normalize-space(./GPL))='espositivo' or lower-case(normalize-space(./GPL))='espositivo' or lower-case(normalize-space(./GEL))='esposizione' or lower-case(normalize-space(./GPL))='esposizione'" />
						<xsl:when
							test="lower-case(normalize-space(./GPL))='luogo di rilevamento' or lower-case(normalize-space(./GPL))='luogo di rilevamento' or lower-case(normalize-space(./GPL))='di rilevamento' or lower-case(normalize-space(./GPL))='di rilevamento' or lower-case(normalize-space(./GPL))='localizzazione di rilevamento' or lower-case(normalize-space(./GPL))='localizzazione di rilevamento'" />
						<xsl:when
							test="lower-case(normalize-space(./GPL))='area rappresentata' or lower-case(normalize-space(./GPL))='area rappresentata'" />
						<xsl:when test="./GPL">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                    <xsl:value-of
									select="concat($NS, 'LocationType/', arco-fn:urify(normalize-space(./GPL)))" />
                                </xsl:attribute>
								<rdf:type
									rdf:resource="https://w3id.org/arco/ontology/location/LocationType" />
								<rdfs:label>
									<xsl:value-of select="normalize-space(./GPL)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./GPL)" />
								</l0:name>
							</rdf:Description>
						</xsl:when>
					</xsl:choose>
				</xsl:if>
				<!-- geometry coordinates for GP as an individual -->
				<xsl:for-each select="./GPD/GPDP">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	            			<xsl:value-of
							select="concat($NS, 'Coordinates/', $itemURI, '-geometry-point-', $geometry-position, '-coordinates', '-', position())" />
	            		</xsl:attribute>
						<rdf:type
							rdf:resource="https://w3id.org/arco/ontology/location/Coordinates" />
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Coordinates ', position(), ' of cultural property: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Coordinates ', position(), ' of cultural property: ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Coordinate ', position(), ' del bene culturale: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Coordinate ', position(), ' del bene culturale: ', $itemURI)" />
						</l0:name>
						<xsl:if
							test="./GPDPX and (not(starts-with(lower-case(normalize-space(./GPDPX)), 'nr')) and not(starts-with(lower-case(normalize-space(./GPDPX)), 'n.r')))">
							<arco-location:long>
								<xsl:value-of select="normalize-space(./GPDPX)" />
							</arco-location:long>
						</xsl:if>
						<xsl:if
							test="./GPDPY and (not(starts-with(lower-case(normalize-space(./GPDPY)), 'nr')) and not(starts-with(lower-case(normalize-space(./GPDPY)), 'n.r')))">
							<arco-location:lat>
								<xsl:value-of select="normalize-space(./GPDPY)" />
							</arco-location:lat>
						</xsl:if>
						<xsl:if
							test="../../GPC/GPCL | ../../GPC/GPCI | ../../GPC/GPCS">
							<arco-location:hasAltitude>
								<xsl:attribute name="rdf:resource">
	            					<xsl:value-of
									select="concat($NS, 'Altitude/', $itemURI, '-geometry-point-', $geometry-position, '-altitude')" />
	            				</xsl:attribute>
							</arco-location:hasAltitude>
						</xsl:if>
					</rdf:Description>
				</xsl:for-each>
				<!-- geometry technique for GP as an individual -->
				<xsl:if
					test="./GPT and (not(starts-with(lower-case(normalize-space(./GPT)), 'nr')) and not(starts-with(lower-case(normalize-space(./GPT)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	            			<xsl:value-of
							select="concat($NS, 'GeometryTechnique/', arco-fn:urify(normalize-space(./GPT)))" />
	            		</xsl:attribute>
						<rdf:type
							rdf:resource="https://w3id.org/arco/ontology/location/GeometryTechnique" />
						<rdfs:label>
							<xsl:value-of select="normalize-space(./GPT)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./GPT)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- geometry method for GP as an individual -->
				<xsl:if
					test="./GPM and (not(starts-with(lower-case(normalize-space(./GPM)), 'nr')) and not(starts-with(lower-case(normalize-space(./GPM)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	            			<xsl:value-of
							select="concat($NS, 'GeometryMethod/', arco-fn:urify(normalize-space(./GPM)))" />
	            		</xsl:attribute>
						<rdf:type
							rdf:resource="https://w3id.org/arco/ontology/location/GeometryMethod" />
						<rdfs:label>
							<xsl:value-of select="normalize-space(./GPM)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./GPM)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- geometry base map for GP as an individual -->
				<xsl:if test="./GPB">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	            			<xsl:value-of
							select="concat($NS, 'BaseMap/', $itemURI, '-geometry-point-', $geometry-position, '-base-map')" />
	            		</xsl:attribute>
						<rdf:type
							rdf:resource="https://w3id.org/arco/ontology/location/BaseMap" />
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Base cartografica del bene culturale: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Base cartografica del bene culturale: ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Base map of cultural property: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Base map of cultural property: ', $itemURI)" />
						</l0:name>
						<xsl:if test="./GPB/GPBB">
							<arco-core:description>
								<xsl:value-of select="normalize-space(./GPB/GPBB)" />
							</arco-core:description>
						</xsl:if>
						<xsl:if
							test="./GPB/GPBT and (not(starts-with(lower-case(normalize-space(./GPB/GPBT)), 'nr')) and not(starts-with(lower-case(normalize-space(./GPB/GPBT)), 'n.r')))">
							<tiapit:time>
								<xsl:value-of select="normalize-space(./GPB/GPBT)" />
							</tiapit:time>
						</xsl:if>
						<xsl:if test="./GPB/GPBO">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./GPB/GPBO)" />
							</arco-core:note>
						</xsl:if>
					</rdf:Description>
				</xsl:if>
				<!-- altitude for GP as an individual -->
				<xsl:if test="./GPC/GPCL | ./GPC/GPCI | ./GPC/GPCS">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'Altitude/', $itemURI, '-geometry-point-', $geometry-position, '-altitude')" />
            		</xsl:attribute>
						<rdf:type
							rdf:resource="https://w3id.org/arco/ontology/location/Altitude" />
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Altitudine del bene culturale: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Altitudine del bene culturale: ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Altitude of cultural property: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Altitude of cultural property: ', $itemURI)" />
						</l0:name>
						<xsl:if
							test="./GPC/GPCL and (not(starts-with(lower-case(normalize-space(./GPC/GPCL)), 'nr')) and not(starts-with(lower-case(normalize-space(./GPC/GPCL)), 'n.r')))">
							<arco-location:alt>
								<xsl:value-of select="normalize-space(./GPC/GPCL)" />
							</arco-location:alt>
						</xsl:if>
						<xsl:if
							test="./GPC/GPCS and (not(starts-with(lower-case(normalize-space(./GPC/GPCS)), 'nr')) and not(starts-with(lower-case(normalize-space(./GPC/GPCS)), 'n.r')))">
							<arco-location:maxAlt>
								<xsl:value-of select="normalize-space(./GPC/GPCS)" />
							</arco-location:maxAlt>
						</xsl:if>
						<xsl:if
							test="./GPC/GPCI and (not(starts-with(lower-case(normalize-space(./GPC/GPCI)), 'nr')) and not(starts-with(lower-case(normalize-space(./GPC/GPCI)), 'n.r')))">
							<arco-location:minAlt>
								<xsl:value-of select="normalize-space(./GPC/GPCI)" />
							</arco-location:minAlt>
						</xsl:if>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- Geometry of cultural property as an individual for geocoding -->
			<xsl:if test="record/metadata/schede/harvesting/geocoding/*">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of select="concat($NS, 'Geometry/', $itemURI, '-geometry-point')" />
            		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of
							select="'https://w3id.org/italia/onto/CLV/Geometry'" />
            			</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Geometry (point) of cultural property: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Geometry (point) of cultural property: ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Georeferenziazione (puntuale) del bene culturale: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Georeferenziazione (puntuale) del bene culturale: ', $itemURI)" />
					</l0:name>
					<clvapit:isGeometryFor>
						<xsl:attribute name="rdf:resource">
				           <xsl:value-of
							select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
				        </xsl:attribute>
					</clvapit:isGeometryFor>
					<clvapit:hasGeometryType>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of select="'https://w3id.org/italia/onto/CLV/Point'" />
                        </xsl:attribute>
					</clvapit:hasGeometryType>
					<!-- http://www.openlinksw.com/schemas/virtrdf#Geometry virtuoso datatype for geometry -->
					<!-- http://www.opengis.net/ont/geosparql#wktLiteral virtuoso datatype for geometry -->
					<clvapit:serialization rdf:datatype= "http://www.openlinksw.com/schemas/virtrdf#Geometry">
						<!-- xsl:text disable-output-escaping="yes">&lt;![CDATA[ &lt;http://www.opengis.net/def/crs/OGC/1.3/CRS84&gt; </xsl:text-->
						<xsl:text disable-output-escaping="yes">&lt;![CDATA[</xsl:text>
						<xsl:value-of select="normalize-space(concat('POINT(', record/metadata/schede/harvesting/geocoding/x, ' ', record/metadata/schede/harvesting/geocoding/y, ')'))" />
						<xsl:text disable-output-escaping="yes">]]&gt;</xsl:text>
					</clvapit:serialization>
					<arco-location:hasCoordinates>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of select="concat($NS, 'Coordinates/', $itemURI, '-geometry-', 'coordinates')" />
            			</xsl:attribute>
					</arco-location:hasCoordinates>
				</rdf:Description>
			</xsl:if>
			<!-- geometry coordinates for geocoding as an individual -->
	<xsl:if test="record/metadata/schede/harvesting/geocoding/*">
		<rdf:Description>
			<xsl:attribute name="rdf:about">
            	<xsl:value-of select="concat($NS, 'Coordinates/', $itemURI, '-geometry-', 'coordinates')" />
            </xsl:attribute>
			<rdf:type rdf:resource="https://w3id.org/arco/ontology/location/Coordinates" />
			<rdfs:label xml:lang="en">
				<xsl:value-of select="concat('Coordinates of cultural property: ', $itemURI)" />
			</rdfs:label>
			<l0:name xml:lang="en">
				<xsl:value-of select="concat('Coordinates of cultural property: ', $itemURI)" />
			</l0:name>
			<rdfs:label xml:lang="it">
				<xsl:value-of select="concat('Coordinate del bene culturale: ', $itemURI)" />
			</rdfs:label>
			<l0:name xml:lang="it">
				<xsl:value-of select="concat('Coordinate del bene culturale: ', $itemURI)" />
			</l0:name>
			<arco-location:long>
				<xsl:value-of select="normalize-space(record/metadata/schede/harvesting/geocoding/x)" />
			</arco-location:long>
			<arco-location:lat>
				<xsl:value-of select="normalize-space(record/metadata/schede/harvesting/geocoding/y)" />
			</arco-location:lat>
		</rdf:Description>
	</xsl:if>
			<!-- Geometry for RA 2.00 -->
			<xsl:if test="record/metadata/schede/*/RP/LGI">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of select="concat($NS, 'Geometry/', $itemURI, '-geometry-point')" />
            		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of select="'https://w3id.org/italia/onto/CLV/Geometry'" />
            			</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:value-of select="concat('Geometry (point) of cultural property: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of select="concat('Geometry (point) of cultural property: ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:value-of select="concat('Georeferenziazione (puntuale) del bene culturale: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of select="concat('Georeferenziazione (puntuale) del bene culturale: ', $itemURI)" />
					</l0:name>
					<clvapit:isGeometryFor>
						<xsl:attribute name="rdf:resource">
				           <xsl:value-of select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
				        </xsl:attribute>
					</clvapit:isGeometryFor>
					<clvapit:hasGeometryType>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of select="'https://w3id.org/italia/onto/CLV/Point'" />
                        </xsl:attribute>
					</clvapit:hasGeometryType>
					<arco-location:hasBaseMap>
						<xsl:attribute name="rdf:resource">
            					<xsl:value-of select="concat($NS, 'BaseMap/', $itemURI, '-geometry-point-base-map')" />
            				</xsl:attribute>
					</arco-location:hasBaseMap>
				</rdf:Description>
				<!-- geometry base map for GP as an individual -->
				<rdf:Description>
					<xsl:attribute name="rdf:about">
	            			<xsl:value-of select="concat($NS, 'BaseMap/', $itemURI, '-geometry-point-base-map')" />
	            		</xsl:attribute>
					<rdf:type rdf:resource="https://w3id.org/arco/ontology/location/BaseMap" />
					<rdfs:label xml:lang="it">
						<xsl:value-of select="concat('Base cartografica del bene culturale: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Base cartografica del bene culturale: ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of select="concat('Base map of cultural property: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of select="concat('Base map of cultural property: ', $itemURI)" />
					</l0:name>
					<xsl:if test="record/metadata/schede/*/RP/LGI/LGIT or record/metadata/schede/*/RP/LGI/LGIN or record/metadata/schede/*/RP/LGI/LGIQ">
						<arco-core:description>
							<xsl:choose>
								<xsl:when test="record/metadata/schede/*/RP/LGI/LGIT and record/metadata/schede/*/RP/LGI/LGIN and record/metadata/schede/*/RP/LGI/LGIQ">
									<xsl:value-of select="concat(normalize-space(record/metadata/schede/*/RP/LGI/LGIT), ' | ', normalize-space(record/metadata/schede/*/RP/LGI/LGIN), ' | ', normalize-space(record/metadata/schede/*/RP/LGI/LGIQ))" />
								</xsl:when>
								<xsl:when test="record/metadata/schede/*/RP/LGI/LGIT and (record/metadata/schede/*/RP/LGI/LGIN or record/metadata/schede/*/RP/LGI/LGIQ)">
									<xsl:value-of select="concat(normalize-space(record/metadata/schede/*/RP/LGI/LGIT), ' | ', normalize-space(record/metadata/schede/*/RP/LGI/LGIN), normalize-space(record/metadata/schede/*/RP/LGI/LGIQ))" />
								</xsl:when>
								<xsl:when test="record/metadata/schede/*/RP/LGI/LGIN and record/metadata/schede/*/RP/LGI/LGIQ">
									<xsl:value-of select="concat(normalize-space(record/metadata/schede/*/RP/LGI/LGIN), ' | ', normalize-space(record/metadata/schede/*/RP/LGI/LGIQ))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="concat(normalize-space(record/metadata/schede/*/RP/LGI/LGIT), normalize-space(record/metadata/schede/*/RP/LGI/LGIN), normalize-space(record/metadata/schede/*/RP/LGI/LGIQ))" />
								</xsl:otherwise>
							</xsl:choose>
						</arco-core:description>
					</xsl:if>
					<xsl:if test="record/metadata/schede/*/RP/LGI/LGIC">
						<arco-core:note>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/RP/LGI/LGIC)" />
						</arco-core:note>
					</xsl:if>
				</rdf:Description>
			</xsl:if>
			<!-- Geometry for A 2.00 -->
			<xsl:if test="record/metadata/schede/*/CR">

				<rdf:Description>
					<xsl:attribute name="rdf:about">
            			<xsl:value-of
						select="concat($NS, 'Geometry/', $itemURI, '-geometry-point')" />
            		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
            				<xsl:value-of
							select="'https://w3id.org/italia/onto/CLV/Geometry'" />
            			</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Geometry (point) of cultural property: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Geometry (point) of cultural property: ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Georeferenziazione (puntuale) del bene culturale: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Georeferenziazione (puntuale) del bene culturale: ', $itemURI)" />
					</l0:name>
					<clvapit:isGeometryFor>
						<xsl:attribute name="rdf:resource">
				           <xsl:value-of
							select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
				        </xsl:attribute>
					</clvapit:isGeometryFor>
					<clvapit:hasGeometryType>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/italia/onto/CLV/Point'" />
                        </xsl:attribute>
					</clvapit:hasGeometryType>
					<xsl:if
						test="record/metadata/schede/*/CR/CRD/CRDX or record/metadata/schede/*/CR/CRD/CRDY or record/metadata/schede/*/CR/CRD/CRDZ">
						<arco-location:hasCoordinates>
							<xsl:attribute name="rdf:resource">
            					<xsl:value-of
								select="concat($NS, 'Coordinates/', $itemURI, '-geometry-point-coordinates')" />
            				</xsl:attribute>
						</arco-location:hasCoordinates>
					</xsl:if>
					<xsl:if
						test="record/metadata/schede/*/CR/CRD/CRDR and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CR/CRD/CRDR)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CR/CRD/CRDR)), 'n.r')))">
						<arco-location:spacialReferenceSystem>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/CR/CRD/CRDR)" />
						</arco-location:spacialReferenceSystem>
					</xsl:if>
				</rdf:Description>
				<!-- geometry coordinates for GP as an individual -->
				<xsl:if test="record/metadata/schede/*/CR/CRD/CRDX or record/metadata/schede/*/CR/CRD/CRDY or record/metadata/schede/*/CR/CRD/CRDZ">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	            			<xsl:value-of
							select="concat($NS, 'Coordinates/', $itemURI, '-geometry-point-coordinates')" />
	            		</xsl:attribute>
						<rdf:type
							rdf:resource="https://w3id.org/arco/ontology/location/Coordinates" />
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Coordinates of cultural property: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Coordinates of cultural property: ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Coordinate del bene culturale: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Coordinate del bene culturale: ', $itemURI)" />
						</l0:name>
						<xsl:if
							test="record/metadata/schede/*/CR/CRD/CRDX and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CR/CRD/CRDX)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CR/CRD/CRDX)), 'n.r')))">
							<arco-location:long>
								<xsl:value-of
									select="normalize-space(record/metadata/schede/*/CR/CRD/CRDX)" />
							</arco-location:long>
						</xsl:if>
						<xsl:if
							test="record/metadata/schede/*/CR/CRD/CRDY and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CR/CRD/CRDY)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CR/CRD/CRDY)), 'n.r')))">
							<arco-location:lat>
								<xsl:value-of
									select="normalize-space(record/metadata/schede/*/CR/CRD/CRDY)" />
							</arco-location:lat>
						</xsl:if>
						<xsl:if test="record/metadata/schede/*/CR/CRD/CRDZ">
							<arco-location:hasAltitude>
								<xsl:attribute name="rdf:resource">
	            					<xsl:value-of
									select="concat($NS, 'Altitude/', $itemURI, '-geometry-point-altitude')" />
	            				</xsl:attribute>
							</arco-location:hasAltitude>
						</xsl:if>
					</rdf:Description>
				</xsl:if>
				<!-- altitude for GP as an individual -->
				<xsl:if test="record/metadata/schede/*/CR/CRD/CRDZ">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'Altitude/', $itemURI, '-geometry-point-altitude')" />
            		</xsl:attribute>
						<rdf:type
							rdf:resource="https://w3id.org/arco/ontology/location/Altitude" />
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Altitudine del bene culturale: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Altitudine del bene culturale: ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Altitude of cultural property: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Altitude of cultural property: ', $itemURI)" />
						</l0:name>
						<arco-location:alt>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/CR/CRD/CRDZ)" />
						</arco-location:alt>
					</rdf:Description>
				</xsl:if>
			</xsl:if>
			<!-- Geometry of cultural property as an individual for GL (Line) -->
			<xsl:if test="record/metadata/schede/*/GL/*/*">
				<xsl:for-each select="record/metadata/schede/*/GL">
					<xsl:variable name="geometry-position"
						select="position()" />
					<rdf:Description>
						<xsl:attribute name="rdf:about">
            			<xsl:value-of
							select="concat($NS, 'Geometry/', $itemURI, '-geometry-line-', position())" />
            		</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            				<xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/Geometry'" />
            			</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Geometry (line) ', position(), ' of cultural property: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Geometry (line) ', position(), ' of cultural property: ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Georeferenziazione (lineare) ', position(), ' del bene culturale: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Georeferenziazione (lineare) ', position(), ' del bene culturale: ', $itemURI)" />
						</l0:name>
						<clvapit:isGeometryFor>
							<xsl:attribute name="rdf:resource">
				           <xsl:value-of
								select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
				        </xsl:attribute>
						</clvapit:isGeometryFor>
						<clvapit:hasGeometryType>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/Line'" />
                        </xsl:attribute>
						</clvapit:hasGeometryType>
						<xsl:for-each select="./GLD/GLDP">
							<arco-location:hasCoordinates>
								<xsl:attribute name="rdf:resource">
            					<xsl:value-of
									select="concat($NS, 'Coordinates/', $itemURI, '-geometry-line-', $geometry-position, '-coordinates', '-', position())" />
            				</xsl:attribute>
							</arco-location:hasCoordinates>
						</xsl:for-each>
						<xsl:if
							test="./GLP and (not(starts-with(lower-case(normalize-space(./GLP)), 'nr')) and not(starts-with(lower-case(normalize-space(./GLP)), 'n.r')))">
							<arco-location:spacialReferenceSystem>
								<xsl:value-of select="normalize-space(./GLP)" />
							</arco-location:spacialReferenceSystem>
						</xsl:if>
						<xsl:if
							test="./GLT and (not(starts-with(lower-case(normalize-space(./GLT)), 'nr')) and not(starts-with(lower-case(normalize-space(./GLT)), 'n.r')))">
							<arco-location:hasGeometryTechnique>
								<xsl:attribute name="rdf:resource">
            					<xsl:value-of
									select="concat($NS, 'GeometryTechnique/', arco-fn:urify(normalize-space(./GLT)))" />
            				</xsl:attribute>
							</arco-location:hasGeometryTechnique>
						</xsl:if>
						<xsl:if
							test="./GLM and (not(starts-with(lower-case(normalize-space(./GLM)), 'nr')) and not(starts-with(lower-case(normalize-space(./GLM)), 'n.r')))">
							<arco-location:hasGeometryMethod>
								<xsl:attribute name="rdf:resource">
            					<xsl:value-of
									select="concat($NS, 'GeometryMethod/', arco-fn:urify(normalize-space(./GLM)))" />
            				</xsl:attribute>
							</arco-location:hasGeometryMethod>
						</xsl:if>
						<xsl:if test="./GLB">
							<arco-location:hasBaseMap>
								<xsl:attribute name="rdf:resource">
            					<xsl:value-of
									select="concat($NS, 'BaseMap/', $itemURI, '-geometry-line-', $geometry-position, '-base-map')" />
            				</xsl:attribute>
							</arco-location:hasBaseMap>
						</xsl:if>
						<xsl:if
							test="./GLL and not(./GLL='.' or ./GLL='-' or ./GLL='/') and (not(starts-with(lower-case(normalize-space(./GLL)), 'nr')) and not(starts-with(lower-case(normalize-space(./GLL)), 'n.r')))">
							<arco-location:hasLocationType>
								<xsl:attribute name="rdf:resource">
					                                <xsl:choose>
					                                    <xsl:when
									test="lower-case(normalize-space(./GLL))='luogo di provenienza/collocazione precedente' or lower-case(normalize-space(./GLL))='luogo di provenienza' or lower-case(normalize-space(./GLL))='provenienza' or lower-case(normalize-space(./GLL))='provenienza'">
					                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/location/LastLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
									test="lower-case(normalize-space(./GLL))='luogo di produzione/realizzazione' or lower-case(normalize-space(./GLL))='luogo di esecuzione/fabbricazione'">
					                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/location/ProductionRealizationLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
									test="lower-case(normalize-space(./GLL))='luogo di reperimento' or lower-case(normalize-space(./GLL))='luogo di reperimento' or lower-case(normalize-space(./GLL))='reperimento' or lower-case(normalize-space(./GLL))='reperimento'">
					                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/location/FindingLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
									test="lower-case(normalize-space(./GLL))='luogo di deposito' or lower-case(normalize-space(./GLL))='luogo di deposito' or lower-case(normalize-space(./GLL))='deposito temporaneo' or lower-case(normalize-space(./GLL))='deposito temporaneo' or lower-case(normalize-space(./GLL))='deposito' or lower-case(normalize-space(./GLL))='deposito'">
					                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/location/StorageLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
									test="lower-case(normalize-space(./GLL))='luogo di esposizione' or lower-case(normalize-space(./GLL))='luogo di esposizione' or lower-case(normalize-space(./GLL))='espositiva' or lower-case(normalize-space(./GLL))='espositiva' or lower-case(normalize-space(./GLL))='espositivo' or lower-case(normalize-space(./GLL))='espositivo' or lower-case(normalize-space(./GLL))='esposizione' or lower-case(normalize-space(./GLL))='esposizione'">
					                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/location/ExhibitionLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
									test="lower-case(normalize-space(./GLL))='luogo di rilevamento' or lower-case(normalize-space(./GLL))='luogo di rilevamento' or lower-case(normalize-space(./GLL))='di rilevamento' or lower-case(normalize-space(./GLL))='di rilevamento' or lower-case(normalize-space(./GLL))='localizzazione di rilevamento' or lower-case(normalize-space(./GLL))='localizzazione di rilevamento'">
					                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/location/ObservationLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
									test="lower-case(normalize-space(./GLL))='area rappresentata' or lower-case(normalize-space(./GLL))='area rappresentata'">
					                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/location/SubjectLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
									test="lower-case(normalize-space(./GLL))='localizzazione fisica'">
					                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/location/CurrentPhysicalLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
									test="./GLL">
					                                        <xsl:value-of
									select="concat($NS, 'LocationType/', arco-fn:urify(normalize-space(./GLL)))" />
					                                    </xsl:when>
					                                </xsl:choose>
					                            </xsl:attribute>
							</arco-location:hasLocationType>
						</xsl:if>
					</rdf:Description>
					<!-- referred location type for GL as an individual -->
					<xsl:if
						test="./GLL and not(./GLL='.' or ./GLL='-' or ./GLL='/') and (not(starts-with(lower-case(normalize-space(./GLL)), 'nr')) and not(starts-with(lower-case(normalize-space(./GLL)), 'n.r')))">
						<xsl:choose>
							<xsl:when
								test="lower-case(normalize-space(./GLL))='luogo di provenienza/collocazione precedente' or lower-case(normalize-space(./GLL))='luogo di provenienza' or lower-case(normalize-space(./GLL))='provenienza' or lower-case(normalize-space(./GLL))='provenienza'" />
							<xsl:when
								test="lower-case(normalize-space(./GLL))='luogo di produzione/realizzazione' or lower-case(normalize-space(./GLL))='luogo di esecuzione/fabbricazione'" />
							<xsl:when
								test="lower-case(normalize-space(./GLL))='luogo di reperimento' or lower-case(normalize-space(./GLL))='luogo di reperimento' or lower-case(normalize-space(./GLL))='reperimento' or lower-case(normalize-space(./GLL))='reperimento'" />
							<xsl:when
								test="lower-case(normalize-space(./GLL))='luogo di deposito' or lower-case(normalize-space(./GLL))='luogo di deposito' or lower-case(normalize-space(./GLL))='deposito temporaneo' or lower-case(normalize-space(./GLL))='deposito temporaneo' or lower-case(normalize-space(./GLL))='deposito' or lower-case(normalize-space(./GLL))='deposito'" />
							<xsl:when
								test="lower-case(normalize-space(./GLL))='luogo di esposizione' or lower-case(normalize-space(./GLL))='luogo di esposizione' or lower-case(normalize-space(./GLL))='espositiva' or lower-case(normalize-space(./GLL))='espositiva' or lower-case(normalize-space(./GLL))='espositivo' or lower-case(normalize-space(./GLL))='espositivo' or lower-case(normalize-space(./GLL))='esposizione' or lower-case(normalize-space(./GLL))='esposizione'" />
							<xsl:when
								test="lower-case(normalize-space(./GLL))='luogo di rilevamento' or lower-case(normalize-space(./GLL))='luogo di rilevamento' or lower-case(normalize-space(./GLL))='di rilevamento' or lower-case(normalize-space(./GLL))='di rilevamento' or lower-case(normalize-space(./GLL))='localizzazione di rilevamento' or lower-case(normalize-space(./GLL))='localizzazione di rilevamento'" />
							<xsl:when
								test="lower-case(normalize-space(./GLL))='area rappresentata' or lower-case(normalize-space(./GLL))='area rappresentata'" />
							<xsl:when test="./GLL">
								<rdf:Description>
									<xsl:attribute name="rdf:about">
                                    <xsl:value-of
										select="concat($NS, 'LocationType/', arco-fn:urify(normalize-space(./GLL)))" />
                                </xsl:attribute>
									<rdf:type
										rdf:resource="https://w3id.org/arco/ontology/location/LocationType" />
									<rdfs:label>
										<xsl:value-of select="normalize-space(./GLL)" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of select="normalize-space(./GLL)" />
									</l0:name>
								</rdf:Description>
							</xsl:when>
						</xsl:choose>
					</xsl:if>
					<!-- geometry coordinates for GL as an individual -->
					<xsl:for-each select="./GLD/GLDP">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	            			<xsl:value-of
								select="concat($NS, 'Coordinates/', $itemURI, '-geometry-line-', $geometry-position, '-coordinates', '-', position())" />
	            		</xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/location/Coordinates" />
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Coordinates ', position(), ' of cultural property: ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Coordinates ', position(), ' of cultural property: ', $itemURI)" />
							</l0:name>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Coordinate ', position(), ' del bene culturale: ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Coordinate ', position(), ' del bene culturale: ', $itemURI)" />
							</l0:name>
							<xsl:if
								test="./GLDPX and (not(starts-with(lower-case(normalize-space(./GLDPX)), 'nr')) and not(starts-with(lower-case(normalize-space(./GLDPX)), 'n.r')))">
								<arco-location:long>
									<xsl:value-of select="normalize-space(./GLDPX)" />
								</arco-location:long>
							</xsl:if>
							<xsl:if
								test="./GLDPY and (not(starts-with(lower-case(normalize-space(./GLDPY)), 'nr')) and not(starts-with(lower-case(normalize-space(./GLDPY)), 'n.r')))">
								<arco-location:lat>
									<xsl:value-of select="normalize-space(./GLDPY)" />
								</arco-location:lat>
							</xsl:if>
							<xsl:if test="../../GLQ/GLQI | ../../GLQ/GLQS">
								<arco-location:hasAltitude>
									<xsl:attribute name="rdf:resource">
	            					<xsl:value-of
										select="concat($NS, 'Altitude/', $itemURI, '-geometry-line-', $geometry-position, '-altitude')" />
	            				</xsl:attribute>
								</arco-location:hasAltitude>
							</xsl:if>
						</rdf:Description>
					</xsl:for-each>
					<!-- geometry technique for GL as an individual -->
					<xsl:if test="./GLT">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	            			<xsl:value-of
								select="concat($NS, 'GeometryTechnique/', arco-fn:urify(normalize-space(./GLT)))" />
	            		</xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/location/GeometryTechnique" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(./GLT)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./GLT)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- geometry method for GL as an individual -->
					<xsl:if
						test="./GLM and (not(starts-with(lower-case(normalize-space(./GLM)), 'nr')) and not(starts-with(lower-case(normalize-space(./GLM)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	            			<xsl:value-of
								select="concat($NS, 'GeometryMethod/', arco-fn:urify(normalize-space(./GLM)))" />
	            		</xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/location/GeometryMethod" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(./GLM)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./GLM)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- geometry base map for GL as an individual -->
					<xsl:if
						test="./GLB and (not(starts-with(lower-case(normalize-space(./GLB)), 'nr')) and not(starts-with(lower-case(normalize-space(./GLB)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	            			<xsl:value-of
								select="concat($NS, 'BaseMap/', $itemURI, '-geometry-line-', $geometry-position, '-base-map')" />
	            		</xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/location/BaseMap" />
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Base cartografica del bene culturale: ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Base cartografica del bene culturale: ', $itemURI)" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Base map of cultural property: ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Base map of cultural property: ', $itemURI)" />
							</l0:name>
							<xsl:if test="./GLB/GLBB">
								<arco-core:description>
									<xsl:value-of select="normalize-space(./GLB/GLBB)" />
								</arco-core:description>
							</xsl:if>
							<xsl:if
								test="./GLB/GLBT and (not(starts-with(lower-case(normalize-space(./GLB/GLBT)), 'nr')) and not(starts-with(lower-case(normalize-space(./GLB/GLBT)), 'n.r')))">
								<tiapit:time>
									<xsl:value-of select="normalize-space(./GLB/GLBT)" />
								</tiapit:time>
							</xsl:if>
							<xsl:if test="./GLB/GLBO">
								<arco-core:note>
									<xsl:value-of select="normalize-space(./GLB/GLBO)" />
								</arco-core:note>
							</xsl:if>
						</rdf:Description>
					</xsl:if>
					<!-- altitude for GL as an individual -->
					<xsl:if test="./GLQ/GLQI | ./GLQ/GLQS">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	            			<xsl:value-of
								select="concat($NS, 'Altitude/', $itemURI, '-geometry-line-', $geometry-position, '-altitude')" />
	            		</xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/location/Altitude" />
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Altitudine del bene culturale: ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Altitudine del bene culturale: ', $itemURI)" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Altitude of cultural property: ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Altitude of cultural property: ', $itemURI)" />
							</l0:name>
							<xsl:if
								test="./GLQ/GLQS and (not(starts-with(lower-case(normalize-space(./GLQ/GLQS)), 'nr')) and not(starts-with(lower-case(normalize-space(./GLQ/GLQS)), 'n.r')))">
								<arco-location:maxAlt>
									<xsl:value-of select="normalize-space(./GLQ/GLQS)" />
								</arco-location:maxAlt>
							</xsl:if>
							<xsl:if
								test="./GLQ/GLQI and (not(starts-with(lower-case(normalize-space(./GLQ/GLQI)), 'nr')) and not(starts-with(lower-case(normalize-space(./GLQ/GLQI)), 'n.r')))">
								<arco-location:minAlt>
									<xsl:value-of select="normalize-space(./GLQ/GLQI)" />
								</arco-location:minAlt>
							</xsl:if>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- Geometry of cultural property as an individual for GA (Area) -->
			<xsl:if test="record/metadata/schede/*/GA">
				<xsl:variable name="geometry-position"
					select="position()" />
				<xsl:for-each select="record/metadata/schede/*/GA">
					<xsl:if test="record/metadata/schede/*/GA/*/*">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
            			<xsl:value-of
								select="concat($NS, 'Geometry/', $itemURI, '-geometry-polygon-', position())" />
            		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
            				<xsl:value-of
									select="'https://w3id.org/italia/onto/CLV/Geometry'" />
            			</xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Geometry (area) ', position(), ' of cultural property: ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Geometry (area) ', position(), ' of cultural property: ', $itemURI)" />
							</l0:name>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Georeferenziazione (areale) ', position(), ' del bene culturale: ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Georeferenziazione (areale) ', position(), ' del bene culturale: ', $itemURI)" />
							</l0:name>
							<clvapit:isGeometryFor>
								<xsl:attribute name="rdf:resource">
				           <xsl:value-of
									select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
				        </xsl:attribute>
							</clvapit:isGeometryFor>
							<clvapit:hasGeometryType>
								<xsl:attribute name="rdf:resource">
                            <xsl:value-of
									select="'https://w3id.org/italia/onto/CLV/Polygon'" />
                        </xsl:attribute>
							</clvapit:hasGeometryType>
							<xsl:for-each select="./GAD/GADP">
								<arco-location:hasCoordinates>
									<xsl:attribute name="rdf:resource">
            					<xsl:value-of
										select="concat($NS, 'Coordinates/', $itemURI, '-geometry-polygon-', $geometry-position, '-coordinates', '-', position())" />
            				</xsl:attribute>
								</arco-location:hasCoordinates>
							</xsl:for-each>
							<xsl:if
								test="./GAP and (not(starts-with(lower-case(normalize-space(./GAP)), 'nr')) and not(starts-with(lower-case(normalize-space(./GAP)), 'n.r')))">
								<arco-location:spacialReferenceSystem>
									<xsl:value-of select="normalize-space(./GAP)" />
								</arco-location:spacialReferenceSystem>
							</xsl:if>
							<xsl:if
								test="./GAT and (not(starts-with(lower-case(normalize-space(./GAT)), 'nr')) and not(starts-with(lower-case(normalize-space(./GAT)), 'n.r')))">
								<arco-location:hasGeometryTechnique>
									<xsl:attribute name="rdf:resource">
            					<xsl:value-of
										select="concat($NS, 'GeometryTechnique/', arco-fn:urify(normalize-space(./GAT)))" />
            				</xsl:attribute>
								</arco-location:hasGeometryTechnique>
							</xsl:if>
							<xsl:if
								test="./GAM and (not(starts-with(lower-case(normalize-space(./GAM)), 'nr')) and not(starts-with(lower-case(normalize-space(./GAM)), 'n.r')))">
								<arco-location:hasGeometryMethod>
									<xsl:attribute name="rdf:resource">
            					<xsl:value-of
										select="concat($NS, 'GeometryMethod/', arco-fn:urify(normalize-space(./GAM)))" />
            				</xsl:attribute>
								</arco-location:hasGeometryMethod>
							</xsl:if>
							<xsl:if test="./GAB">
								<arco-location:hasBaseMap>
									<xsl:attribute name="rdf:resource">
            					<xsl:value-of
										select="concat($NS, 'BaseMap/', $itemURI, '-geometry-polygon-', $geometry-position, '-base-map')" />
            				</xsl:attribute>
								</arco-location:hasBaseMap>
							</xsl:if>
							<xsl:if
								test="./GAL and not(./GAL='.' or ./GAL='-' or ./GAL='/') and (not(starts-with(lower-case(normalize-space(./GAL)), 'nr')) and not(starts-with(lower-case(normalize-space(./GAL)), 'n.r')))">
								<arco-location:hasLocationType>
									<xsl:attribute name="rdf:resource">
					                                <xsl:choose>
					                                    <xsl:when
										test="lower-case(normalize-space(./GAL))='luogo di provenienza/collocazione precedente' or lower-case(normalize-space(./GAL))='luogo di provenienza' or lower-case(normalize-space(./GAL))='provenienza' or lower-case(normalize-space(./GAL))='provenienza'">
					                                        <xsl:value-of
										select="'https://w3id.org/arco/ontology/location/LastLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
										test="lower-case(normalize-space(./GAL))='luogo di produzione/realizzazione' or lower-case(normalize-space(./GAL))='luogo di esecuzione/fabbricazione'">
					                                        <xsl:value-of
										select="'https://w3id.org/arco/ontology/location/ProductionRealizationLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
										test="lower-case(normalize-space(./GAL))='luogo di reperimento' or lower-case(normalize-space(./GAL))='luogo di reperimento' or lower-case(normalize-space(./GAL))='reperimento' or lower-case(normalize-space(./GAL))='reperimento'">
					                                        <xsl:value-of
										select="'https://w3id.org/arco/ontology/location/FindingLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
										test="lower-case(normalize-space(./GAL))='luogo di deposito' or lower-case(normalize-space(./GAL))='luogo di deposito' or lower-case(normalize-space(./GAL))='deposito temporaneo' or lower-case(normalize-space(./GAL))='deposito temporaneo' or lower-case(normalize-space(./GAL))='deposito' or lower-case(normalize-space(./GAL))='deposito'">
					                                        <xsl:value-of
										select="'https://w3id.org/arco/ontology/location/StorageLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
										test="lower-case(normalize-space(./GAL))='luogo di esposizione' or lower-case(normalize-space(./GAL))='luogo di esposizione' or lower-case(normalize-space(./GAL))='espositiva' or lower-case(normalize-space(./GAL))='espositiva' or lower-case(normalize-space(./GAL))='espositivo' or lower-case(normalize-space(./GAL))='espositivo' or lower-case(normalize-space(./GAL))='esposizione' or lower-case(normalize-space(./GAL))='esposizione'">
					                                        <xsl:value-of
										select="'https://w3id.org/arco/ontology/location/ExhibitionLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
										test="lower-case(normalize-space(./GAL))='luogo di rilevamento' or lower-case(normalize-space(./GAL))='luogo di rilevamento' or lower-case(normalize-space(./GAL))='di rilevamento' or lower-case(normalize-space(./GAL))='di rilevamento' or lower-case(normalize-space(./GAL))='localizzazione di rilevamento' or lower-case(normalize-space(./GAL))='localizzazione di rilevamento'">
					                                        <xsl:value-of
										select="'https://w3id.org/arco/ontology/location/ObservationLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
										test="lower-case(normalize-space(./GAL))='area rappresentata' or lower-case(normalize-space(./GAL))='area rappresentata'">
					                                        <xsl:value-of
										select="'https://w3id.org/arco/ontology/location/SubjectLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
										test="lower-case(normalize-space(./GAL))='localizzazione fisica'">
					                                        <xsl:value-of
										select="'https://w3id.org/arco/ontology/location/CurrentPhysicalLocation'" />
					                                    </xsl:when>
					                                    <xsl:when
										test="./GAL">
					                                        <xsl:value-of
										select="concat($NS, 'LocationType/', arco-fn:urify(normalize-space(./GAL)))" />
					                                    </xsl:when>
					                                </xsl:choose>
					                            </xsl:attribute>
								</arco-location:hasLocationType>
							</xsl:if>
						</rdf:Description>
						<!-- referred location type for GA as an individual -->
						<xsl:if
							test="./GAL and not(./GAL='.' or ./GAL='-' or ./GAL='/') and (not(starts-with(lower-case(normalize-space(./GAL)), 'nr')) and not(starts-with(lower-case(normalize-space(./GAL)), 'n.r')))">
							<xsl:choose>
								<xsl:when
									test="lower-case(normalize-space(./GAL))='luogo di provenienza/collocazione precedente' or lower-case(normalize-space(./GAL))='luogo di provenienza' or lower-case(normalize-space(./GAL))='provenienza' or lower-case(normalize-space(./GAL))='provenienza'" />
								<xsl:when
									test="lower-case(normalize-space(./GAL))='luogo di produzione/realizzazione' or lower-case(normalize-space(./GAL))='luogo di esecuzione/fabbricazione'" />
								<xsl:when
									test="lower-case(normalize-space(./GAL))='luogo di reperimento' or lower-case(normalize-space(./GAL))='luogo di reperimento' or lower-case(normalize-space(./GAL))='reperimento' or lower-case(normalize-space(./GAL))='reperimento'" />
								<xsl:when
									test="lower-case(normalize-space(./GAL))='luogo di deposito' or lower-case(normalize-space(./GAL))='luogo di deposito' or lower-case(normalize-space(./GAL))='deposito temporaneo' or lower-case(normalize-space(./GAL))='deposito temporaneo' or lower-case(normalize-space(./GAL))='deposito' or lower-case(normalize-space(./GAL))='deposito'" />
								<xsl:when
									test="lower-case(normalize-space(./GAL))='luogo di esposizione' or lower-case(normalize-space(./GAL))='luogo di esposizione' or lower-case(normalize-space(./GAL))='espositiva' or lower-case(normalize-space(./GAL))='espositiva' or lower-case(normalize-space(./GAL))='espositivo' or lower-case(normalize-space(./GAL))='espositivo' or lower-case(normalize-space(./GAL))='esposizione' or lower-case(normalize-space(./GAL))='esposizione'" />
								<xsl:when
									test="lower-case(normalize-space(./GAL))='luogo di rilevamento' or lower-case(normalize-space(./GAL))='luogo di rilevamento' or lower-case(normalize-space(./GAL))='di rilevamento' or lower-case(normalize-space(./GAL))='di rilevamento' or lower-case(normalize-space(./GAL))='localizzazione di rilevamento' or lower-case(normalize-space(./GAL))='localizzazione di rilevamento'" />
								<xsl:when
									test="lower-case(normalize-space(./GAL))='area rappresentata' or lower-case(normalize-space(./GAL))='area rappresentata'" />
								<xsl:when test="./GAL">
									<rdf:Description>
										<xsl:attribute name="rdf:about">
                                    <xsl:value-of
											select="concat($NS, 'LocationType/', arco-fn:urify(normalize-space(./GAL)))" />
                                </xsl:attribute>
										<rdf:type
											rdf:resource="https://w3id.org/arco/ontology/location/LocationType" />
										<rdfs:label>
											<xsl:value-of select="normalize-space(./GAL)" />
										</rdfs:label>
										<l0:name>
											<xsl:value-of select="normalize-space(./GAL)" />
										</l0:name>
									</rdf:Description>
								</xsl:when>
							</xsl:choose>
						</xsl:if>
						<!-- geometry coordinates for GL as an individual -->
						<xsl:for-each select="./GAD/GADP">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
	            			<xsl:value-of
									select="concat($NS, 'Coordinates/', $itemURI, '-geometry-polygon-', $geometry-position, '-coordinates', '-', position())" />
	            		</xsl:attribute>
								<rdf:type
									rdf:resource="https://w3id.org/arco/ontology/location/Coordinates" />
								<rdfs:label xml:lang="en">
									<xsl:value-of
										select="concat('Coordinates ', position(), ' of cultural property: ', $itemURI)" />
								</rdfs:label>
								<l0:name xml:lang="en">
									<xsl:value-of
										select="concat('Coordinates ', position(), ' of cultural property: ', $itemURI)" />
								</l0:name>
								<rdfs:label xml:lang="it">
									<xsl:value-of
										select="concat('Coordinate ', position(), ' del bene culturale: ', $itemURI)" />
								</rdfs:label>
								<l0:name xml:lang="en">
									<xsl:value-of
										select="concat('Coordinate ', position(), ' del bene culturale: ', $itemURI)" />
								</l0:name>
								<xsl:if
									test="./GADPX and (not(starts-with(lower-case(normalize-space(./GADPX)), 'nr')) and not(starts-with(lower-case(normalize-space(./GADPX)), 'n.r')))">
									<arco-location:long>
										<xsl:value-of select="normalize-space(./GADPX)" />
									</arco-location:long>
								</xsl:if>
								<xsl:if
									test="./GADPY and (not(starts-with(lower-case(normalize-space(./GADPY)), 'nr')) and not(starts-with(lower-case(normalize-space(./GADPY)), 'n.r')))">
									<arco-location:lat>
										<xsl:value-of select="normalize-space(./GADPY)" />
									</arco-location:lat>
								</xsl:if>
								<xsl:if test="../../GAQ/GAQI | ../../GAQ/GAQS">
									<arco-location:hasAltitude>
										<xsl:attribute name="rdf:resource">
	            					<xsl:value-of
											select="concat($NS, 'Altitude/', $itemURI, '-geometry-polygon-', $geometry-position, '-altitude')" />
	            				</xsl:attribute>
									</arco-location:hasAltitude>
								</xsl:if>
							</rdf:Description>
						</xsl:for-each>
						<!-- geometry technique for GA as an individual -->
						<xsl:if
							test="./GAT and (not(starts-with(lower-case(normalize-space(./GAT)), 'nr')) and not(starts-with(lower-case(normalize-space(./GAT)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
	            			<xsl:value-of
									select="concat($NS, 'GeometryTechnique/', arco-fn:urify(normalize-space(./GAT)))" />
	            		</xsl:attribute>
								<rdf:type
									rdf:resource="https://w3id.org/arco/ontology/location/GeometryTechnique" />
								<rdfs:label>
									<xsl:value-of select="normalize-space(./GAT)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./GAT)" />
								</l0:name>
							</rdf:Description>
						</xsl:if>
						<!-- geometry method for GA as an individual -->
						<xsl:if
							test="./GAM and (not(starts-with(lower-case(normalize-space(./GAM)), 'nr')) and not(starts-with(lower-case(normalize-space(./GAM)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
	            			<xsl:value-of
									select="concat($NS, 'GeometryMethod/', arco-fn:urify(normalize-space(./GAM)))" />
	            		</xsl:attribute>
								<rdf:type
									rdf:resource="https://w3id.org/arco/ontology/location/GeometryMethod" />
								<rdfs:label>
									<xsl:value-of select="normalize-space(./GAM)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./GAM)" />
								</l0:name>
							</rdf:Description>
						</xsl:if>
						<!-- geometry base map for GA as an individual -->
						<xsl:if test="./GAB">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
	            			<xsl:value-of
									select="concat($NS, 'BaseMap/', $itemURI, '-geometry-polygon-', $geometry-position, '-base-map')" />
	            		</xsl:attribute>
								<rdf:type
									rdf:resource="https://w3id.org/arco/ontology/location/BaseMap" />
								<rdfs:label xml:lang="it">
									<xsl:value-of
										select="concat('Base cartografica del bene culturale: ', $itemURI)" />
								</rdfs:label>
								<l0:name xml:lang="it">
									<xsl:value-of
										select="concat('Base cartografica del bene culturale: ', $itemURI)" />
								</l0:name>
								<rdfs:label xml:lang="en">
									<xsl:value-of
										select="concat('Base map of cultural property: ', $itemURI)" />
								</rdfs:label>
								<l0:name xml:lang="en">
									<xsl:value-of
										select="concat('Base map of cultural property: ', $itemURI)" />
								</l0:name>
								<xsl:if test="./GAB/GABB">
									<arco-core:description>
										<xsl:value-of
											select="normalize-space(./GAB/GABB)" />
									</arco-core:description>
								</xsl:if>
								<xsl:if
									test="./GAB/GABT and (not(starts-with(lower-case(normalize-space(./GAB/GABT)), 'nr')) and not(starts-with(lower-case(normalize-space(./GAB/GABT)), 'n.r')))">
									<tiapit:time>
										<xsl:value-of
											select="normalize-space(./GAB/GABT)" />
									</tiapit:time>
								</xsl:if>
								<xsl:if test="./GAB/GABO">
									<arco-core:note>
										<xsl:value-of
											select="normalize-space(./GAB/GABO)" />
									</arco-core:note>
								</xsl:if>
							</rdf:Description>
						</xsl:if>
						<!-- altitude for GA as an individual -->
						<xsl:if test="./GAQ/GAQI | ./GAQ/GAQS">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
	            			<xsl:value-of
									select="concat($NS, 'Altitude/', $itemURI, '-geometry-polygon-', $geometry-position, '-altitude')" />
	            		</xsl:attribute>
								<rdf:type
									rdf:resource="https://w3id.org/arco/ontology/location/Altitude" />
								<rdfs:label xml:lang="it">
									<xsl:value-of
										select="concat('Altitudine del bene culturale: ', $itemURI)" />
								</rdfs:label>
								<l0:name xml:lang="it">
									<xsl:value-of
										select="concat('Altitudine del bene culturale: ', $itemURI)" />
								</l0:name>
								<rdfs:label xml:lang="en">
									<xsl:value-of
										select="concat('Altitude of cultural property: ', $itemURI)" />
								</rdfs:label>
								<l0:name xml:lang="en">
									<xsl:value-of
										select="concat('Altitude of cultural property: ', $itemURI)" />
								</l0:name>
								<xsl:if
									test="./GAQ/GAQS and (not(starts-with(lower-case(normalize-space(./GAQ/GAQS)), 'nr')) and not(starts-with(lower-case(normalize-space(./GAQ/GAQS)), 'n.r')))">
									<arco-location:maxAlt>
										<xsl:value-of
											select="normalize-space(./GAQ/GAQS)" />
									</arco-location:maxAlt>
								</xsl:if>
								<xsl:if
									test="./GAQ/GAQI and (not(starts-with(lower-case(normalize-space(./GAQ/GAQI)), 'nr')) and not(starts-with(lower-case(normalize-space(./GAQ/GAQI)), 'n.r')))">
									<arco-location:minAlt>
										<xsl:value-of
											select="normalize-space(./GAQ/GAQI)" />
									</arco-location:minAlt>
								</xsl:if>
							</rdf:Description>
						</xsl:if>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- Name in time for 4.00 -->
			<xsl:for-each select="record/metadata/schede/*/OG/OGD">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        	<xsl:value-of
						select="concat($NS,'DesignationInTime/', $itemURI, '-', arco-fn:urify(normalize-space(./OGDN)))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/denotative-description/DesignationInTime'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of select="normalize-space(./OGDN)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of select="normalize-space(./OGDN)" />
					</l0:name>
					<xsl:if
						test="./OGDR and (not(starts-with(lower-case(normalize-space(./OGDR)), 'nr')) and not(starts-with(lower-case(normalize-space(./OGDR)), 'n.r')))">
						<tiapit:time>
							<xsl:value-of select="normalize-space(./OGDR)" />
						</tiapit:time>
					</xsl:if>
					<xsl:if test="./OGDS">
						<arco-core:note>
							<xsl:value-of select="normalize-space(./OGDS)" />
						</arco-core:note>
					</xsl:if>
					<xsl:if
						test="./OGDT and (not(starts-with(lower-case(normalize-space(./OGDT)), 'nr')) and not(starts-with(lower-case(normalize-space(./OGDT)), 'n.r')))">
						<arco-dd:hasDesignationType>
							<xsl:attribute name="rdf:resource">
		                                <xsl:choose>
		                                    <xsl:when
								test="lower-case(normalize-space(./OGDT))='attuale' or lower-case(normalize-space(./OGDT))='attuale di uso corrente' or lower-case(normalize-space(./OGDT))='attuale ufficiale'">
		                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/CurrentDesignation'" />
		                                    </xsl:when>
		                                    <xsl:when
								test="lower-case(normalize-space(./OGDT))='attribuita'">
		                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/AssignedDesignation'" />
		                                    </xsl:when>
		                                    <xsl:when
								test="lower-case(normalize-space(./OGDT))='altra lingua'">
		                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/OtherLanguageDesignation'" />
		                                    </xsl:when>
		                                    <xsl:when
								test="lower-case(normalize-space(./OGDT))='consuetudinaria'">
		                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/CustomaryDesignation'" />
		                                    </xsl:when>
		                                    <xsl:when
								test="lower-case(normalize-space(./OGDT))='dialettale'">
		                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/DialectalDesignation'" />
		                                    </xsl:when>
		                                    <xsl:when
								test="lower-case(normalize-space(./OGDT))='gergale'">
		                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/SlangDesignation'" />
		                                    </xsl:when>
		                                    <xsl:when
								test="lower-case(normalize-space(./OGDT))='idiomatica'">
		                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/IdiomaticDesignation'" />
		                                    </xsl:when>
		                                    <xsl:when
								test="lower-case(normalize-space(./OGDT))='locale'">
		                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/LocalDesignation'" />
		                                    </xsl:when>
		                                     <xsl:when
								test="lower-case(normalize-space(./OGDT))='originaria'">
		                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/OriginalDesignation'" />
		                                    </xsl:when>
		                                     <xsl:when
								test="lower-case(normalize-space(./OGDT))='storica'">
		                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/HistoricalDesignation'" />
		                                    </xsl:when>
		                                    <xsl:when test="./OGDT">
		                                        <xsl:value-of
								select="concat($NS, 'DesignationType/', arco-fn:urify(normalize-space(./OGDT)))" />
		                                    </xsl:when>
		                                </xsl:choose>
	                			</xsl:attribute>
						</arco-dd:hasDesignationType>
					</xsl:if>
				</rdf:Description>
				<!-- designation type as an individual -->
				<xsl:if
					test="./OGDT and (not(starts-with(lower-case(normalize-space(./OGDT)), 'nr')) and not(starts-with(lower-case(normalize-space(./OGDT)), 'n.r')))">
					<xsl:choose>
						<xsl:when
							test="lower-case(normalize-space(./OGDT))='attuale'" />
						<xsl:when
							test="lower-case(normalize-space(./OGDT))='attuale ufficiale'" />
						<xsl:when
							test="lower-case(normalize-space(./OGDT))='attuale di uso corrente'" />
						<xsl:when
							test="lower-case(normalize-space(./OGDT))='idiomatica'" />
						<xsl:when
							test="lower-case(normalize-space(./OGDT))='gergale'" />
						<xsl:when
							test="lower-case(normalize-space(./OGDT))='dialettale'" />
						<xsl:when
							test="lower-case(normalize-space(./OGDT))='consuetudinaria'" />
						<xsl:when
							test="lower-case(normalize-space(./OGDT))='altra lingua'" />
						<xsl:when
							test="lower-case(normalize-space(./OGDT))='locale'" />
						<xsl:when
							test="lower-case(normalize-space(./OGDT))='storica'" />
						<xsl:when
							test="lower-case(normalize-space(./OGDT))='originaria'" />
						<xsl:when
							test="./OGDT and not(./OGDT='.' or ./OGDT='-' or ./OGDT='/')">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
				                        	<xsl:value-of
									select="concat($NS,'DesignationType/', arco-fn:urify(normalize-space(./OGDT)))" />
				                       </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
											<xsl:value-of
										select="'https://w3id.org/arco/ontology/denotative-description/DesignationType'" />
										</xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(./OGDT)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./OGDT)" />
								</l0:name>
							</rdf:Description>
						</xsl:when>
					</xsl:choose>
				</xsl:if>
			</xsl:for-each>
			<!-- Name in time for < 4.00 -->
			<xsl:for-each
				select="record/metadata/schede/*/OG/OGT/OGTN">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        	<xsl:value-of
						select="concat($NS,'DesignationInTime/', $itemURI, '-', arco-fn:urify(normalize-space(.)))" />
                       
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/denotative-description/DesignationInTime'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of select="normalize-space(.)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of select="normalize-space(.)" />
					</l0:name>
				</rdf:Description>
			</xsl:for-each>
			<!-- Name in time for NU (OGTO) -->
			<xsl:if test="record/metadata/schede/NU/OG/OGT/OGTO">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        	<xsl:value-of
						select="concat($NS,'DesignationInTime/', $itemURI, '-', arco-fn:urify(normalize-space(record/metadata/schede/NU/OG/OGT/OGTO)))" />
                       
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/denotative-description/DesignationInTime'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/NU/OG/OGT/OGTO)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/NU/OG/OGT/OGTO)" />
					</l0:name>
					<arco-dd:hasDesignationInTimeType>
						<xsl:attribute name="rdf:resource">
							<xsl:value-of
							select="'https://w3id.org/arco/ontology/denotative-description/Original'" />
						</xsl:attribute>
					</arco-dd:hasDesignationInTimeType>
				</rdf:Description>
			</xsl:if>
			<!-- Name in time for A 2.00 -->
			<xsl:if
				test="record/metadata/schede/*/OG/OGT/OGTD and $sheetType='A' and ($sheetVersion='2.00' or $sheetVersion='2.00_ICCD0')">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        	<xsl:value-of
						select="concat($NS,'DesignationInTime/', $itemURI, '-', arco-fn:urify(normalize-space(record/metadata/schede/*/OG/OGT/OGTD)))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/denotative-description/DesignationInTime'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/OG/OGT/OGTD)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/OG/OGT/OGTD)" />
					</l0:name>
				</rdf:Description>
			</xsl:if>
			<!-- Name in time for MA e CA -->
			<xsl:if test="record/metadata/schede/*/OG/OGT/OGTU">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        	<xsl:value-of
						select="concat('https://w3id.org/arco/resource/DesignationInTime/', $itemURI, '-', arco-fn:urify(normalize-space(record/metadata/schede/*/OG/OGT/OGTU)))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/denotative-description/DesignationInTime'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/OG/OGT/OGTU)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/OG/OGT/OGTU)" />
					</l0:name>
					<arco-dd:hasDesignationType>
						<xsl:attribute name="rdf:resource">
							<xsl:value-of select="'https://w3id.org/arco/ontology/context-description/HistoricalDesignation'" />
						</xsl:attribute>
					</arco-dd:hasDesignationType>
				</rdf:Description>
			</xsl:if>
			<!-- Name in time for SI -->
			<xsl:if test="record/metadata/schede/SI/OG/OGT/OGTY">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        	<xsl:value-of
						select="concat('https://w3id.org/arco/resource/DesignationInTime/', $itemURI, '-', arco-fn:urify(normalize-space(record/metadata/schede/*/OG/OGT/OGTY)))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/denotative-description/DesignationInTime'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/SI/OG/OGT/OGTY)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/SI/OG/OGT/OGTY)" />
					</l0:name>
					<arco-dd:hasDesignationType>
						<xsl:attribute name="rdf:resource">
							<xsl:value-of select="'https://w3id.org/arco/ontology/context-description/HistoricalDesignation'" />
						</xsl:attribute>
					</arco-dd:hasDesignationType>
				</rdf:Description>
			</xsl:if>	
				
			<!-- Name in time BNB -->
			<xsl:if
				test="record/metadata/schede/BNB/OG/OGT/OGTD and starts-with(lower-case(normalize-space(record/metadata/schede/BNB/OG/OGT/OGTD)), 'erbario')">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        	<xsl:value-of
						select="concat($NS,'DesignationInTime/', $itemURI, '-', arco-fn:urify(normalize-space(record/metadata/schede/BNB/OG/OGT/OGTE)))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/denotative-description/DesignationInTime'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/BNB/OG/OGT/OGTE)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/BNB/OG/OGT/OGTE)" />
					</l0:name>
				</rdf:Description>
			</xsl:if>
			<xsl:if
				test="record/metadata/schede/BNB/OG/OGT/OGTD and starts-with(lower-case(normalize-space(record/metadata/schede/BNB/OG/OGT/OGTD)), 'collezione')">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        	<xsl:value-of
						select="concat($NS,'DesignationInTime/', $itemURI, '-', arco-fn:urify(normalize-space(record/metadata/schede/BNB/OG/OGT/OGTC)))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/denotative-description/DesignationInTime'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/BNB/OG/OGT/OGTC)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/BNB/OG/OGT/OGTC)" />
					</l0:name>
				</rdf:Description>
			</xsl:if>
			<!-- functional purpose for CA and MA -->
			<xsl:if
				test="record/metadata/schede/*/OG/OGT/OGTF and ($sheetType='CA' or $sheetType='MA')">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
	                            <xsl:value-of
						select="concat($NS, 'FunctionalPurpose/', arco-fn:urify(normalize-space(record/metadata/schede/*/OG/OGT/OGTF)))" />
	                     </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/denotative-description/FunctionalPurpose'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/OG/OGT/OGTF)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/OG/OGT/OGTF)" />
					</l0:name>
				</rdf:Description>
			</xsl:if>
			<!-- Name in time - Time interval - rules for previous model <xsl:if test="record/metadata/schede/*/OG/OGD/OGDR"> 
				<rdf:Description> <xsl:attribute name="rdf:about"> <xsl:value-of select="concat($NS,'TimeInterval/', 
				arco-fn:urify(record/metadata/schede/*/OG/OGD/OGDR))" /> </xsl:attribute> 
				<rdf:type> <xsl:attribute name="rdf:resource"> <xsl:value-of select="'https://w3id.org/italia/onto/TI/TimeInterval'" 
				/> </xsl:attribute> </rdf:type> <rdfs:label> <xsl:value-of select="normalize-space(record/metadata/schede/*/OG/OGD/OGDR)" 
				/> </rdfs:label> <arco-arco:startTime> <xsl:value-of select="record/metadata/schede/*/OG/OGD/OGDR" 
				/> </arco-arco:startTime> </rdf:Description> </xsl:if> -->

			<!-- We add the scope of protection as an individual. The scope of protection 
				is associated with a Cultural Property by the property arco-dd:hasMibactScopeOfProtection. 
				ALERT: this part has been removed in version 0.2 as the Mibact Scope of Protection 
				has been defined within the ontologies. -->
			<!-- xsl:if test="record/metadata/schede/*/OG/AMB"> <rdf:Description> 
				<xsl:attribute name="rdf:about"> <xsl:value-of select="concat($NS,'MibactScopeOfProtection/', 
				arco-fn:urify(normalize-space(record/metadata/schede/*/OG/AMB)))" /> </xsl:attribute> 
				<rdf:type> <xsl:attribute name="rdf:resource"> <xsl:value-of select="'https://w3id.org/arco/cpdescription/MibactScopeOfProtection'" 
				/> </xsl:attribute> </rdf:type> <rdfs:label> <xsl:value-of select="normalize-space(record/metadata/schede/*/OG/AMB)" 
				/> </rdfs:label> </rdf:Description> </xsl:if -->
			<!-- We add the category as an individual. The category is associated 
				with a Cultural Property by the property arco-dd:hasCategory. -->
			<!-- Cultural property category -->
			<xsl:if test="record/metadata/schede/*/OG/CTG">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS,'CulturalPropertyCategory/', arco-fn:urify(normalize-space(record/metadata/schede/*/OG/CTG)))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/arco/CulturalPropertyCategory'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/OG/CTG)" />
					</rdfs:label>
					<!-- xsl:variable name="skos-term"> <xsl:choose> <xsl:when test="$sheetType='BDM' 
						and starts-with($sheetVersion, '4')"> <xsl:value-of select="arco-fn:bdm-definition(normalize-space(record/metadata/schede/*/OG/CTG))" 
						/> </xsl:when> </xsl:choose> </xsl:variable> <xsl:if test="$skos-term != 
						''"> <skos:closeMatch> <xsl:attribute name="rdf:resource"> <xsl:value-of 
						select="$skos-term" /> </xsl:attribute> </skos:closeMatch> </xsl:if -->
				</rdf:Description>
			</xsl:if>
			<xsl:if test="record/metadata/schede/*/CT/CTG">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat('https://w3id.org/arco/resource/CulturalPropertyCategory/', arco-fn:urify(normalize-space(record/metadata/schede/*/CT/CTG)))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/arco/CulturalPropertyCategory'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/CT/CTG)" />
					</rdfs:label>
					<!-- xsl:variable name="skos-term"> <xsl:choose> <xsl:when test="$sheetType='BDM' 
						and starts-with($sheetVersion, '4')"> <xsl:value-of select="arco-fn:bdm-definition(normalize-space(record/metadata/schede/*/OG/CTG))" 
						/> </xsl:when> </xsl:choose> </xsl:variable> <xsl:if test="$skos-term != 
						''"> <skos:closeMatch> <xsl:attribute name="rdf:resource"> <xsl:value-of 
						select="$skos-term" /> </xsl:attribute> </skos:closeMatch> </xsl:if -->
				</rdf:Description>
			</xsl:if>
			<xsl:if test="record/metadata/schede/BDM/OG/OGT/OGTG">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of select="concat('https://w3id.org/arco/resource/CulturalPropertyCategory/', arco-fn:urify(normalize-space(record/metadata/schede/BDM/OG/OGT/OGTG)))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of select="'https://w3id.org/arco/ontology/arco/CulturalPropertyCategory'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of select="normalize-space(record/metadata/schede/BDM/OG/OGT/OGTG)" />
					</rdfs:label>
				</rdf:Description>
			</xsl:if>
			<xsl:if test="record/metadata/schede/RA/OG/CLS">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS,'CulturalPropertyCategory/', arco-fn:urify(normalize-space(record/metadata/schede/RA/OG/CLS)))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/arco/CulturalPropertyCategory'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/RA/OG/CLS)" />
					</rdfs:label>
				</rdf:Description>
			</xsl:if>
			<xsl:if test="record/metadata/schede/MA/OG/OGT/OGTC">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS,'CulturalPropertyCategory/', arco-fn:urify(normalize-space(record/metadata/schede/MA/OG/OGT/OGTC)))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/arco/CulturalPropertyCategory'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/MA/OG/OGT/OGTC)" />
					</rdfs:label>
				</rdf:Description>
			</xsl:if>
			<xsl:if test="record/metadata/schede/CA/OG/OGT/OGTC">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS,'CulturalPropertyCategory/', arco-fn:urify(normalize-space(record/metadata/schede/CA/OG/OGT/OGTC)))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/arco/CulturalPropertyCategory'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/CA/OG/OGT/OGTC)" />
					</rdfs:label>
				</rdf:Description>
			</xsl:if>
			<xsl:if test="record/metadata/schede/VeAC/OG/OGT/OGTC">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS,'CulturalPropertyCategory/', arco-fn:urify(normalize-space(record/metadata/schede/VeAC/OG/OGT/OGTC)))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/arco/CulturalPropertyCategory'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/VeAC/OG/OGT/OGTC)" />
					</rdfs:label>
				</rdf:Description>
			</xsl:if>
			<xsl:if test="record/metadata/schede/AT/OG/OGT/OGTP">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS,'CulturalPropertyCategory/', arco-fn:urify(normalize-space(record/metadata/schede/AT/OG/OGT/OGTP)))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/arco/CulturalPropertyCategory'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/AT/OG/OGT/OGTP)" />
					</rdfs:label>
				</rdf:Description>
			</xsl:if>
			<!-- detection method -->
			<xsl:if test="record/metadata/schede/*/OG/OGM">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS,'DetectionMethod/', arco-fn:urify(normalize-space(record/metadata/schede/*/OG/OGM)))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/DetectionMethod'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/OG/OGM)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/OG/OGM)" />
					</l0:name>
				</rdf:Description>
			</xsl:if>
			<!-- detection method for SI -->
			<xsl:if test="record/metadata/schede/SI/OG/OGT/OGTA">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS,'DetectionMethod/', arco-fn:urify(normalize-space(record/metadata/schede/SI/OG/OGT/OGTA)))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/DetectionMethod'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/SI/OG/OGT/OGTA)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/SI/OG/OGT/OGTA)" />
					</l0:name>
				</rdf:Description>
			</xsl:if>
			<!-- main discipline (PST) as an individual -->
			<xsl:if
				test="(not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CT/CTP)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CT/CTP)), 'n.r')))">
				<xsl:for-each select="record/metadata/schede/*/CT/CTP">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
		                		<xsl:value-of
							select="concat($NS, 'SubjectDiscipline/', arco-fn:urify(normalize-space(.)))" />
		                	</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
								select="'http://dati.beniculturali.it/cis/SubjectDiscipline'" />
	                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(.)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(.)" />
						</l0:name>
					</rdf:Description>
				</xsl:for-each>
			</xsl:if>
			<!-- alternative discipline (PST) as an individual -->
			<xsl:if test="(not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CT/CTA)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/CT/CTA)), 'n.r')))">
				<xsl:for-each select="record/metadata/schede/*/CT/CTA">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
			                		<xsl:value-of
							select="concat($NS, 'SubjectDiscipline/', arco-fn:urify(normalize-space(.)))" />
			                	</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
		                                <xsl:value-of
								select="'http://dati.beniculturali.it/cis/SubjectDiscipline'" />
		                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(.)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(.)" />
						</l0:name>
					</rdf:Description>
				</xsl:for-each>
			</xsl:if>
			<xsl:if test="(not(starts-with(lower-case(normalize-space(record/metadata/schede/*/OG/CTA)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/OG/CTA)), 'n.r')))">
				<xsl:for-each select="record/metadata/schede/*/OG/CTA">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
			                		<xsl:value-of
							select="concat($NS, 'SubjectDiscipline/', arco-fn:urify(normalize-space(.)))" />
			                	</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
		                                <xsl:value-of
								select="'http://dati.beniculturali.it/cis/SubjectDiscipline'" />
		                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(.)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(.)" />
						</l0:name>
					</rdf:Description>
				</xsl:for-each>
			</xsl:if>
			<!-- archaeological material (TMA) -->
			<xsl:for-each select="record/metadata/schede/TMA/MA">
				<xsl:if
					test="(not(starts-with(lower-case(normalize-space(./MAC/MACC)), 'nr')) and not(starts-with(lower-case(normalize-space(./MAC/MACC)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
								<xsl:choose>
									<xsl:when test="./MAC/MACD">
										<xsl:value-of
							select="concat($NS, 'ArchaeologicalMaterial/', $itemURI, '-', position(), arco-fn:urify(normalize-space(./MACC)), arco-fn:urify(normalize-space(./MACD)))" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
							select="concat($NS, 'ArchaeologicalMaterial/', $itemURI, '-', position(), arco-fn:urify(normalize-space(./MACC)))" />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
									<xsl:value-of
								select="'https://w3id.org/arco/ontology/arco/ArchaeologicalMaterial'" />
								</xsl:attribute>
						</rdf:type>
						<xsl:choose>
							<xsl:when test="./MAC/MACD">
								<rdfs:label xml:lang="it">
									<xsl:value-of
										select="concat('Materiale componente ', position(), ' del bene: ', $itemURI, ': ', normalize-space(./MAC/MACC), ' - ', normalize-space(./MAC/MACD))" />
								</rdfs:label>
								<rdfs:label xml:lang="en">
									<xsl:value-of
										select="concat('Archaeological Material ', position(), ' of cultural property: ', $itemURI, ': ', normalize-space(./MAC/MACC), ' - ', normalize-space(./MAC/MACD))" />
								</rdfs:label>
								<l0:name xml:lang="it">
									<xsl:value-of
										select="concat('Materiale componente ', position(), ' del bene: ', $itemURI, ': ', normalize-space(./MAC/MACC), ' - ', normalize-space(./MAC/MACD))" />
								</l0:name>
								<l0:name xml:lang="en">
									<xsl:value-of
										select="concat('Archaeological Material ', position(), ' of cultural property: ', $itemURI, ': ', normalize-space(./MAC/MACC), ' - ', normalize-space(./MAC/MACD))" />
								</l0:name>
							</xsl:when>
							<xsl:otherwise>
								<rdfs:label xml:lang="it">
									<xsl:value-of
										select="concat('Materiale componente ', position(), ' del bene ', $itemURI, ': ', normalize-space(./MAC/MACC))" />
								</rdfs:label>
								<rdfs:label xml:lang="en">
									<xsl:value-of
										select="concat('Archaeological Material ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./MAC/MACC))" />
								</rdfs:label>
								<l0:name xml:lang="it">
									<xsl:value-of
										select="concat('Materiale componente ', position(), ' del bene ', $itemURI, ': ', normalize-space(./MAC/MACC))" />
								</l0:name>
								<l0:name xml:lang="en">
									<xsl:value-of
										select="concat('Archaeological Material ', position(), ' of cultural property ', $itemURI, ': ', normalize-space(./MAC/MACC))" />
								</l0:name>
							</xsl:otherwise>
						</xsl:choose>
						<arco-arco:hasArchaeologicalMaterialCategory>
							<xsl:attribute name="rdf:resource">
										<xsl:value-of
								select="concat($NS, 'ArchaeologicalMaterialCategory/', arco-fn:urify(normalize-space(./MAC/MACC)))" />
									</xsl:attribute>
						</arco-arco:hasArchaeologicalMaterialCategory>
						<xsl:if test="./MAC/MACQ">
							<arco-arco:numberOfArchaeologicalMaterials>
								<xsl:value-of select="normalize-space(./MAC/MACQ)" />
							</arco-arco:numberOfArchaeologicalMaterials>
						</xsl:if>
					</rdf:Description>
					<!-- archaeological material category as an individual -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
								<xsl:value-of
							select="concat($NS, 'ArchaeologicalMaterialCategory/', arco-fn:urify(normalize-space(./MAC/MACC)))" />
							</xsl:attribute>
						<rdf:type
							rdf:resource="https://w3id.org/arco/ontology/arco/ArchaeologicalMaterialCategory" />
						<rdfs:label>
							<xsl:value-of select="normalize-space(./MAC/MACC)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./MAC/MACC)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<!-- cadastral identity -->
			<xsl:for-each select="record/metadata/schede/*/CS">
				<xsl:variable name="parentPosition">
					<xsl:value-of select="position()" />
				</xsl:variable>
				<rdf:Description>
					<xsl:attribute name="rdf:about">
		                		<xsl:value-of
						select="concat($NS, 'CadastralIdentity/', $itemURI, '-', position())" />
		                	</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
							select="'https://w3id.org/arco/ontology/location/CadastralIdentity'" />
	                        </xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Identità catastale ', position(), ' del bene: ', $itemURI)" />
					</rdfs:label>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Cadastral identity ', position(), ' of cultural property: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Identità catastale ', position(), ' del bene: ', $itemURI)" />
					</l0:name>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Cadastral identity ', position(), ' of cultural property: ', $itemURI)" />
					</l0:name>
					<xsl:if test="./CTL and not(./CTL='.' or ./CTL='-' or ./CTL='/') and (not(starts-with(lower-case(normalize-space(./CTL)), 'nr')) and not(starts-with(lower-case(normalize-space(./CTL)), 'n.r')))">
						<arco-location:hasLocationType>
							<xsl:attribute name="rdf:resource">
	                                <xsl:choose>
	                               		<xsl:when test="lower-case(normalize-space(./CTL))='localizzazione fisica' or lower-case(normalize-space(./CTL))='luogo di provenienza' or lower-case(normalize-space(./CTL))='provenienza'">
	                                        <xsl:value-of select="'https://w3id.org/arco/ontology/location/CurrentPhysicalLocation'" />
	                                    </xsl:when>
	                                    <xsl:when test="lower-case(normalize-space(./CTL))='luogo di provenienza/collocazione precedente' or lower-case(normalize-space(./CTL))='luogo di provenienza' or lower-case(normalize-space(./CTL))='provenienza'">
	                                        <xsl:value-of select="'https://w3id.org/arco/ontology/location/LastLocation'" />
	                                    </xsl:when>
	                                     <xsl:when test="lower-case(normalize-space(./CTL))='di archivio'">
	                                        <xsl:value-of select="'https://w3id.org/arco/ontology/location/ArchivalLocation'" />
	                                    </xsl:when>
	                                    <xsl:when test="lower-case(normalize-space(./CTL))='luogo di produzione/realizzazione' or lower-case(normalize-space(./CTL))='luogo di esecuzione/fabbricazione'">
	                                        <xsl:value-of select="'https://w3id.org/arco/ontology/location/ProductionRealizationLocation'" />
	                                    </xsl:when>
	                                    <xsl:when test="lower-case(normalize-space(./CTL))='luogo di reperimento' or lower-case(normalize-space(./CTL))='reperimento'">
	                                        <xsl:value-of select="'https://w3id.org/arco/ontology/location/FindingLocation'" />
	                                    </xsl:when>
	                                    <xsl:when test="lower-case(normalize-space(./CTL))='luogo di deposito' or lower-case(normalize-space(./CTL))='deposito temporaneo' or lower-case(normalize-space(./CTL))='deposito'">
	                                        <xsl:value-of select="'https://w3id.org/arco/ontology/location/StorageLocation'" />
	                                    </xsl:when>
	                                    <xsl:when test="lower-case(normalize-space(./CTL))='luogo di esposizione' or lower-case(normalize-space(./CTL))='espositiva' or lower-case(normalize-space(./CTL))='espositivo' or lower-case(normalize-space(./CTL))='esposizione'">
	                                        <xsl:value-of select="'https://w3id.org/arco/ontology/location/ExhibitionLocation'" />
	                                    </xsl:when>
	                                    <xsl:when test="lower-case(normalize-space(./CTL))='luogo di rilevamento' or lower-case(normalize-space(./CTL))='di rilevamento' or lower-case(normalize-space(./CTL))='localizzazione di rilevamento'">
	                                        <xsl:value-of select="'https://w3id.org/arco/ontology/location/ObservationLocation'" />
	                                    </xsl:when>
	                                    <xsl:when test="lower-case(normalize-space(./CTL))='area rappresentata'">
	                                        <xsl:value-of select="'https://w3id.org/arco/ontology/location/SubjectLocation'" />
	                                    </xsl:when>
	                                    <xsl:when test="./CTL">
	                                        <xsl:value-of select="concat($NS, 'LocationType/', arco-fn:urify(normalize-space(./CTL)))" />
	                                    </xsl:when>
	                                </xsl:choose>
	                            </xsl:attribute>
						</arco-location:hasLocationType>
					</xsl:if>
					<xsl:if test="./CTS/CTST and (not(starts-with(lower-case(normalize-space(./CTS/CTST)), 'nr')) and not(starts-with(lower-case(normalize-space(./CTS/CTST)), 'n.r')))">
						<arco-location:hasCadastreType>
							<xsl:attribute name="rdf:resource">
									<xsl:value-of select="concat($NS, 'CadastreType/', arco-fn:urify(normalize-space(./CTS/CTST)))" />
								</xsl:attribute>
						</arco-location:hasCadastreType>
					</xsl:if>
					<xsl:if test="./CTS/CTSC and (not(starts-with(lower-case(normalize-space(./CTS/CTSC)), 'nr')) and not(starts-with(lower-case(normalize-space(./CTS/CTSC)), 'n.r')))">
						<arco-location:hasCadastralCity>
							<xsl:attribute name="rdf:resource">
									<xsl:value-of select="concat($NS, 'City/', arco-fn:urify(normalize-space(./CTS/CTSC)))" />
								</xsl:attribute>
						</arco-location:hasCadastralCity>
					</xsl:if>
					<xsl:if test="./CTS/CTSF and (not(starts-with(lower-case(normalize-space(./CTS/CTSF)), 'nr')) and not(starts-with(lower-case(normalize-space(./CTS/CTSF)), 'n.r')))">
						<xsl:for-each select="./CTS/CTSF">
							<arco-location:hasCadastralEntity>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of select="concat($NS, 'CadastralFolio/', $itemURI, '-', $parentPosition, '-', position())" />
								</xsl:attribute>
							</arco-location:hasCadastralEntity>
						</xsl:for-each>
					</xsl:if>
					<xsl:if test="./CTS/CTSN and (not(starts-with(lower-case(normalize-space(./CTS/CTSN)), 'nr')) and not(starts-with(lower-case(normalize-space(./CTS/CTSN)), 'n.r')))">
						<xsl:for-each select="./CTS/CTSN">
							<arco-location:hasCadastralEntity>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of select="concat($NS, 'CadastralUnitCollection/', $itemURI, '-', $parentPosition, '-', position())" />
								</xsl:attribute>
							</arco-location:hasCadastralEntity>
						</xsl:for-each>
					</xsl:if>
					<!-- Legal situation of cadastral identity -->
					<xsl:if test="./CTS/CTSP">
						<arco-cd:hasLegalSituation>
							<xsl:attribute name="rdf:resource">
		                			<xsl:value-of select="concat($NS, 'LegalSituation/', $itemURI, '-cadastral-legal-situation-', $parentPosition)" />
		                		</xsl:attribute>
						</arco-cd:hasLegalSituation>
					</xsl:if>
					<xsl:if test="./CTN">
						<arco-core:note>
		                	<xsl:value-of select="normalize-space(./CTN)" />
						</arco-core:note>
					</xsl:if>
				</rdf:Description>
				<!-- cadastre type as an individual -->
				<xsl:if test="./CTS/CTST and (not(starts-with(lower-case(normalize-space(./CTS/CTST)), 'nr')) and not(starts-with(lower-case(normalize-space(./CTS/CTST)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
								<xsl:value-of select="concat($NS, 'CadastreType/', arco-fn:urify(normalize-space(./CTS/CTST)))" />
							</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                                <xsl:value-of select="'https://w3id.org/arco/ontology/location/CadastreType'" />
	                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./CTS/CTST)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./CTS/CTST)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- cadastral city as an individual -->
				<xsl:if
					test="./CTS/CTSC and (not(starts-with(lower-case(normalize-space(./CTS/CTSC)), 'nr')) and not(starts-with(lower-case(normalize-space(./CTS/CTSC)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:value-of
							select="concat($NS, 'City/', arco-fn:urify(normalize-space(./CTS/CTSC)))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/City'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(./CTS/CTSC)" />
							</xsl:call-template>

						</rdfs:label>
						<l0:name>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(./CTS/CTSC)" />
							</xsl:call-template>
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- cadastre folio as an individual -->
				<xsl:if
					test="./CTS/CTSF and (not(starts-with(lower-case(normalize-space(./CTS/CTSF)), 'nr')) and not(starts-with(lower-case(normalize-space(./CTS/CTSF)), 'n.r')))">
					<xsl:for-each select="./CTS/CTSF">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
								<xsl:value-of
								select="concat($NS, 'CadastralFolio/', $itemURI, '-', $parentPosition, '-', position())" />
							</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="'https://w3id.org/arco/ontology/location/CadastralFolio'" />
	                            </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Foglio di mappa catastale del bene culturale ', $itemURI, ': ', normalize-space(.))" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Foglio di mappa catastale del bene culturale ', $itemURI, ': ', normalize-space(.))" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Cadastral folio of cultural property ', $itemURI, ': ', normalize-space(.))" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Cadastral folio of cultural property ', $itemURI, ': ', normalize-space(.))" />
							</l0:name>
						</rdf:Description>
					</xsl:for-each>
				</xsl:if>
				<!-- cadastre unit collection as an individual -->
				<xsl:if
					test="./CTS/CTSN and (not(starts-with(lower-case(normalize-space(./CTS/CTSN)), 'nr')) and not(starts-with(lower-case(normalize-space(./CTS/CTSN)), 'n.r')))">
					<xsl:for-each select="./CTS/CTSN">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
								<xsl:value-of
								select="concat($NS, 'CadastralUnitCollection/', $itemURI, '-', $parentPosition, '-', position())" />
							</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="'https://w3id.org/arco/ontology/location/CadastralUnitCollection'" />
	                            </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Collezione di particelle catastali del bene culturale ', $itemURI, ': ', normalize-space(.))" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Collezione di particelle catastali del bene culturale ', $itemURI, ': ', normalize-space(.))" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Cadastral unit collection of cultural property ', $itemURI, ': ', normalize-space(.))" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Cadastral unit collection of cultural property ', $itemURI, ': ', normalize-space(.))" />
							</l0:name>
						</rdf:Description>
					</xsl:for-each>
				</xsl:if>
				<!-- Legal situation of cultural property as an individual -->
				<xsl:if
					test="./CTS/CTSP and (not(starts-with(lower-case(normalize-space(./CTS/CTSP)), 'nr')) and not(starts-with(lower-case(normalize-space(./CTS/CTSP)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
		                		<xsl:value-of
							select="concat($NS, 'LegalSituation/', $itemURI, '-cadastral-legal-situation-', $parentPosition)" />
		                	</xsl:attribute>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Condizione giuridica catastale del bene culturale ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Condizione giuridica catastale del bene culturale ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Cadastral legal situation of cultural property ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Cadastral legal situation of cultural property ', $itemURI)" />
						</l0:name>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
								<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/LegalSituation'" />
							</xsl:attribute>
						</rdf:type>
						<xsl:for-each select="./CTS/CTSP">
							<arco-cd:hasOwner>
								<xsl:attribute name="rdf:resource">
			            				<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
			            			</xsl:attribute>
							</arco-cd:hasOwner>
						</xsl:for-each>
					</rdf:Description>
					<xsl:for-each select="./CTS/CTSP">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
			            			<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
			            		</xsl:attribute>
							<rdfs:label>
								<xsl:value-of select="normalize-space(.)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(.)" />
							</l0:name>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
									</xsl:attribute>
							</rdf:type>
						</rdf:Description>
					</xsl:for-each>
				</xsl:if>
			</xsl:for-each>
			<!-- historical cadastral identity -->
			<xsl:if test="record/metadata/schede/*/LS/CSS/*">
				<xsl:for-each select="record/metadata/schede/*/LS/CSS">
				<xsl:variable name="parentPosition">
					<xsl:value-of select="position()" />
				</xsl:variable>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
		                		<xsl:value-of select="concat($NS, 'CadastralIdentity/', $itemURI, '-historical-', position())" />
		                	</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
								<xsl:value-of select="'https://w3id.org/arco/ontology/location/CadastralIdentity'" />
	                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of select="concat('Identità catastale storica ', position(), ' del bene: ', $itemURI)" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of select="concat('Cadastral historical identity ', position(), ' of cultural property: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of select="concat('Identità catastale storica ', position(), ' del bene: ', $itemURI)" />
						</l0:name>
						<l0:name xml:lang="en">
							<xsl:value-of select="concat('Cadastral historical identity ', position(), ' of cultural property: ', $itemURI)" />
						</l0:name>
						<arco-location:hasLocationType>
							<xsl:attribute name="rdf:resource">
								<xsl:value-of select="'https://w3id.org/arco/ontology/location/HistoricalLocation'" />
	                            </xsl:attribute>
						</arco-location:hasLocationType>
						<xsl:if test="./CSST">
							<tiapit:time>
								<xsl:value-of select="normalize-space(./CSST)" />
							</tiapit:time>
						</xsl:if>
						<xsl:if test="./CSSD">
							<arco-location:cadastreName>
								<xsl:value-of select="normalize-space(./CSSD)" />
							</arco-location:cadastreName>
						</xsl:if>
						<xsl:if test="./CSSF and (not(starts-with(lower-case(normalize-space(./CSSF)), 'nr')) and not(starts-with(lower-case(normalize-space(./CSSF)), 'n.r')))">
							<arco-location:hasCadastralEntity>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of select="concat($NS, 'CadastralFolio/', $itemURI, '-historical-', position())" />
								</xsl:attribute>
							</arco-location:hasCadastralEntity>
						</xsl:if>
						<xsl:if test="./CSSN and (not(starts-with(lower-case(normalize-space(./CSSN)), 'nr')) and not(starts-with(lower-case(normalize-space(./CSSN)), 'n.r')))">
							<xsl:for-each select="./CSSN">
								<arco-location:hasCadastralEntity>
									<xsl:attribute name="rdf:resource">
									<xsl:value-of select="concat($NS, 'CadastralUnitCollection/', $itemURI, '-historical-', $parentPosition)" />
								</xsl:attribute>
								</arco-location:hasCadastralEntity>
							</xsl:for-each>
						</xsl:if>
						<!-- Legal situation of cadastral identity -->
						<xsl:if test="./CSSP and (not(starts-with(lower-case(normalize-space(./CSSP)), 'nr')) and not(starts-with(lower-case(normalize-space(./CSSP)), 'n.r')))">
							<arco-cd:hasLegalSituation>
								<xsl:attribute name="rdf:resource">
		                			<xsl:value-of select="concat($NS, 'LegalSituation/', $itemURI, '-cadastral-historical-legal-situation-', position())" />
		                		</xsl:attribute>
							</arco-cd:hasLegalSituation>
						</xsl:if>
						<!-- Note -->
						<xsl:if test="./CSSS and (not(starts-with(lower-case(normalize-space(./CSSS)), 'nr')) and not(starts-with(lower-case(normalize-space(./CSSS)), 'n.r')))">
							<arco-core:note>
		                		<xsl:value-of select="normalize-space(./CSSS)" />
							</arco-core:note>
						</xsl:if>
					</rdf:Description>
					<!-- cadastre folio as an individual -->
					<xsl:if
						test="./CSSF and (not(starts-with(lower-case(normalize-space(./CSSF)), 'nr')) and not(starts-with(lower-case(normalize-space(./CSSF)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
								<xsl:value-of
								select="concat($NS, 'CadastralFolio/', $itemURI, '-historical-', position())" />
							</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="'https://w3id.org/arco/ontology/location/CadastralFolio'" />
	                            </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Foglio di mappa catastale storica del bene culturale ', $itemURI, ': ', normalize-space(./CSSF))" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Foglio di mappa catastale storica del bene culturale ', $itemURI, ': ', normalize-space(./CSSF))" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Historical cadastral folio of cultural property ', $itemURI, ': ', normalize-space(./CSSF))" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Historical cadastral folio of cultural property ', $itemURI, ': ', normalize-space(./CSSF))" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- cadastre unit collection as an individual -->
					<xsl:if
						test="./CSSN and (not(starts-with(lower-case(normalize-space(./CSSN)), 'nr')) and not(starts-with(lower-case(normalize-space(./CSSN)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
								<xsl:value-of
								select="concat($NS, 'CadastralUnitCollection/', $itemURI, '-historical-', position())" />
							</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="'https://w3id.org/arco/ontology/location/CadastralUnitCollection'" />
	                            </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Collezione di particelle catastali storiche del bene culturale ', $itemURI, ': ', normalize-space(./CSSN))" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Collezione di particelle catastali storiche del bene culturale ', $itemURI, ': ', normalize-space(./CSSN))" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Cadastral historical unit collection of cultural property ', $itemURI, ': ', normalize-space(./CSSN))" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Cadastral historical unit collection of cultural property ', $itemURI, ': ', normalize-space(./CSSN))" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- Legal situation of cultural property as an individual -->
					<xsl:if
						test="./CSSP and (not(starts-with(lower-case(normalize-space(./CSSP)), 'nr')) and not(starts-with(lower-case(normalize-space(./CSSP)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                		<xsl:value-of
								select="concat($NS, 'LegalSituation/', $itemURI, '-cadastral-historical-legal-situation-', position())" />
		                	</xsl:attribute>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Condizione giuridica catastale storica del bene culturale ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Condizione giuridica catastale storica del bene culturale ', $itemURI)" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Cadastral historical legal situation of cultural property ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Cadastral historical legal situation of cultural property ', $itemURI)" />
							</l0:name>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
								<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/LegalSituation'" />
							</xsl:attribute>
							</rdf:type>
							<arco-cd:hasOwner>
								<xsl:attribute name="rdf:resource">
			            				<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(./CSSP))" />
			            			</xsl:attribute>
							</arco-cd:hasOwner>
						</rdf:Description>
						<!-- agent as an individual -->
						<rdf:Description>
							<xsl:attribute name="rdf:about">
			            			<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./CSSP))" />
			            		</xsl:attribute>
							<rdfs:label>
								<xsl:value-of select="normalize-space(.)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(.)" />
							</l0:name>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
										</xsl:attribute>
							</rdf:type>

						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- fruition (VeAC) as an individual -->
			<xsl:if test="record/metadata/schede/*/AU/FRU">
				<xsl:for-each select="record/metadata/schede/*/AU/FRU">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	                            <xsl:value-of
							select="concat($NS, 'Fruition/', $itemURI, '-', position())" />
	                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/Fruition'" />
	                            </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Fruizione ', position(), ' del bene: ', $itemURI)" />
						</rdfs:label>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Fruition ', position(), ' of cultural property: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Fruizione ', position(), ' del bene: ', $itemURI)" />
						</l0:name>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Fruition ', position(), ' of cultural property: ', $itemURI)" />
						</l0:name>
						<xsl:if
							test="./FRUD and (not(starts-with(lower-case(normalize-space(./FRUD)), 'nr')) and not(starts-with(lower-case(normalize-space(./FRUD)), 'n.r')))">
							<tiapit:time>
								<xsl:value-of select="normalize-space(./FRUD)" />
							</tiapit:time>
						</xsl:if>
						<xsl:if
							test="./FRUN and (not(starts-with(lower-case(normalize-space(./FRUN)), 'nr')) and not(starts-with(lower-case(normalize-space(./FRUN)), 'n.r')))">
							<arco-cd:hasUser>
								<xsl:attribute name="rdf:resource">
	                        			<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(./FRUN))" />
	                        		</xsl:attribute>
							</arco-cd:hasUser>
						</xsl:if>
						<xsl:if
							test="./FRUC and (not(starts-with(lower-case(normalize-space(./FRUC)), 'nr')) and not(starts-with(lower-case(normalize-space(./FRUC)), 'n.r')))">
							<arco-cd:hasCircumstance>
								<xsl:attribute name="rdf:resource">
	                        			<xsl:value-of
									select="concat($NS, 'Circumstance/', arco-fn:urify(normalize-space(./FRUC)))" />
	                        		</xsl:attribute>
							</arco-cd:hasCircumstance>
						</xsl:if>
						<xsl:if
							test="./FRUF and (not(starts-with(lower-case(normalize-space(./FRUF)), 'nr')) and not(starts-with(lower-case(normalize-space(./FRUF)), 'n.r')))">
							<arco-cd:hasInterpretationCriterion>
								<xsl:attribute name="rdf:resource">
	                        			<xsl:value-of
									select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./FRUF)))" />
	                        		</xsl:attribute>
							</arco-cd:hasInterpretationCriterion>
						</xsl:if>
					</rdf:Description>
					<xsl:if
						test="./FRUN and (not(starts-with(lower-case(normalize-space(./FRUN)), 'nr')) and not(starts-with(lower-case(normalize-space(./FRUN)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                				<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./FRUN))" />
                			</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
                        		</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./FRUN)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./FRUN)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<xsl:if
						test="./FRUC and (not(starts-with(lower-case(normalize-space(./FRUC)), 'nr')) and not(starts-with(lower-case(normalize-space(./FRUC)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                				<xsl:value-of
								select="concat($NS, 'Circumstance/', arco-fn:urify(normalize-space(./FRUC)))" />
                			</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/Circumstance'" />
                        		</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./FRUC)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./FRUC)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<xsl:if
						test="./FRUF and (not(starts-with(lower-case(normalize-space(./FRUF)), 'nr')) and not(starts-with(lower-case(normalize-space(./FRUF)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                				<xsl:value-of
								select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./FRUF)))" />
                			</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/InterpretationCriterion'" />
                        		</xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./FRUF)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./FRUF)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- Alternative Identifier as an individual (AC/ACC) -->
			<xsl:if test="record/metadata/schede/*/AC/ACC">
				<xsl:for-each select="record/metadata/schede/*/AC/ACC">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                        	<xsl:value-of select="concat($NS, 'AlternativeIdentifier/', $itemURI, '-', position())" />
                    	</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                            	<xsl:value-of select="'https://w3id.org/arco/ontology/catalogue/AlternativeIdentifier'" />
                        	</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:choose>
								<xsl:when test="./*">
									<xsl:value-of select="concat('Codice alternativo ', normalize-space(./ACCC), ' del bene culturale: ', $itemURI)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="concat('Codice alternativo ', normalize-space(.), ' del bene culturale: ', $itemURI)" />
								</xsl:otherwise>
							</xsl:choose>
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:choose>
								<xsl:when test="./*">
									<xsl:value-of select="concat('Codice alternativo ', normalize-space(./ACCC), ' del bene culturale: ', $itemURI)" />
								</xsl:when>
								<xsl:otherwise> 
									<xsl:value-of select="concat('Codice alternativo ', normalize-space(.), ' del bene culturale: ', $itemURI)" />
								</xsl:otherwise>
							</xsl:choose>
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:choose>
								<xsl:when test="./*">
									<xsl:value-of select="concat('Alternative identifier ', normalize-space(./ACCC), ' of cultural property: ', $itemURI)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="concat('Alternative identifier ', normalize-space(.), ' of cultural property: ', $itemURI)" />
								</xsl:otherwise>
							</xsl:choose>
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:choose>
								<xsl:when test="./*">
									<xsl:value-of select="concat('Alternative identifier ', normalize-space(./ACCC), ' of cultural property: ', $itemURI)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="concat('Alternative identifier ', normalize-space(.), ' of cultural property: ', $itemURI)" />
								</xsl:otherwise>
							</xsl:choose>
						</l0:name>
						<l0:identifier>
							<xsl:choose>
								<xsl:when test="./*">
									<xsl:value-of select="./ACCC" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="normalize-space(.)" />
								</xsl:otherwise>
							</xsl:choose>
						</l0:identifier>
						<xsl:if test="./ACCS">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./ACCS)" />
							</arco-core:note>
						</xsl:if>
						<xsl:if
							test="./ACCP and (not(starts-with(lower-case(normalize-space(./ACCP)), 'nr')) and not(starts-with(lower-case(normalize-space(./ACCP)), 'n.r')))">
							<arco-catalogue:referenceProject>
								<xsl:value-of select="normalize-space(./ACCP)" />
							</arco-catalogue:referenceProject>
						</xsl:if>
						<xsl:if
							test="./ACCW and (not(starts-with(lower-case(normalize-space(./ACCW)), 'nr')) and not(starts-with(lower-case(normalize-space(./ACCW)), 'n.r')))">
							<smapit:URL>
								<xsl:value-of select="normalize-space(./ACCW)" />
							</smapit:URL>
						</xsl:if>
						<xsl:if
							test="./ACCE and (not(starts-with(lower-case(normalize-space(./ACCE)), 'nr')) and not(starts-with(lower-case(normalize-space(./ACCE)), 'n.r')))">
							<arco-core:hasAgentRole>
								<xsl:attribute name="rdf:resource">
                            			<xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-catalogue-record-responsible')" />
                        			</xsl:attribute>
							</arco-core:hasAgentRole>
						</xsl:if>
					</rdf:Description>
					<!-- agent role for catalogue record responsible for alternative identifier 
						as an individual -->
					<xsl:if
						test="./ACCE and (not(starts-with(lower-case(normalize-space(./ACCE)), 'nr')) and not(starts-with(lower-case(normalize-space(./ACCE)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                        		<xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-catalogue-record-responsible')" />
		                    		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/core/AgentRole'" />
				                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Ente responsabile della scheda del bene ', $itemURI, ': ', normalize-space(./ACCE))" />
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Responsible agency for catalogue record of cultural property ', $itemURI, ': ', normalize-space(./ACCE))" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Ente responsabile della scheda del bene ', $itemURI, ': ', normalize-space(./ACCE))" />
							</l0:name>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Responsible agency for catalogue record of cultural property ', $itemURI, ': ', normalize-space(./ACCE))" />
							</l0:name>
							<arco-core:hasRole>
								<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
									select="concat($NS, 'Role/CatalogueRecordResponsible')" />
				                        </xsl:attribute>
							</arco-core:hasRole>
							<arco-core:hasAgent>
								<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(./ACCE))" />
				                        </xsl:attribute>
							</arco-core:hasAgent>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
				                        <xsl:value-of
								select="concat($NS, 'Role/CatalogueRecordResponsible')" />
				                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/Role'" />
				                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="'Ente responsabile della scheda catalografica'" />
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="'Responsible agency for catalogue record'" />
							</rdfs:label>
							<arco-core:isRoleOf>
								<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-catalogue-record-responsible')" />
				                        </xsl:attribute>
							</arco-core:isRoleOf>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
				                        <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./ACCE))" />
				                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
				                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./ACCE)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./ACCE)" />
							</l0:name>
							<arco-core:isAgentOf>
								<xsl:attribute name="rdf:resource">
				                            <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-catalogue-record-responsible')" />
				                        </xsl:attribute>
							</arco-core:isAgentOf>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
			<!-- Access profile as an individual -->
			<xsl:if test="record/metadata/schede/*/AD/ADS">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        		<xsl:value-of
						select="concat($NS, 'AccessProfile/', $itemURI, '-', arco-fn:urify(normalize-space(record/metadata/schede/*/AD/ADS/ADSP)))" />
                    		</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
							select="'https://w3id.org/arco/ontology/catalogue/AccessProfile'" />
                        		</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Profilo d''accesso ai dati della scheda catalografica del bene culturale ', $itemURI, ': ', normalize-space(record/metadata/schede/*/AD/ADS/ADSP))" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Profilo d''accesso alla scheda catalografica del bene culturale ', $itemURI, ': ', normalize-space(record/metadata/schede/*/AD/ADS/ADSP))" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Access profile to catalogue record of cultural property ', $itemURI, ': ', normalize-space(record/metadata/schede/*/AD/ADS/ADSP))" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Access profile to catalogue record of cultural property ', $itemURI, ': ', normalize-space(record/metadata/schede/*/AD/ADS/ADSP))" />
					</l0:name>
					<arco-catalogue:hasPrivacyLevel>
						<xsl:attribute name="rdf:resource">
                                <xsl:choose>
                                    <xsl:when
							test="record/metadata/schede/*/AD/ADS/ADSP='1'">
                                        <xsl:value-of
							select="'https://w3id.org/arco/ontology/catalogue/MinimumPrivacy'" />
                                    </xsl:when>
                                     <xsl:when
							test="record/metadata/schede/*/AD/ADS/ADSP='2'">
                                        <xsl:value-of
							select="'https://w3id.org/arco/ontology/catalogue/MediumPrivacy'" />
                                    </xsl:when>
                                     <xsl:when
							test="record/metadata/schede/*/AD/ADS/ADSP='3'">
                                        <xsl:value-of
							select="'https://w3id.org/arco/ontology/catalogue/MaximumPrivacy'" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                    	<xsl:value-of
							select="concat($NS, 'PrivacyLevel/', arco-fn:urify(normalize-space(record/metadata/schede/*/AD/ADS/ADSP)))" />
                                    </xsl:otherwise>
                                 </xsl:choose>
                               </xsl:attribute>
					</arco-catalogue:hasPrivacyLevel>
					<xsl:if
						test="record/metadata/schede/*/AD/ADS/ADSM and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AD/ADS/ADSM)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AD/ADS/ADSM)), 'n.r')))">
						<arco-catalogue:hasPrivacyReason>
							<xsl:attribute name="rdf:resource">
									<xsl:value-of
								select="concat($NS, 'PrivacyReason/', arco-fn:urify(normalize-space(record/metadata/schede/*/AD/ADS/ADSM)))" />
								</xsl:attribute>
						</arco-catalogue:hasPrivacyReason>
					</xsl:if>
					<xsl:if
						test="record/metadata/schede/*/AD/ADS/ADSD and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AD/ADS/ADSD)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AD/ADS/ADSD)), 'n.r')))">
						<arco-cd:expiryDate>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/AD/ADS/ADSD)" />
						</arco-cd:expiryDate>
					</xsl:if>
					<xsl:if
						test="record/metadata/schede/*/AD/ADS/ADSN and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AD/ADS/ADSN)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AD/ADS/ADSN)), 'n.r')))">
						<arco-core:note>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/AD/ADS/ADSD)" />
						</arco-core:note>
					</xsl:if>
				</rdf:Description>
				<!-- privacy reason as an individuals -->
				<xsl:if
					test="record/metadata/schede/*/AD/ADS/ADSM and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AD/ADS/ADSM)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/AD/ADS/ADSM)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:value-of
							select="concat($NS, 'PrivacyReason/', arco-fn:urify(normalize-space(record/metadata/schede/*/AD/ADS/ADSM)))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/arco/ontology/catalogue/PrivacyReason'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/AD/ADS/ADSM)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/AD/ADS/ADSM)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
			</xsl:if>

			<!-- We add the cultural scope attribution as an individual. -->
			<xsl:for-each select="record/metadata/schede/*/AU/ATB">
				<xsl:if
					test="(not(starts-with(lower-case(normalize-space(./ATBD)), 'nr')) and not(starts-with(lower-case(normalize-space(./ATBD)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                        <xsl:value-of
							select="concat($NS, 'CulturalScopeAttribution/', $itemURI, '-cultural-scope-attribution-', position())" />
                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/CulturalScopeAttribution'" />
                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Attribuzione di ambito culturale del bene: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Attribuzione di ambito culturale del bene: ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Cultural scope attribution of cultural property: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Cultural scope attribution of cultural property: ', $itemURI)" />
						</l0:name>
						<arco-cd:isAuthorshipAttributionOf>
							<xsl:attribute name="rdf:resource"> 
							<xsl:value-of
								select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
						</xsl:attribute>
						</arco-cd:isAuthorshipAttributionOf>
						<xsl:if
							test="./ATBD and not(lower-case(normalize-space(./ATBD))='nr' or lower-case(normalize-space(./ATBD))='n.r.' or lower-case(normalize-space(./ATBD))='nr (recupero pregresso)')">
							<arco-cd:hasCulturalScope>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="concat($NS, 'CulturalScope/', arco-fn:urify(normalize-space(./ATBD)))" />
                            </xsl:attribute>
							</arco-cd:hasCulturalScope>
						</xsl:if>
						<xsl:if
							test="./ATBR and (not(starts-with(lower-case(normalize-space(./ATBR)), 'nr')) and not(starts-with(lower-case(normalize-space(./ATBR)), 'n.r')))">
							<arco-cd:hasInterventionRole>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="concat($NS, 'Role/', $itemURI, '-', arco-fn:urify(normalize-space(./ATBR)))" />
                            </xsl:attribute>
							</arco-cd:hasInterventionRole>
						</xsl:if>
						<xsl:if test="./ATBS">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./ATBS)" />
							</arco-core:note>
						</xsl:if>
						<xsl:if
							test="./ATBM and not(lower-case(normalize-space(./ATBM))='nr' or lower-case(normalize-space(./ATBM))='nr (recupero pregresso)' or lower-case(normalize-space(./ATBM))='n.r.')">
							<arco-cd:hasInterpretationCriterion>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./ATBM)))" />
                            </xsl:attribute>
							</arco-cd:hasInterpretationCriterion>
						</xsl:if>
						<xsl:if test="contains((./ATBD), '?')">
							<arco-cd:dubiuosAuthorshipAttribution>
								<xsl:value-of select="true()" />
							</arco-cd:dubiuosAuthorshipAttribution>
						</xsl:if>
					</rdf:Description>
					<!-- We add the cultural scope attribution source as an individual. -->
					<xsl:if
						test="./ATBM and not(lower-case(normalize-space(./ATBM))='nr' or lower-case(normalize-space(./ATBM))='nr (recupero pregresso)' or lower-case(normalize-space(./ATBM))='n.r.')">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                            <xsl:value-of
								select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./ATBM)))" />
                        </xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/context-description/InterpretationCriterion" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(./ATBM)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./ATBM)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- We add the cultural scope attribution role as an individual. -->
					<xsl:if
						test="./ATBR and (not(starts-with(lower-case(normalize-space(./ATBR)), 'nr')) and not(starts-with(lower-case(normalize-space(./ATBR)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                            <xsl:value-of
								select="concat($NS, 'Role/', $itemURI, '-', arco-fn:urify(normalize-space(./ATBR)))" />
                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/Role'" />
                            </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./ATBR)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./ATBR)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<!-- We add the cultural scope as an individual. -->
					<xsl:if
						test="./ATBD and not(lower-case(normalize-space(./ATBD))='nr' or lower-case(normalize-space(./ATBD))='n.r.' or lower-case(normalize-space(./ATBD))='nr (recupero pregresso)')">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                            <xsl:value-of
								select="concat($NS, 'CulturalScope/', arco-fn:urify(normalize-space(./ATBD)))" />
                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/CulturalScope'" />
                            </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:choose>
									<xsl:when test="contains((./ATBD), '(?)')">
										<xsl:call-template name="CamelCase">
											<xsl:with-param name="text"
												select="normalize-space(substring-before(./ATBD,'('))" />
										</xsl:call-template>
									</xsl:when>
									<xsl:when test="contains((./ATBD), '?')">
										<xsl:call-template name="CamelCase">
											<xsl:with-param name="text"
												select="normalize-space(substring-before(./ATBD,'?'))" />
										</xsl:call-template>
									</xsl:when>
									<xsl:otherwise>
										<xsl:call-template name="CamelCase">
											<xsl:with-param name="text"
												select="normalize-space(./ATBD)" />
										</xsl:call-template>
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<l0:name>
								<xsl:choose>
									<xsl:when test="contains((./ATBD), '(?)')">
										<xsl:call-template name="CamelCase">
											<xsl:with-param name="text"
												select="normalize-space(substring-before(./ATBD,'('))" />
										</xsl:call-template>
									</xsl:when>
									<xsl:when test="contains((./ATBD), '?')">
										<xsl:call-template name="CamelCase">
											<xsl:with-param name="text"
												select="normalize-space(substring-before(./ATBD,'?'))" />
										</xsl:call-template>
									</xsl:when>
									<xsl:otherwise>
										<xsl:call-template name="CamelCase">
											<xsl:with-param name="text"
												select="normalize-space(./ATBD)" />
										</xsl:call-template>
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
						</rdf:Description>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<!-- AU/AUT -->
			<xsl:for-each select="record/metadata/schede/*/AU/AUT">
				<xsl:if
					test="(not(starts-with(lower-case(normalize-space(./AUTN)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUTN)), 'n.r')) and not(starts-with(lower-case(normalize-space(./AUTN)), '-')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                        <xsl:value-of
							select="concat($NS, 'PreferredAuthorshipAttribution/', $itemURI, '-', position())" />
                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/PreferredAuthorshipAttribution'" />
                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Attribuzione di autore preferita, maggiormente accreditata o convincente del bene: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Attribuzione di autore preferita, maggiormente accreditata o convincente del bene: ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Preferred authorship attribution of cultural property: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Preferred authorship attribution of cultural property: ', $itemURI)" />
						</l0:name>
						<arco-cd:isAuthorshipAttributionOf>
							<xsl:attribute name="rdf:resource"> 
							<xsl:value-of
								select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
						</xsl:attribute>
						</arco-cd:isAuthorshipAttributionOf>
						<xsl:if
							test="./AUTN and (not(starts-with(lower-case(normalize-space(./AUTN)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUTN)), 'n.r')))">
							<arco-cd:hasAttributedAuthor>
								<xsl:attribute name="rdf:resource">
                            	<xsl:variable name="author">
		                            <xsl:choose>
		                                <xsl:when
									test="./AUTS and (not(starts-with(lower-case(normalize-space(./AUTS)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUTS)), 'n.r')))">
		                                    <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(concat(./AUTN, '-', ./AUTS)))" />
		                                </xsl:when>
		                                 <xsl:when
									test="./AUTA and (not(starts-with(lower-case(normalize-space(./AUTA)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUTA)), 'n.r')))">
		                                    <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(concat(./AUTN, '-', ./AUTA)))" />
		                                </xsl:when>
		                                <xsl:otherwise>
		                                    <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(./AUTN))" />
		                                </xsl:otherwise>
		                            </xsl:choose>
	                            </xsl:variable>
	                            <xsl:value-of
									select="$author" />
	                                
                            </xsl:attribute>
							</arco-cd:hasAttributedAuthor>
						</xsl:if>
						<xsl:if
							test="./AUTR and not(lower-case(normalize-space(./AUTR))='nr' or lower-case(normalize-space(./AUTR))='nr (recupero pregresso)' or lower-case(normalize-space(./AUTR))='n.r.' or lower-case(normalize-space(./AUTR))='nr [non rilevabile]' or lower-case(normalize-space(./AUTR))='n.r. (non rilevabile)')">
							<arco-cd:hasInterventionRole>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="concat($NS, 'Role/', arco-fn:urify(normalize-space(./AUTR)))" />
                           </xsl:attribute>
							</arco-cd:hasInterventionRole>
						</xsl:if>
						<xsl:if
							test="./AUTY and (not(starts-with(lower-case(normalize-space(./AUTY)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUTY)), 'n.r')))">
							<arco-cd:authorIntervention>
								<xsl:value-of select="normalize-space(./AUTY)" />
							</arco-cd:authorIntervention>
						</xsl:if>
						<xsl:if test="./AUTZ">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./AUTZ)" />
							</arco-core:note>
						</xsl:if>
						<xsl:if
							test="./AUTJ and (not(starts-with(lower-case(normalize-space(./AUTJ)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUTJ)), 'n.r')))">
							<arco-cd:hasAuthorityFileCataloguingAgency>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(./AUTJ))" />
                            </xsl:attribute>
							</arco-cd:hasAuthorityFileCataloguingAgency>
						</xsl:if>
						<xsl:if
							test="./AUTM and (not(starts-with(lower-case(normalize-space(./AUTM)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUTM)), 'n.r')))">
							<arco-cd:hasInterpretationCriterion>
								<xsl:attribute name="rdf:resource">
                            			<xsl:value-of
									select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./AUTM)))" />
                            </xsl:attribute>
							</arco-cd:hasInterpretationCriterion>
						</xsl:if>
					</rdf:Description>
					<xsl:if
						test="./AUTJ and (not(starts-with(lower-case(normalize-space(./AUTJ)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUTJ)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                            <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./AUTJ))" />
                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="'https://w3id.org/italia/onto/COV/Organization'" />
                            </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./AUTJ)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./AUTJ)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<xsl:if
						test="./AUTM and (not(starts-with(lower-case(normalize-space(./AUTM)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUTM)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                            			<xsl:value-of
								select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./AUTM)))" />
                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/InterpretationCriterion'" />
                            </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./AUTM)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./AUTM)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<xsl:if
						test="./AUTR and not(lower-case(normalize-space(./AUTR))='nr' or lower-case(normalize-space(./AUTR))='nr (recupero pregresso)' or lower-case(normalize-space(./AUTR))='n.r.' or lower-case(normalize-space(./AUTR))='nr [non rilevabile]' or lower-case(normalize-space(./AUTR))='n.r. (non rilevabile)')">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                            		<xsl:value-of
								select="concat($NS, 'Role/', arco-fn:urify(normalize-space(./AUTR)))" />
                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/Role'" />
                            </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./AUTR)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./AUTR)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<xsl:if
						test="./AUTN and (not(starts-with(lower-case(normalize-space(./AUTN)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUTN)), 'n.r')))">
						<xsl:variable name="author">
							<xsl:choose>
								<xsl:when
									test="./AUTS and (not(starts-with(lower-case(normalize-space(./AUTS)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUTS)), 'n.r')))">
									<xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(concat(./AUTN, '-', ./AUTS)))" />
								</xsl:when>
								<xsl:when
									test="./AUTA and (not(starts-with(lower-case(normalize-space(./AUTA)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUTA)), 'n.r')))">
									<xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(concat(./AUTN, '-', ./AUTA)))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(./AUTN))" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>

						<xsl:variable name="authorProvo">
							<xsl:choose>
								<xsl:when
									test="./AUTA and (not(starts-with(lower-case(normalize-space(./AUTA)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUTA)), 'n.r')))">
									<xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(concat(./AUTN, '-', ./AUTA)))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(./AUTN))" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                        	<xsl:value-of select="$author" />
                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                                <xsl:choose>
                                    <xsl:when
									test="lower-case(normalize-space(./AUTP))='p'">
                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/CPV/Person'" />
                                    </xsl:when>
                                    <xsl:when
									test="lower-case(normalize-space(./AUTP))='e'">
                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/COV/Organization'" />
                                    </xsl:when>
                                    <xsl:when test="./AUTN">
                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/CPV/Person'" />
                                    </xsl:when>
                                    <xsl:when test="./AUTB">
                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/COV/Organization'" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:attribute>
							</rdf:type>
							<arco-cd:isAuthorOf>
								<xsl:attribute name="rdf:resource"> 
								<xsl:value-of
									select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
							</xsl:attribute>
							</arco-cd:isAuthorOf>
							<rdfs:label>
								<xsl:choose>
									<xsl:when test="./AUTS">
										<xsl:value-of
											select="concat(arco-fn:name-cleaner(./AUTN), ' (', normalize-space(./AUTS), ')')" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="arco-fn:name-cleaner(./AUTN)" />
									</xsl:otherwise>
								</xsl:choose>
							</rdfs:label>
							<l0:name>
								<xsl:choose>
									<xsl:when test="./AUTS">
										<xsl:value-of
											select="concat(arco-fn:name-cleaner(./AUTN), ' (', normalize-space(./AUTS), ')')" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
											select="arco-fn:name-cleaner(./AUTN)" />
									</xsl:otherwise>
								</xsl:choose>
							</l0:name>
							<xsl:if test="./AUTA and (not(starts-with(lower-case(normalize-space(./AUTA)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUTA)), 'n.r')))">
							<owl:sameAs>
								<xsl:attribute name="rdf:resource">
								<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./AUTN))" />
								</xsl:attribute>
							</owl:sameAs>
							</xsl:if>
							<xsl:if
								test="./AUTA and (not(starts-with(lower-case(normalize-space(./AUTA)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUTA)), 'n.r')))">
								<arco-cd:agentDate>
									<xsl:value-of select="normalize-space(./AUTA)" />
								</arco-cd:agentDate>
							</xsl:if>
							<xsl:if
								test="./AUTH and (not(starts-with(lower-case(normalize-space(./AUTH)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUTH)), 'n.r')))">
								<arco-cd:agentLocalIdentifier>
									<xsl:value-of select="normalize-space(./AUTH)" />
								</arco-cd:agentLocalIdentifier>
							</xsl:if>
							<xsl:if
								test="./AUTK and (not(starts-with(lower-case(normalize-space(./AUTK)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUTK)), 'n.r')))">
								<arco-cd:authorICCDIdentifier>
									<xsl:value-of select="normalize-space(./AUTK)" />
								</arco-cd:authorICCDIdentifier>
							</xsl:if>
							<xsl:if
								test="./NCUN and (not(starts-with(lower-case(normalize-space(./NCUN)), 'nr')) and not(starts-with(lower-case(normalize-space(./NCUN)), 'n.r')))">
								<arco-cd:authorICCDIdentifier>
									<xsl:value-of select="normalize-space(./NCUN)" />
								</arco-cd:authorICCDIdentifier>
							</xsl:if>
						</rdf:Description>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<!-- AU/AUF (F version 2.00, 3.00) -->
			<xsl:for-each select="record/metadata/schede/F/AU/AUF">
				<xsl:if
					test="./AUFN and not(starts-with(lower-case(normalize-space(./AUFN)), 'n.r')) and not(starts-with(lower-case(normalize-space(./AUFN)), 'n.r')) and not(starts-with(lower-case(normalize-space(./AUFN)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUFN)), 'nr'))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                        <xsl:value-of
							select="concat($NS, 'PreferredAuthorshipAttribution/', $itemURI, '-photographer-', position())" />
                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/PreferredAuthorshipAttribution'" />
                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Attribuzione di autore di fotografia preferita, maggiormente accreditata o convincente del bene: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Attribuzione di autore di fotografia preferita, maggiormente accreditata o convincente del bene: ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Preferred photograph authorship attribution of cultural property: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Preferred photograph authorship attribution of cultural property: ', $itemURI)" />
						</l0:name>
						<arco-cd:isAuthorshipAttributionOf>
							<xsl:attribute name="rdf:resource"> 
							<xsl:value-of
								select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
						</xsl:attribute>
						</arco-cd:isAuthorshipAttributionOf>
						<xsl:if test="./AUFK">
							<arco-core:specifications>
								<xsl:value-of select="./AUFK" />
							</arco-core:specifications>
						</xsl:if>
						<xsl:if
							test="(./AUFN and not(starts-with(lower-case(normalize-space(./AUFN)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUFN)), 'n.r'))) 
						or (./AUFB and not(starts-with(lower-case(normalize-space(./AUFB)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUFB)), 'n.r')))">
							<arco-cd:hasAttributedAuthor>
								<xsl:attribute name="rdf:resource">
                            		<xsl:variable name="author">
		                            	<xsl:choose>
		                                	<xsl:when
									test="./AUFN and ./AUFS and not(starts-with(lower-case(normalize-space(./AUFS)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUFS)), 'n.r'))">
		                                    	<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(concat(./AUFN, '-', ./AUFS)))" />
		                                	</xsl:when>
		                                	<xsl:when
									test="./AUFB and ./AUFS and (not(starts-with(lower-case(normalize-space(./AUFS)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUFS)), 'n.r')))">
		                                    	<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(concat(./AUFB, '-', ./AUFS)))" />
		                                	</xsl:when>
		                                	<xsl:when test="./AUFB">
		                                    	<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(./AUFB))" />
		                                	</xsl:when>
		                                	<xsl:otherwise>
		                                    	<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(./AUFN))" />
		                                	</xsl:otherwise>
		                            </xsl:choose>
	                            </xsl:variable>
	                            <xsl:choose>
	                                <xsl:when test="./AUFS">
	                                    <xsl:value-of
									select="concat($author, '-', arco-fn:urify(normalize-space(./AUFS)))" />
	                                </xsl:when>
	                                <xsl:otherwise>
	                                    <xsl:value-of
									select="$author" />
	                                </xsl:otherwise>
	                            </xsl:choose>
                            </xsl:attribute>
							</arco-cd:hasAttributedAuthor>
						</xsl:if>
						<xsl:if
							test="./AUFR and not(lower-case(normalize-space(./AUFR))='nr' or lower-case(normalize-space(./AUFR))='nr (recupero pregresso)' or lower-case(normalize-space(./AUFR))='n.r.' or lower-case(normalize-space(./AUFR))='nr [non rilevabile]' or lower-case(normalize-space(./AUFR))='n.r. (non rilevabile)')">
							<arco-cd:hasInterventionRole>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
									select="concat($NS, 'Role/', arco-fn:urify(normalize-space(./AUFR)))" />
                           </xsl:attribute>
							</arco-cd:hasInterventionRole>
						</xsl:if>
						<xsl:if
							test="./AUFM and not(starts-with(lower-case(normalize-space(./AUFM)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUFM)), 'n.r'))">
							<arco-cd:hasInterpretationCriterion>
								<xsl:attribute name="rdf:resource">
                                		<xsl:value-of
									select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./AUFM)))" />  
                            </xsl:attribute>
							</arco-cd:hasInterpretationCriterion>
						</xsl:if>
					</rdf:Description>
					<xsl:if
						test="./AUFM and not(starts-with(lower-case(normalize-space(./AUFM)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUFM)), 'n.r'))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                           
                                		<xsl:value-of
								select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./AUFM)))" />                         	
                                	
                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/InterpretationCriterion'" />
                            </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./AUFM)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./AUFM)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<xsl:if
						test="./AUFR and not(lower-case(normalize-space(./AUFR))='nr' or lower-case(normalize-space(./AUFR))='nr (recupero pregresso)' or lower-case(normalize-space(./AUFR))='n.r.' or lower-case(normalize-space(./AUFR))='nr [non rilevabile]' or lower-case(normalize-space(./AUFR))='n.r. (non rilevabile)')">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                            		<xsl:value-of
								select="concat($NS, 'Role/', arco-fn:urify(normalize-space(./AUFR)))" />
                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/Role'" />
                            </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./AUFR)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./AUFR)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<xsl:if
						test="(./AUFN and (not(starts-with(lower-case(normalize-space(./AUFN)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUFN)), 'n.r')))) or (./AUFB and (not(starts-with(lower-case(normalize-space(./AUFB)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUFB)), 'n.r'))))">


						<xsl:variable name="author">
							<xsl:choose>
								<xsl:when
									test="./AUFN and ./AUFS and not(starts-with(lower-case(normalize-space(./AUFS)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUFS)), 'n.r'))">
									<xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(concat(./AUFN, '-', ./AUFS)))" />
								</xsl:when>
								<xsl:when test="./AUFN">
									<xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(./AUFN))" />
								</xsl:when>
								<xsl:when
									test="./AUFB and ./AUFS and not(starts-with(lower-case(normalize-space(./AUFS)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUFS)), 'n.r'))">
									<xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(concat(./AUFB, '-', ./AUFS)))" />
								</xsl:when>
								<xsl:when test="./AUFB">
									<xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(./AUFB))" />
								</xsl:when>
							</xsl:choose>
						</xsl:variable>

						<xsl:if test="$author != ''">
							<rdf:Description>

								<xsl:attribute name="rdf:about">
	                        		<xsl:value-of select="$author" />	                          
	                        	</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
	                                	<xsl:choose>
	                                    	<xsl:when test="./AUFN">
	                                        	<xsl:value-of
										select="'https://w3id.org/italia/onto/CPV/Person'" />
	                                    </xsl:when>
	                                    <xsl:when test="./AUFB">
	                                        <xsl:value-of
										select="'https://w3id.org/italia/onto/COV/Organization'" />
	                                    </xsl:when>
	                                    <xsl:otherwise>
	                                        <xsl:value-of
										select="'https://w3id.org/italia/onto/l0/Agent'" />
	                                    </xsl:otherwise>
	                                </xsl:choose>
	                            </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:choose>
										<xsl:when test="./AUFN">
											<xsl:choose>
												<xsl:when test="./AUFS">
													<xsl:value-of
														select="concat(arco-fn:name-cleaner(./AUFN), ' (', normalize-space(./AUFS), ')')" />
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of
														select="arco-fn:name-cleaner(./AUFN)" />
												</xsl:otherwise>
											</xsl:choose>
										</xsl:when>
										<xsl:when test="./AUFB">
											<xsl:choose>
												<xsl:when test="./AUFS">
													<xsl:call-template name="CamelCase">
														<xsl:with-param name="text"
															select="concat(normalize-space(./AUFB), ' (', normalize-space(./AUFS), ')')" />
													</xsl:call-template>
												</xsl:when>
												<xsl:otherwise>
													<xsl:call-template name="CamelCase">
														<xsl:with-param name="text"
															select="normalize-space(./AUFB)" />
													</xsl:call-template>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:when>
									</xsl:choose>
								</rdfs:label>
								<l0:name>
									<xsl:choose>
										<xsl:when test="./AUFN">
											<xsl:choose>
												<xsl:when test="./AUFS">
													<xsl:value-of
														select="concat(arco-fn:name-cleaner(./AUFN), ' (', normalize-space(./AUFS), ')')" />
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of
														select="arco-fn:name-cleaner(./AUFN)" />
												</xsl:otherwise>
											</xsl:choose>
										</xsl:when>
										<xsl:when test="./AUFB">
											<xsl:choose>
												<xsl:when test="./AUFS">
													<xsl:call-template name="CamelCase">
														<xsl:with-param name="text"
															select="concat(normalize-space(./AUFB), ' (', normalize-space(./AUFS), ')')" />
													</xsl:call-template>
												</xsl:when>
												<xsl:otherwise>
													<xsl:call-template name="CamelCase">
														<xsl:with-param name="text"
															select="normalize-space(./AUFB)" />
													</xsl:call-template>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:when>
									</xsl:choose>
								</l0:name>
								<xsl:if
									test="./AUFA and not(starts-with(lower-case(normalize-space(./AUFA)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUFA)), 'n.r'))">
									<arco-cd:agentDate>
										<xsl:value-of select="normalize-space(./AUFA)" />
									</arco-cd:agentDate>
								</xsl:if>
								<xsl:if
									test="./AUFH and (not(starts-with(lower-case(normalize-space(./AUFH)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUFH)), 'n.r')))">
									<arco-cd:agentLocalIdentifier>
										<xsl:value-of select="normalize-space(./AUFH)" />
									</arco-cd:agentLocalIdentifier>
								</xsl:if>
								<xsl:if
									test="./NCUN and (not(starts-with(lower-case(normalize-space(./NCUN)), 'nr')) and not(starts-with(lower-case(normalize-space(./NCUN)), 'n.r')))">
									<arco-cd:authorICCDIdentifier>
										<xsl:value-of select="normalize-space(./NCUN)" />
									</arco-cd:authorICCDIdentifier>
								</xsl:if>
							</rdf:Description>
						</xsl:if>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<!-- responsibility for cultural property (F and FF) -->
			<xsl:for-each select="record/metadata/schede/*/PD/PDF">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS, 'Responsibility/', $itemURI, '-', position())" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/Responsibility'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Responsabilità ', position(), ' relativamente al bene fotografico: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Responsabilità ', position(), ' relativamente al bene fotografico: ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Responsibility ', position(), ' for photographic heritage: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Responsibility ', position(), ' for photographic heritage: ', $itemURI)" />
					</l0:name>
					<arco-cd:isResponsibilityFor>
						<xsl:attribute name="rdf:resource"> 
							<xsl:value-of
							select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
						</xsl:attribute>
					</arco-cd:isResponsibilityFor>
					<xsl:if test="./PDFS">
						<arco-core:note>
							<xsl:value-of select="normalize-space(./PDFS)" />
						</arco-core:note>
					</xsl:if>
					<arco-cd:hasAgentWithResponsibility>
						<xsl:attribute name="rdf:resource">
		                            <xsl:choose>
		                                <xsl:when
							test="./PDFN and ./PDFA">
		                                    <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(concat(./PDFN, '-', ./PDFA)))" />
		                                </xsl:when>
		                                <xsl:when test="./PDFN">
		                                    <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(./PDFN))" />
		                                </xsl:when>
		                                <xsl:when
							test="./PDFB and not($sheetVersion='4.00' or $sheetVersion='4.00_ICCD0') and ./PDFA">
		                                    <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(concat(./PDFB, '-', ./PDFA)))" />
		                                </xsl:when>
		                                <xsl:when
							test="./PDFB and not($sheetVersion='4.00' or $sheetVersion='4.00_ICCD0')">
		                                    <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(./PDFB))" />
		                                </xsl:when>
		                            </xsl:choose>
                            </xsl:attribute>
					</arco-cd:hasAgentWithResponsibility>
					<xsl:if
						test="./PDFR and not(lower-case(normalize-space(./PDFR))='nr' or lower-case(normalize-space(./PDFR))='nr (recupero pregresso)' or lower-case(normalize-space(./PDFR))='n.r.' or lower-case(normalize-space(./PDFR))='n.r. [non rilevabile]')">
						<arco-cd:hasResponsibilityType>
							<xsl:attribute name="rdf:resource">
                            	<xsl:value-of
								select="concat($NS, 'ResponsibilityType/', arco-fn:urify(normalize-space(./PDFR)))" />
                           </xsl:attribute>
						</arco-cd:hasResponsibilityType>
					</xsl:if>
					<xsl:if
						test="./PDFD and (not(starts-with(lower-case(normalize-space(./PDFD)), 'nr')) and not(starts-with(lower-case(normalize-space(./PDFD)), 'n.r')))">
						<tiapit:time>
							<xsl:value-of select="normalize-space(./PDFD)" />
						</tiapit:time>
					</xsl:if>
					<xsl:if
						test="./PDFJ and (not(starts-with(lower-case(normalize-space(./PDFJ)), 'nr')) and not(starts-with(lower-case(normalize-space(./PDFJ)), 'n.r')))">
						<arco-cd:hasAuthorityFileCataloguingAgency>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./PDFJ))" />
                            </xsl:attribute>
						</arco-cd:hasAuthorityFileCataloguingAgency>
					</xsl:if>
					<xsl:if
						test="./PDFL and (not(starts-with(lower-case(normalize-space(./PDFL)), 'nr')) and not(starts-with(lower-case(normalize-space(./PDFL)), 'n.r')))">
						<arco-core:hasLocation>
							<xsl:attribute name="rdf:resource">
			                     <xsl:value-of
								select="concat($NS, 'GeographicalFeature/', arco-fn:urify(normalize-space(./PDFL)))" />
			                </xsl:attribute>
						</arco-core:hasLocation>
					</xsl:if>
					<xsl:if
						test="./PDFM and not(lower-case(normalize-space(./PDFM))='nr' or lower-case(normalize-space(./PDFM))='nr (recupero pregresso)' or lower-case(normalize-space(./PDFM))='n.r.' or lower-case(normalize-space(./PDFM))='n.r. [non rilevabile]' or lower-case(normalize-space(./PDFM))='n.r. (non rilevabile)')">
						<arco-cd:hasInterpretationCriterion>
							<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
								select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./PDFM)))" />
                            </xsl:attribute>
						</arco-cd:hasInterpretationCriterion>
					</xsl:if>
					<xsl:if
						test="./PDFC and not(lower-case(normalize-space(./PDFC))='nr' or lower-case(normalize-space(./PDFC))='nr (recupero pregresso)' or lower-case(normalize-space(./PDFC))='n.r.' or lower-case(normalize-space(./PDFC))='n.r. [non rilevabile]' or lower-case(normalize-space(./PDFM))='n.r. (non rilevabile)')">
						<arco-cd:hasCircumstance>
							<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
								select="concat($NS, 'Circumstance/', arco-fn:urify(normalize-space(./PDFC)))" />
                            </xsl:attribute>
						</arco-cd:hasCircumstance>
					</xsl:if>
				</rdf:Description>
				<xsl:if
					test="./PDFJ and (not(starts-with(lower-case(normalize-space(./PDFJ)), 'nr')) and not(starts-with(lower-case(normalize-space(./PDFJ)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(./PDFJ))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/italia/onto/COV/Organization'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(./PDFJ)" />
							</xsl:call-template>
						</rdfs:label>
						<l0:name>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(./PDFJ)" />
							</xsl:call-template>
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<xsl:if
					test="./PDFM and not(lower-case(normalize-space(./PDFM))='nr' or lower-case(normalize-space(./PDFM))='nr (recupero pregresso)' or lower-case(normalize-space(./PDFM))='n.r.' or lower-case(normalize-space(./PDFM))='n.r. [non rilevabile]' or lower-case(normalize-space(./PDFM))='n.r. (non rilevabile)')">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                             <xsl:value-of
							select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./PDFM)))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/InterpretationCriterion'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./PDFM)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./PDFM)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<xsl:if
					test="./PDFL and (not(starts-with(lower-case(normalize-space(./PDFL)), 'nr')) and not(starts-with(lower-case(normalize-space(./PDFL)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                                <xsl:value-of
							select="concat($NS, 'GeographicalFeature/', arco-fn:urify(normalize-space(./PDFL)))" />
                            </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                    <xsl:value-of
								select="'http://dati.beniculturali.it/cis/GeographicalFeature'" />
                                </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./PDFL)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./PDFL)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<xsl:if
					test="./PDFC and not(lower-case(normalize-space(./PDFC))='nr' or lower-case(normalize-space(./PDFC))='nr (recupero pregresso)' or lower-case(normalize-space(./PDFC))='n.r.' or lower-case(normalize-space(./PDFC))='n.r. [non rilevabile]')">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                             <xsl:value-of
							select="concat($NS, 'Circumstance/', arco-fn:urify(normalize-space(./PDFC)))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/Circumstance'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./PDFC)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./PDFC)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<xsl:if
					test="./PDFR and not(lower-case(normalize-space(./PDFR))='nr' or lower-case(normalize-space(./PDFR))='nr (recupero pregresso)' or lower-case(normalize-space(./PDFR))='n.r.' or lower-case(normalize-space(./PDFR))='n.r. [non rilevabile]')">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            		<xsl:value-of
							select="concat($NS, 'ResponsibilityType/', arco-fn:urify(normalize-space(./PDFR)))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/ResponsibilityType'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./PDFR)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./PDFR)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- agent with responsibility -->
				<rdf:Description>
					<xsl:attribute name="rdf:about">
		                            <xsl:choose>
		                                <xsl:when
						test="./PDFN and ./PDFA">
		                                    <xsl:value-of
						select="concat($NS, 'Agent/', arco-fn:arcofy(concat(./PDFN, '-', ./PDFA)))" />
		                                </xsl:when>
		                                <xsl:when test="./PDFN">
		                                    <xsl:value-of
						select="concat($NS, 'Agent/', arco-fn:arcofy(./PDFN))" />
		                                </xsl:when>
		                                <xsl:when
						test="./PDFB and not($sheetVersion='4.00' or $sheetVersion='4.00_ICCD0') and ./PDFA">
		                                    <xsl:value-of
						select="concat($NS, 'Agent/', arco-fn:arcofy(concat(./PDFB, '-', ./PDFA)))" />
		                                </xsl:when>
		                                <xsl:when
						test="./PDFB and not($sheetVersion='4.00' or $sheetVersion='4.00_ICCD0')">
		                                    <xsl:value-of
						select="concat($NS, 'Agent/', arco-fn:arcofy(./PDFB))" />
		                                </xsl:when>
		                            </xsl:choose>
                        </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                                <xsl:choose>
                                    <xsl:when
							test="lower-case(normalize-space(./PDFP))='p'">
                                        <xsl:value-of
							select="'https://w3id.org/italia/onto/CPV/Person'" />
                                    </xsl:when>
                                    <xsl:when
							test="lower-case(normalize-space(./PDFP))='e'">
                                        <xsl:value-of
							select="'https://w3id.org/italia/onto/COV/Organization'" />
                                    </xsl:when>
                                    <xsl:when
							test="./PDFN and not($sheetVersion='4.00' or $sheetVersion='4.00_ICCD0')">
                                        <xsl:value-of
							select="'https://w3id.org/italia/onto/CPV/Person'" />
                                    </xsl:when>
                                    <xsl:when
							test="./PDFB and not($sheetVersion='4.00' or $sheetVersion='4.00_ICCD0')">
                                        <xsl:value-of
							select="'https://w3id.org/italia/onto/COV/Organization'" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:value-of
							select="'https://w3id.org/italia/onto/l0/Agent'" />
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:choose>
							<xsl:when test="./PDFN">
								<xsl:value-of select="normalize-space(./PDFN)" />
							</xsl:when>
							<xsl:when
								test="./PDFB and not($sheetVersion='4.00' or $sheetVersion='4.00_ICCD0')">
								<xsl:value-of select="normalize-space(./PDFB)" />
							</xsl:when>
						</xsl:choose>
					</rdfs:label>
					<l0:name>
						<xsl:choose>
							<xsl:when test="./PDFN">
								<xsl:value-of select="normalize-space(./PDFN)" />
							</xsl:when>
							<xsl:when
								test="./PDFB and not($sheetVersion='4.00' or $sheetVersion='4.00_ICCD0')">
								<xsl:value-of select="normalize-space(./PDFB)" />
							</xsl:when>
						</xsl:choose>
					</l0:name>
					<xsl:if test="./PDFA">
						<arco-cd:agentDate>
							<xsl:value-of select="normalize-space(./PDFA)" />
						</arco-cd:agentDate>
					</xsl:if>
					<xsl:if
						test="./PDFH and (not(starts-with(lower-case(normalize-space(./PDFH)), 'nr')) and not(starts-with(lower-case(normalize-space(./PDFH)), 'n.r')))">
						<arco-cd:agentLocalIdentifier>
							<xsl:value-of select="normalize-space(./PDFH)" />
						</arco-cd:agentLocalIdentifier>
					</xsl:if>
					<xsl:if
						test="./PDFB and $sheetVersion='4.00_ICCD0' and (not(starts-with(lower-case(normalize-space(./PDFB)), 'nr')) and not(starts-with(lower-case(normalize-space(./PDFB)), 'n.r')))">
						<arco-cd:historicalBiographicalInformation>
							<xsl:value-of select="normalize-space(./PDFB)" />
						</arco-cd:historicalBiographicalInformation>
					</xsl:if>
				</rdf:Description>
			</xsl:for-each>
			<!-- inventory as an individual -->
			<xsl:for-each select="record/metadata/schede/*/UB/INV">
				<xsl:if test="./*">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
		            		<xsl:value-of
							select="concat($NS, 'Inventory/', $itemURI, '-', position())" />
		            	</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                            	<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/Inventory'" />
                        	</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="en">
							<xsl:choose>
								<xsl:when test="./INVA">
									<xsl:value-of select="normalize-space(./INVA)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat('Inventory ', normalize-space(./INVN), 'of cultural property: ', $itemURI)" />
								</xsl:otherwise>
							</xsl:choose>
						</rdfs:label>
						<rdfs:label xml:lang="it">
							<xsl:choose>
								<xsl:when test="./INVA">
									<xsl:value-of select="normalize-space(./INVA)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat('Inventario ', normalize-space(./INVN), 'del bene culturale: ', $itemURI)" />
								</xsl:otherwise>
							</xsl:choose>
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:choose>
								<xsl:when test="./INVA">
									<xsl:value-of select="normalize-space(./INVA)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat('Inventory ', normalize-space(./INVN), ' of cultural property: ', $itemURI)" />
								</xsl:otherwise>
							</xsl:choose>
						</l0:name>
						<l0:name xml:lang="it">
							<xsl:choose>
								<xsl:when test="./INVA">
									<xsl:value-of select="normalize-space(./INVA)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat('Inventario ', normalize-space(./INVN), ' del bene culturale: ', $itemURI)" />
								</xsl:otherwise>
							</xsl:choose>
						</l0:name>
						<xsl:if test="./INVC and (not(starts-with(lower-case(normalize-space(./INVC)), 'nr')) and not(starts-with(lower-case(normalize-space(./INVC)), 'n.r')))">
							<arco-cd:inventoryLocation>
								<xsl:value-of select="normalize-space(./INVC)" />
							</arco-cd:inventoryLocation>
						</xsl:if>
						<xsl:if test="./INVD and (not(starts-with(lower-case(normalize-space(./INVD)), 'nr')) and not(starts-with(lower-case(normalize-space(./INVD)), 'n.r')))">
							<tiapit:time>
								<xsl:value-of select="normalize-space(./INVD)" />
							</tiapit:time>
						</xsl:if>
						<xsl:if test="./INVS and not($sheetVersion='2.00' or $sheetVersion='2.00_ICCD0')">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./INVS)" />
							</arco-core:note>
						</xsl:if>
						<xsl:if test="./INVN and (not(starts-with(lower-case(normalize-space(./INVN)), 'nr')) and not(starts-with(lower-case(normalize-space(./INVN)), 'n.r')))"></xsl:if>
						<arco-cd:inventoryIdentifier>
							<xsl:value-of select="normalize-space(./INVN)" />
						</arco-cd:inventoryIdentifier>
						<!-- responsible of inventory identifier -->
						<xsl:if test="./INVG and (not(starts-with(lower-case(normalize-space(./INVG)), 'nr')) and not(starts-with(lower-case(normalize-space(./INVG)), 'n.r')))">
							<arco-core:hasAgentRole>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of select="concat($NS, 'AgentRole/', $itemURI, '-inventory-identifier-responsible')" />
                        		</xsl:attribute>
							</arco-core:hasAgentRole>
							<arco-cd:hasInventoryIdentifierResponsible>
								<xsl:attribute name="rdf:resource">
                            		<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./INVG))" />
                        		</xsl:attribute>
							</arco-cd:hasInventoryIdentifierResponsible>
						</xsl:if>
					</rdf:Description>
					<!-- agent role for responsible of inventory identifier -->
					<xsl:if test="./INVG and (not(starts-with(lower-case(normalize-space(./INVG)), 'nr')) and not(starts-with(lower-case(normalize-space(./INVG)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                        <xsl:value-of
								select="concat($NS, 'AgentRole/', $itemURI, '-inventory-identifier-responsible')" />
		                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/arco/ontology/core/AgentRole'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Responsabile del numero di inventario del bene ', $itemURI, ': ', normalize-space(./INVG))" />
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Responsible for inventory identifier of cultural property ', $itemURI, ': ', normalize-space(./INVG))" />
							</rdfs:label>
							<arco-core:hasRole>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="concat($NS, 'Role/InventoryIdentifierResponsible')" />
		                        </xsl:attribute>
							</arco-core:hasRole>
							<arco-core:hasAgent>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(./INVG))" />
		                        </xsl:attribute>
							</arco-core:hasAgent>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                        <xsl:value-of
								select="concat($NS, 'Role/InventoryIdentifierResponsible')" />
		                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/Role'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="'Responsabile del numero di inventario'" />
							</rdfs:label>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="'Inventory Identifier Responsible'" />
							</rdfs:label>
							<arco-core:isRoleOf>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-inventory-identifier-responsible')" />
		                        </xsl:attribute>
							</arco-core:isRoleOf>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
		                        <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./INVG))" />
		                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
		                        </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./INVG)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./INVG)" />
							</l0:name>
							<arco-core:isAgentOf>
								<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-inventory-identifier-responsible')" />
		                        </xsl:attribute>
							</arco-core:isAgentOf>
						</rdf:Description>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<!-- Estimate for version 2.00 -->
			<xsl:if
				test="record/metadata/schede/*/UB/INV/INVS and ($sheetVersion='2.00' or $sheetVersion='2.00_ICCD0')">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
	                            <xsl:value-of
						select="concat($NS, 'CulturalPropertyEstimate/', $itemURI)" />
	                 </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/CulturalPropertyEstimate'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Stima del bene ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Estimate of cultural property ', $itemURI)" />
					</l0:name>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Stima del bene ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Estimate of cultural property ', $itemURI)" />
					</rdfs:label>
					<arco-cd:hasInterpretationCriterion>
						<xsl:attribute name="rdf:resource">
                                <xsl:value-of
							select="concat($NS, 'Source/inventario-patrimoniale')" />
                            </xsl:attribute>
					</arco-cd:hasInterpretationCriterion>
					<arco-cd:culturalPropertyValue>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/UB/INV/INVS)" />
					</arco-cd:culturalPropertyValue>
				</rdf:Description>

			</xsl:if>
			<!-- commission as an individual -->
			<xsl:for-each select="record/metadata/schede/*/AU/CMM">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS, 'Commission/', $itemURI, '-', position())" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/Commission'" />
                        </xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Committenza ', position(), ' del bene ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Commission ', position(), ' of cultural property ', $itemURI)" />
					</l0:name>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Committenza ', position(), ' del bene ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Commission ', position(), ' of cultural property ', $itemURI)" />
					</rdfs:label>
					<xsl:for-each select="./CMMN">
						<xsl:if test=".">
							<arco-cd:hasCommittent>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
                            </xsl:attribute>
							</arco-cd:hasCommittent>
						</xsl:if>
					</xsl:for-each>
					<xsl:if
						test="./CMMC and (not(starts-with(lower-case(normalize-space(./CMMC)), 'nr')) and not(starts-with(lower-case(normalize-space(./CMMC)), 'n.r')))">
						<arco-cd:hasCircumstance>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'Circumstance/', arco-fn:urify(normalize-space(./CMMC)))" />
                            </xsl:attribute>
						</arco-cd:hasCircumstance>
					</xsl:if>
					<xsl:if
						test="./CMMF and not(lower-case(normalize-space(./CMMF))='nr' or lower-case(normalize-space(./CMMF))='nr (recupero pregresso)' or lower-case(normalize-space(./CMMF))='n.r.')">
						<arco-cd:hasInterpretationCriterion>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./CMMF)))" />
                            </xsl:attribute>
						</arco-cd:hasInterpretationCriterion>
					</xsl:if>
					<xsl:if
						test="./CMMD and (not(starts-with(lower-case(normalize-space(./CMMD)), 'nr')) and not(starts-with(lower-case(normalize-space(./CMMD)), 'n.r')))">
						<tiapit:time>
							<xsl:value-of select="normalize-space(./CMMD)" />
						</tiapit:time>
					</xsl:if>
					<xsl:if test="./CMMY">
						<arco-core:note>
							<xsl:value-of select="normalize-space(./CMMY)" />
						</arco-core:note>
					</xsl:if>
				</rdf:Description>
				<xsl:if
					test="./CMMF and not(lower-case(normalize-space(./CMMF))='nr' or lower-case(normalize-space(./CMMF))='nr (recupero pregresso)' or lower-case(normalize-space(./CMMF))='n.r.')">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:value-of
							select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./CMMF)))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/InterpretationCriterion'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./CMMF)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./CMMF)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<xsl:if
					test="./CMMC and (not(starts-with(lower-case(normalize-space(./CMMC)), 'nr')) and not(starts-with(lower-case(normalize-space(./CMMC)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:value-of
							select="concat($NS, 'Circumstance/', arco-fn:urify(normalize-space(./CMMC)))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/Circumstance'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./CMMC)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./CMMC)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<xsl:for-each select="./CMMN">
					<xsl:if test=".">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
	                            <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
	                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
	                                <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
	                            </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:call-template name="CamelCase">
									<xsl:with-param name="text"
										select="normalize-space(.)" />
								</xsl:call-template>
							</rdfs:label>
							<l0:name>
								<xsl:call-template name="CamelCase">
									<xsl:with-param name="text"
										select="normalize-space(.)" />
								</xsl:call-template>
							</l0:name>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:for-each>



			<xsl:for-each select="record/metadata/schede/*/AU/AAT">
				<xsl:if test="not(record/metadata/schede/*/AU/AAT/*)">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
        	<xsl:value-of
							select="concat($NS, 'AlternativeAuthorshipAttribution/', $itemURI, '-', position())" />
        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            	<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/AlternativeAuthorshipAttribution'" />
			</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Attribuzione superata, alternativa o tradizionale di autore del bene: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Attribuzione superata, alternativa o tradizionale di autore del bene: ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Alternative authorship attribution of cultural property: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Alternative authorship attribution of cultural property: ', $itemURI)" />
						</l0:name>
						<arco-cd:isAuthorshipAttributionOf>
							<xsl:attribute name="rdf:resource"> 
							<xsl:value-of
								select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
						</xsl:attribute>
						</arco-cd:isAuthorshipAttributionOf>

						<arco-cd:hasAttributedAuthor>
							<xsl:attribute name="rdf:resource">
        	                	<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
            	            </xsl:attribute>
						</arco-cd:hasAttributedAuthor>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                        <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Agent'" />
                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(.)" />
							</xsl:call-template>
						</rdfs:label>
						<l0:name>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(.)" />
							</xsl:call-template>
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<xsl:if
					test="./AATN and (not(starts-with(lower-case(normalize-space(./AATN)), 'nr')) and not(starts-with(lower-case(normalize-space(./AATN)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
        	<xsl:value-of
							select="concat($NS, 'AlternativeAuthorshipAttribution/', $itemURI, '-', position())" />
        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            	<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/AlternativeAuthorshipAttribution'" />
			</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Attribuzione superata, alternativa o tradizionale di autore del bene: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Attribuzione superata, alternativa o tradizionale di autore del bene: ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Alternative authorship attribution of cultural property: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Alternative authorship attribution of cultural property: ', $itemURI)" />
						</l0:name>
						<arco-cd:isAuthorshipAttributionOf>
							<xsl:attribute name="rdf:resource"> 
							<xsl:value-of
								select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
						</xsl:attribute>
						</arco-cd:isAuthorshipAttributionOf>

						<arco-cd:hasAttributedAuthor>
							<xsl:attribute name="rdf:resource">
        	                	<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(./AATN))" />
            	            </xsl:attribute>
						</arco-cd:hasAttributedAuthor>

						<xsl:if test="./AATY">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./AATY)" />
							</arco-core:note>
						</xsl:if>
						<xsl:if
							test="./AATM and (not(starts-with(lower-case(normalize-space(./AATM)), 'nr')) and not(starts-with(lower-case(normalize-space(./AATM)), 'n.r')))">
							<arco-cd:hasInterpretationCriterion>
								<xsl:attribute name="rdf:resource">
								<xsl:value-of
									select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./AATM)))" />
                            </xsl:attribute>
							</arco-cd:hasInterpretationCriterion>
						</xsl:if>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                        <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(./AATN))" />
                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Agent'" />
                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:choose>
								<xsl:when test="./AATN">
									<xsl:value-of
										select="arco-fn:name-cleaner(./AATN)" />
								</xsl:when>
								<xsl:when test="../AAF/AAFN">
									<xsl:value-of
										select="arco-fn:name-cleaner(../AAF/AAFN)" />
								</xsl:when>
								<xsl:when test="../AAF/AAFB">
									<xsl:call-template name="CamelCase">
										<xsl:with-param name="text"
											select="normalize-space(../AAF/AAFB)" />
									</xsl:call-template>
								</xsl:when>
								<xsl:otherwise>
									<xsl:call-template name="CamelCase">
										<xsl:with-param name="text"
											select="normalize-space(.)" />
									</xsl:call-template>
								</xsl:otherwise>
							</xsl:choose>
						</rdfs:label>
						<l0:name>
							<xsl:choose>
								<xsl:when test="./AATN">
									<xsl:value-of
										select="arco-fn:name-cleaner(./AATN)" />
								</xsl:when>
								<xsl:when test="../AAF/AAFN">
									<xsl:value-of
										select="arco-fn:name-cleaner(../AAF/AAFN)" />
								</xsl:when>
								<xsl:when test="../AAF/AAFB">
									<xsl:call-template name="CamelCase">
										<xsl:with-param name="text"
											select="normalize-space(../AAF/AAFB)" />
									</xsl:call-template>
								</xsl:when>
								<xsl:otherwise>
									<xsl:call-template name="CamelCase">
										<xsl:with-param name="text"
											select="normalize-space(.)" />
									</xsl:call-template>
								</xsl:otherwise>
							</xsl:choose>
						</l0:name>
						<xsl:if test="./AATA">
							<arco-cd:agentDate>
								<xsl:value-of select="normalize-space(./AATA)" />
							</arco-cd:agentDate>
						</xsl:if>
					</rdf:Description>
				</xsl:if>
				<xsl:if
					test="./AATM and (not(starts-with(lower-case(normalize-space(./AATM)), 'nr')) and not(starts-with(lower-case(normalize-space(./AATM)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                       	 	<xsl:value-of
							select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./AATM)))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/InterpretationCriterion'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./AATM)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./AATM)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>

			<xsl:for-each select="record/metadata/schede/*/AU/AAF">
				<xsl:if
					test="(./AAFN and (not(starts-with(lower-case(normalize-space(./AAFN)), 'nr')) and not(starts-with(lower-case(normalize-space(./AAFN)), 'n.r'))))
	or
	(./AAFB and (not(starts-with(lower-case(normalize-space(./AAFB)), 'nr')) and not(starts-with(lower-case(normalize-space(./AAFB)), 'n.r'))))">

					<xsl:variable name="author">
						<xsl:choose>
							<xsl:when test="./AAFN">
								<xsl:value-of select="./AAFN" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="./AAFB" />
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
        	<xsl:value-of
							select="concat($NS, 'AlternativeAuthorshipAttribution/', $itemURI, '-', position())" />
        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
            	<xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/AlternativeAuthorshipAttribution'" />
			</xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Attribuzione superata, alternativa o tradizionale di autore del bene: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Attribuzione superata, alternativa o tradizionale di autore del bene: ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Alternative authorship attribution of cultural property: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Alternative authorship attribution of cultural property: ', $itemURI)" />
						</l0:name>
						<arco-cd:isAuthorshipAttributionOf>
							<xsl:attribute name="rdf:resource"> 
							<xsl:value-of
								select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
						</xsl:attribute>
						</arco-cd:isAuthorshipAttributionOf>

						<arco-cd:hasAttributedAuthor>
							<xsl:attribute name="rdf:resource">
        	                	<xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy($author))" />
            	            </xsl:attribute>
						</arco-cd:hasAttributedAuthor>

						<xsl:if
							test="./AAFM and (not(starts-with(lower-case(normalize-space(./AAFM)), 'nr')) and not(starts-with(lower-case(normalize-space(./AAFM)), 'n.r')))">
							<arco-cd:hasInterpretationCriterion>
								<xsl:attribute name="rdf:resource">
								<xsl:value-of
									select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./AAFM)))" />
                            </xsl:attribute>
							</arco-cd:hasInterpretationCriterion>
						</xsl:if>
					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                        <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy($author))" />
                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Agent'" />
                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:choose>
								<xsl:when test="normalize-space(./AAFN)">
									<xsl:value-of
										select="arco-fn:name-cleaner(./AAFN)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:call-template name="CamelCase">
										<xsl:with-param name="text"
											select="normalize-space(./AAFB)" />
									</xsl:call-template>
								</xsl:otherwise>
							</xsl:choose>
						</rdfs:label>
						<l0:name>
							<xsl:choose>
								<xsl:when test="normalize-space(./AAFN)">
									<xsl:value-of
										select="arco-fn:name-cleaner(./AAFN)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:call-template name="CamelCase">
										<xsl:with-param name="text"
											select="normalize-space(./AAFB)" />
									</xsl:call-template>
								</xsl:otherwise>
							</xsl:choose>
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<xsl:if
					test="./AAFM and (not(starts-with(lower-case(normalize-space(./AAFM)), 'nr')) and not(starts-with(lower-case(normalize-space(./AAFM)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                       	 	<xsl:value-of
							select="concat($NS, 'InterpretationCriterion/', arco-fn:urify(normalize-space(./AAFM)))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/InterpretationCriterion'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./AAFM)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./AAFM)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>



			<!-- xsl:if test="record/metadata/schede/*/AU/ATB/ATBD"> <rdf:Description> 
				<xsl:attribute name="rdf:about"> <xsl:value-of select="concat($NS, 'CulturalScope/', 
				arco-fn:urify(normalize-space(record/metadata/schede/*/AU/ATB/ATBD)))" /> 
				</xsl:attribute> <rdf:type> <xsl:attribute name="rdf:resource"> <xsl:value-of 
				select="'https://w3id.org/arco/culturaldefinition/CulturalScope'" /> </xsl:attribute> 
				</rdf:type> <rdfs:label> <xsl:value-of select="normalize-space(record/metadata/schede/*/AU/ATB/ATBD)" 
				/> </rdfs:label> </rdf:Description> </xsl:if> <xsl:if test="record/metadata/schede/*/AU/ATB/ATBR"> 
				<rdf:Description> <xsl:attribute name="rdf:about"> <xsl:value-of select="concat($NS, 
				'Role/', arco-fn:urify(normalize-space(record/metadata/schede/*/AU/ATB/ATBR)))" 
				/> </xsl:attribute> <rdf:type> <xsl:attribute name="rdf:resource"> <xsl:value-of 
				select="'https://w3id.org/italia/onto/RO/Role'" /> </xsl:attribute> </rdf:type> 
				<rdfs:label> <xsl:value-of select="normalize-space(record/metadata/schede/*/AU/ATB/ATBR)" 
				/> </rdfs:label> </rdf:Description> </xsl:if> <xsl:if test="record/metadata/schede/*/AU/ATB/ATBM"> 
				<rdf:Description> <xsl:attribute name="rdf:about"> <xsl:value-of select="concat($NS, 
				'InterpretationCriterion/', arco-fn:urify(normalize-space(record/metadata/schede/*/AU/ATB/ATBM)))" 
				/> </xsl:attribute> <rdf:type> <xsl:attribute name="rdf:resource"> <xsl:value-of 
				select="'https://w3id.org/arco/culturaldefinition/Source'" /> </xsl:attribute> 
				</rdf:type> <rdfs:label> <xsl:value-of select="normalize-space(record/metadata/schede/*/AU/ATB/ATBM)" 
				/> </rdfs:label> </rdf:Description> </xsl:if -->
			<!-- member of collection -->
			<!-- intervention (CO/RST) -->
			<xsl:for-each select="record/metadata/schede/*/CO/RST">
				<rdf:Description>
					<xsl:choose>
						<xsl:when
							test="contains(normalize-space(lower-case(./RSTI)), 'consolidamento') or contains(normalize-space(lower-case(./RSTI)), 'controllo microclimatico') or contains(normalize-space(lower-case(./RSTI)), 'trattamento biocida-disinfestazione') or contains(normalize-space(lower-case(./RSTI)), 'rimozione di elementi non originali') or contains(normalize-space(lower-case(./RSTI)), 'pulitura meccanica') or contains(normalize-space(lower-case(./RSTI)), 'pulitura chimica') or contains(normalize-space(lower-case(./RSTI)), 'protezione finale') or contains(normalize-space(lower-case(./RSTI)), 'riadesione parti') or contains(normalize-space(lower-case(./RSTI)), 'trattamento parti metalliche')">
							<xsl:attribute name="rdf:about">
									<xsl:value-of
								select="concat($NS, 'ConservationIntervention/', $itemURI, '-conservation-intervention-', position())" />
								</xsl:attribute>
						</xsl:when>
						<xsl:otherwise>
							<xsl:attribute name="rdf:about">
									<xsl:value-of
								select="concat($NS, 'Intervention/', $itemURI, '-intervention-', position())" />
								</xsl:attribute>
						</xsl:otherwise>
					</xsl:choose>
					<rdf:type>
						<xsl:choose>
							<xsl:when
								test="contains(normalize-space(lower-case(./RSTI)), 'consolidamento') or contains(normalize-space(lower-case(./RSTI)), 'controllo microclimatico') or contains(normalize-space(lower-case(./RSTI)), 'trattamento biocida-disinfestazione') or contains(normalize-space(lower-case(./RSTI)), 'rimozione di elementi non originali') or contains(normalize-space(lower-case(./RSTI)), 'pulitura meccanica') or contains(normalize-space(lower-case(./RSTI)), 'pulitura chimica') or contains(normalize-space(lower-case(./RSTI)), 'protezione finale') or contains(normalize-space(lower-case(./RSTI)), 'riadesione parti') or contains(normalize-space(lower-case(./RSTI)), 'trattamento parti metalliche')">
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/ConservationIntervention'" />
								</xsl:attribute>
							</xsl:when>
							<xsl:otherwise>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/Intervention'" />
								</xsl:attribute>
							</xsl:otherwise>
						</xsl:choose>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:choose>
							<xsl:when
								test="contains(normalize-space(lower-case(./RSTI)), 'consolidamento') or contains(normalize-space(lower-case(./RSTI)), 'controllo microclimatico') or contains(normalize-space(lower-case(./RSTI)), 'trattamento biocida-disinfestazione') or contains(normalize-space(lower-case(./RSTI)), 'rimozione di elementi non originali') or contains(normalize-space(lower-case(./RSTI)), 'pulitura meccanica') or contains(normalize-space(lower-case(./RSTI)), 'pulitura chimica') or contains(normalize-space(lower-case(./RSTI)), 'protezione finale') or contains(normalize-space(lower-case(./RSTI)), 'riadesione parti') or contains(normalize-space(lower-case(./RSTI)), 'trattamento parti metalliche')">
								<xsl:value-of
									select="concat('Intervention ', position(), ' on cultural property ', $itemURI, ': conservation intervention')" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of
									select="concat('Intervention ', position(), ' on cultural property ', $itemURI)" />
							</xsl:otherwise>
						</xsl:choose>
					</rdfs:label>
					<rdfs:label xml:lang="it">
						<xsl:choose>
							<xsl:when
								test="contains(normalize-space(lower-case(./RSTI)), 'consolidamento') or contains(normalize-space(lower-case(./RSTI)), 'controllo microclimatico') or contains(normalize-space(lower-case(./RSTI)), 'trattamento biocida-disinfestazione') or contains(normalize-space(lower-case(./RSTI)), 'rimozione di elementi non originali') or contains(normalize-space(lower-case(./RSTI)), 'pulitura meccanica') or contains(normalize-space(lower-case(./RSTI)), 'pulitura chimica') or contains(normalize-space(lower-case(./RSTI)), 'protezione finale') or contains(normalize-space(lower-case(./RSTI)), 'riadesione parti') or contains(normalize-space(lower-case(./RSTI)), 'trattamento parti metalliche')">
								<xsl:value-of
									select="concat('Intervento ', position(), ' sul bene culturale ', $itemURI, ': intervento conservativo')" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of
									select="concat('Intervento ', position(), ' sul bene culturale ', $itemURI)" />
							</xsl:otherwise>
						</xsl:choose>
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:choose>
							<xsl:when
								test="contains(normalize-space(lower-case(./RSTI)), 'consolidamento') or contains(normalize-space(lower-case(./RSTI)), 'controllo microclimatico') or contains(normalize-space(lower-case(./RSTI)), 'trattamento biocida-disinfestazione') or contains(normalize-space(lower-case(./RSTI)), 'rimozione di elementi non originali') or contains(normalize-space(lower-case(./RSTI)), 'pulitura meccanica') or contains(normalize-space(lower-case(./RSTI)), 'pulitura chimica') or contains(normalize-space(lower-case(./RSTI)), 'protezione finale') or contains(normalize-space(lower-case(./RSTI)), 'riadesione parti') or contains(normalize-space(lower-case(./RSTI)), 'trattamento parti metalliche')">
								<xsl:value-of
									select="concat('Intervention ', position(), ' on cultural property ', $itemURI, ': conservation intervention')" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of
									select="concat('Intervention ', position(), ' on cultural property ', $itemURI)" />
							</xsl:otherwise>
						</xsl:choose>
					</l0:name>
					<l0:name xml:lang="it">
						<xsl:choose>
							<xsl:when
								test="contains(normalize-space(lower-case(./RSTI)), 'consolidamento') or contains(normalize-space(lower-case(./RSTI)), 'controllo microclimatico') or contains(normalize-space(lower-case(./RSTI)), 'trattamento biocida-disinfestazione') or contains(normalize-space(lower-case(./RSTI)), 'rimozione di elementi non originali') or contains(normalize-space(lower-case(./RSTI)), 'pulitura meccanica') or contains(normalize-space(lower-case(./RSTI)), 'pulitura chimica') or contains(normalize-space(lower-case(./RSTI)), 'protezione finale') or contains(normalize-space(lower-case(./RSTI)), 'riadesione parti') or contains(normalize-space(lower-case(./RSTI)), 'trattamento parti metalliche')">
								<xsl:value-of
									select="concat('Intervento ', position(), ' sul bene culturale ', $itemURI, ': intervento conservativo')" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of
									select="concat('Intervento ', position(), ' sul bene culturale ', $itemURI)" />
							</xsl:otherwise>
						</xsl:choose>
					</l0:name>
					<xsl:if test="./RSTO">
						<arco-core:note>
							<xsl:value-of select="normalize-space(./RSTO)" />
						</arco-core:note>
					</xsl:if>
					<xsl:if test="./RSTD">
						<tiapit:atTime>
							<xsl:attribute name="rdf:resource">
                               	<xsl:value-of
								select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./RSTD)))" />
                           	</xsl:attribute>
						</tiapit:atTime>
					</xsl:if>
					<xsl:if
						test="./RSTI and (not(starts-with(lower-case(normalize-space(./RSTI)), 'nr')) and not(starts-with(lower-case(normalize-space(./RSTI)), 'n.r')))">
						<arco-cd:hasInterventionType>
							<xsl:attribute name="rdf:resource">
								<xsl:value-of
								select="concat($NS, 'InterventionType/', arco-fn:urify(normalize-space(./RSTI)))" />
							</xsl:attribute>
						</arco-cd:hasInterventionType>
					</xsl:if>
					<xsl:for-each select="./RSTE">
						<xsl:if test=".">
							<arco-cd:hasActivityResponsible>
								<xsl:attribute name="rdf:resource">
		                				<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
		                			</xsl:attribute>
							</arco-cd:hasActivityResponsible>
						</xsl:if>
					</xsl:for-each>
					<xsl:for-each select="./RSTR">
						<xsl:if test=".">
							<arco-cd:hasActivitySponsor>
								<xsl:attribute name="rdf:resource">
		                				<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
		                			</xsl:attribute>
							</arco-cd:hasActivitySponsor>
						</xsl:if>
					</xsl:for-each>
					<xsl:for-each select="./RSTN">
						<xsl:if test=".">
							<arco-cd:hasActivityOperator>
								<xsl:attribute name="rdf:resource">
		                				<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
		                			</xsl:attribute>
							</arco-cd:hasActivityOperator>
						</xsl:if>
					</xsl:for-each>
				</rdf:Description>
				<!-- intervention type as an individual -->
				<xsl:if
					test="./RSTI and (not(starts-with(lower-case(normalize-space(./RSTI)), 'nr')) and not(starts-with(lower-case(normalize-space(./RSTI)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
	                                <xsl:value-of
							select="concat($NS, 'InterventionType/', arco-fn:urify(normalize-space(./RSTI)))" />
	                            </xsl:attribute>
						<rdf:type
							rdf:resource="https://w3id.org/arco/ontology/context-description/InterventionType" />
						<rdfs:label>
							<xsl:value-of select="normalize-space(./RSTI)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./RSTI)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- Time Interval for intervention as an individual -->
				<xsl:if test="./RSTD">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
		                        <xsl:value-of
							select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./RSTD)))" />
		                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
								select="'https://w3id.org/italia/onto/TI/TimeInterval'" />
		                        </xsl:attribute>
						</rdf:type>
						<tiapit:time>
							<xsl:value-of select="normalize-space(./RSTD)" />
						</tiapit:time>
					</rdf:Description>
				</xsl:if>
				<!-- activiy responsible as an individual -->
				<xsl:for-each select="./RSTE">
					<xsl:if test=".">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
							                        <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
							                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
							                            <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
							            </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="arco-fn:name-cleaner(.)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="arco-fn:name-cleaner(.)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
				<!-- activiy sponsor as an individual -->
				<xsl:for-each select="./RSTR">
					<xsl:if test=".">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
							                        <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
							                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
							                            <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
							            </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:call-template name="CamelCase">
									<xsl:with-param name="text"
										select="normalize-space(.)" />
								</xsl:call-template>
							</rdfs:label>
							<l0:name>
								<xsl:call-template name="CamelCase">
									<xsl:with-param name="text"
										select="normalize-space(.)" />
								</xsl:call-template>
							</l0:name>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
				<!-- activiy operator as an individual -->
				<xsl:for-each select="./RSTN">
					<xsl:if test=".">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
							                        <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
							                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
							                            <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
							            </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:call-template name="CamelCase">
									<xsl:with-param name="text"
										select="normalize-space(.)" />
								</xsl:call-template>
							</rdfs:label>
							<l0:name>
								<xsl:call-template name="CamelCase">
									<xsl:with-param name="text"
										select="normalize-space(.)" />
								</xsl:call-template>
							</l0:name>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:for-each>
			<!-- intervention (RS/RST) -->
			<xsl:for-each select="record/metadata/schede/*/RS/RST">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
							<xsl:value-of
						select="concat($NS, 'ConservationIntervention/', $itemURI, '-conservation-intervention-', position())" />
						</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
							<xsl:value-of
							select="'https://w3id.org/arco/ontology/context-description/ConservationIntervention'" />
						</xsl:attribute>
					</rdf:type>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Conservation intervention ', position(), ' on cultural property ', $itemURI)" />
					</rdfs:label>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Intervento conservativo ', position(), ' sul bene culturale ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Conservation intervention ', position(), ' on cultural property ', $itemURI)" />
					</l0:name>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Intervento conservativo ', position(), ' sul bene culturale ', $itemURI)" />
					</l0:name>
					<xsl:if test="./RSTO">
						<arco-core:note>
							<xsl:value-of select="normalize-space(./RSTO)" />
						</arco-core:note>
					</xsl:if>
					<xsl:if test="./RSTS">
						<arco-cd:framework>
							<xsl:value-of select="normalize-space(./RSTS)" />
						</arco-cd:framework>
					</xsl:if>
					<xsl:if test="./RSTT">
						<arco-core:description>
							<xsl:value-of select="normalize-space(./RSTT)" />
						</arco-core:description>
					</xsl:if>
					<xsl:if test="./RSTD">
						<tiapit:atTime>
							<xsl:attribute name="rdf:resource">
                               	<xsl:value-of
								select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./RSTD)))" />
                           	</xsl:attribute>
						</tiapit:atTime>
					</xsl:if>
					<xsl:if
						test="./RSTI or ./RSTF and (not(starts-with(lower-case(normalize-space(./RSTI)), 'nr')) and not(starts-with(lower-case(normalize-space(./RSTI)), 'n.r')) and not(starts-with(lower-case(normalize-space(./RSTF)), 'nr')) and not(starts-with(lower-case(normalize-space(./RSTF)), 'n.r')))">
						<tiapit:atTime>
							<xsl:attribute name="rdf:resource">
                        		<xsl:choose>
                        			<xsl:when test="./RSTI and ./RSTF">
                        				<xsl:value-of
								select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./RSTI)), '-', arco-fn:urify(normalize-space(./RSTF)))" />
                        			</xsl:when>
                        			<xsl:when test="./RSTI">
                        				<xsl:value-of
								select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./RSTI)))" />
                        			</xsl:when>
                        			<xsl:when test="./RSTF">
                        				<xsl:value-of
								select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./RSTF)))" />
                        			</xsl:when>
                        			</xsl:choose>
                        		</xsl:attribute>
						</tiapit:atTime>
					</xsl:if>
					<xsl:for-each select="./RSTE">
						<xsl:if test=".">
							<arco-cd:hasActivityResponsible>
								<xsl:attribute name="rdf:resource">
		                				<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
		                			</xsl:attribute>
							</arco-cd:hasActivityResponsible>
						</xsl:if>
					</xsl:for-each>
					<xsl:for-each select="./RSTR">
						<xsl:if test=". and not($sheetType='A')">
							<arco-cd:hasActivitySponsor>
								<xsl:attribute name="rdf:resource">
		                				<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
		                			</xsl:attribute>
							</arco-cd:hasActivitySponsor>
						</xsl:if>
					</xsl:for-each>
					<xsl:for-each select="./RSTN">
						<xsl:if test=".">
							<arco-cd:hasActivityOperator>
								<xsl:attribute name="rdf:resource">
		                				<xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
		                			</xsl:attribute>
							</arco-cd:hasActivityOperator>
						</xsl:if>
					</xsl:for-each>
				</rdf:Description>

				<!-- Time Interval for intervention as an individual -->
				<xsl:if test="./RSTD">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
		                        <xsl:value-of
							select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./RSTD)))" />
		                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
								select="'https://w3id.org/italia/onto/TI/TimeInterval'" />
		                        </xsl:attribute>
						</rdf:type>
						<tiapit:time>
							<xsl:value-of select="normalize-space(./RSTD)" />
						</tiapit:time>
					</rdf:Description>
				</xsl:if>
				<!-- time interval for intervention as an individual -->
				<xsl:if
					test="./RSTI or ./RSTF and (not(starts-with(lower-case(normalize-space(./RSTI)), 'nr')) and not(starts-with(lower-case(normalize-space(./RSTI)), 'n.r')) and not(starts-with(lower-case(normalize-space(./RSTF)), 'nr')) and not(starts-with(lower-case(normalize-space(./RSTF)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                        <xsl:choose>
                        	<xsl:when test="./RSTI and ./RSTF">
                        		<xsl:value-of
							select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./RSTI)), '-', arco-fn:urify(normalize-space(./RSTF)))" />
                        	</xsl:when>
                        	<xsl:when test="./RSTI">
                        		<xsl:value-of
							select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./RSTI)))" />
                        	</xsl:when>
                        	<xsl:when test="./RSTF">
                        		<xsl:value-of
							select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./RSTF)))" />
                        	</xsl:when>
                        	</xsl:choose>
                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="'https://w3id.org/italia/onto/TI/TimeInterval'" />
                        </xsl:attribute>
						</rdf:type>
						<arco-arco:startTime>
							<xsl:value-of select="normalize-space(./RSTI)" />
						</arco-arco:startTime>
						<arco-arco:endTime>
							<xsl:value-of select="normalize-space(./RSTF)" />
						</arco-arco:endTime>
					</rdf:Description>
				</xsl:if>
				<!-- activiy responsible as an individual -->
				<xsl:if test="./RSTE">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
						                        <xsl:value-of
							select="concat($NS, 'Agent/', arco-fn:arcofy(./RSTE))" />
						                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
						                            <xsl:value-of
								select="'https://w3id.org/italia/onto/l0/Agent'" />
						            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="arco-fn:name-cleaner(./RSTE)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="arco-fn:name-cleaner(./RSTE)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- activiy sponsor as an individual -->
				<xsl:for-each select="./RSTR">
					<xsl:if test=". and not($sheetType='A')">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
							                        <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
							                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
							                            <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
							            </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:call-template name="CamelCase">
									<xsl:with-param name="text"
										select="normalize-space(.)" />
								</xsl:call-template>
							</rdfs:label>
							<l0:name>
								<xsl:call-template name="CamelCase">
									<xsl:with-param name="text"
										select="normalize-space(.)" />
								</xsl:call-template>
							</l0:name>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
				<!-- activiy operator as an individual -->
				<xsl:for-each select="./RSTN">
					<xsl:if test=".">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
							                        <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
							                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
							                            <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
							            </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:call-template name="CamelCase">
									<xsl:with-param name="text"
										select="normalize-space(.)" />
								</xsl:call-template>
							</rdfs:label>
							<l0:name>
								<xsl:call-template name="CamelCase">
									<xsl:with-param name="text"
										select="normalize-space(.)" />
								</xsl:call-template>
							</l0:name>
						</rdf:Description>
					</xsl:if>
				</xsl:for-each>
			</xsl:for-each>
			<!-- collection membership -->
			<xsl:for-each select="record/metadata/schede/*/UB/COL">
				<xsl:if test="./*">
					<xsl:variable name="collection-membership-position">
						<xsl:value-of select="position()" />
					</xsl:variable>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:value-of
							select="concat($NS, 'CollectionMembership/', $itemURI, '-collection-membership-', position())" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/CollectionMembership'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Appartenenza a collezione ', position(), ' del bene: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Appartenenza a collezione ', position(), ' del bene: ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Collection membership ', position(), ' of cultural property: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Collection membership ', position(), ' of cultural property: ', $itemURI)" />
						</l0:name>
						<arco-cd:hasMemberOfCollection>
							<xsl:attribute name="rdf:resource">
                        		<xsl:value-of
								select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
                        	</xsl:attribute>
						</arco-cd:hasMemberOfCollection>
						<arco-cd:hasCollection>
							<xsl:attribute name="rdf:resource">
								<xsl:choose>
									<xsl:when test="./COLD and (not(starts-with(lower-case(normalize-space(./COLD)), 'nr')) and not(starts-with(lower-case(normalize-space(./COLD)), 'n.r')))">
										<xsl:value-of select="concat($NS, 'CollectionCulEnt/', arco-fn:urify(normalize-space(./COLD)))" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="concat($NS, 'CollectionCulEnt/', $itemURI, '-', $collection-membership-position)" />
									</xsl:otherwise>
								</xsl:choose>
                        	</xsl:attribute>
						</arco-cd:hasCollection>
						<xsl:if test="./COLM and (not(starts-with(lower-case(normalize-space(./COLM)), 'nr')) and not(starts-with(lower-case(normalize-space(./COLM)), 'n.r')))">
							<arco-cd:collectionLeavingReason>
								<xsl:value-of select="normalize-space(./COLM)" />
							</arco-cd:collectionLeavingReason>
						</xsl:if>
						<xsl:if test="./COLI and (not(starts-with(lower-case(normalize-space(./COLI)), 'nr')) and not(starts-with(lower-case(normalize-space(./COLI)), 'n.r')))">
							<arco-cd:collectionUnitIdentifier>
								<xsl:value-of select="normalize-space(./COLI)" />
							</arco-cd:collectionUnitIdentifier>
						</xsl:if>
						<xsl:if test="./COLV and (not(starts-with(lower-case(normalize-space(./COLV)), 'nr')) and not(starts-with(lower-case(normalize-space(./COLV)), 'n.r')))">
							<arco-cd:estimatedCulturalPropertyValue>
								<xsl:value-of select="normalize-space(./COLV)" />
							</arco-cd:estimatedCulturalPropertyValue>
						</xsl:if>
						<xsl:if test="./COLU or ./COLA and (not(starts-with(lower-case(normalize-space(./COLU)), 'nr')) and not(starts-with(lower-case(normalize-space(./COLU)), 'n.r')) and not(starts-with(lower-case(normalize-space(./COLA)), 'nr')) and not(starts-with(lower-case(normalize-space(./COLA)), 'n.r')))">
							<tiapit:atTime>
								<xsl:attribute name="rdf:resource">
                        		<xsl:choose>
                        			<xsl:when test="./COLU and ./COLA">
                        				<xsl:value-of select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./COLA)), '-', arco-fn:urify(normalize-space(./COLU)))" />
                        			</xsl:when>
                        			<xsl:when test="./COLU">
                        				<xsl:value-of select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./COLU)))" />
                        			</xsl:when>
                        			<xsl:when test="./COLA">
                        				<xsl:value-of select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./COLA)))" />
                        			</xsl:when>
                        			</xsl:choose>
                        		</xsl:attribute>
							</tiapit:atTime>
						</xsl:if>
					</rdf:Description>
					<!-- time interval of member of collection -->
					<xsl:if test="./COLU or ./COLA and (not(starts-with(lower-case(normalize-space(./COLU)), 'nr')) and not(starts-with(lower-case(normalize-space(./COLU)), 'n.r')) and not(starts-with(lower-case(normalize-space(./COLA)), 'nr')) and not(starts-with(lower-case(normalize-space(./COLA)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                        <xsl:choose>
                        	<xsl:when test="./COLU and ./COLA">
                        		<xsl:value-of select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./COLA)), '-', arco-fn:urify(normalize-space(./COLU)))" />
                        	</xsl:when>
                        	<xsl:when test="./COLU">
                        		<xsl:value-of select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./COLU)))" />
                        	</xsl:when>
                        	<xsl:when test="./COLA">
                        		<xsl:value-of select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./COLA)))" />
                        	</xsl:when>
                        </xsl:choose>
                    </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                            <xsl:value-of select="'https://w3id.org/italia/onto/TI/TimeInterval'" />
                        </xsl:attribute>
							</rdf:type>
							<arco-arco:startTime>
								<xsl:value-of select="normalize-space(./COLA)" />
							</arco-arco:startTime>
							<arco-arco:endTime>
								<xsl:value-of select="normalize-space(./COLU)" />
							</arco-arco:endTime>
						</rdf:Description>
					</xsl:if>
					<!-- collection of cultural entities -->
					<rdf:Description>
						<xsl:attribute name="rdf:about">
						<xsl:choose>
									<xsl:when
							test="./COLD and (not(starts-with(lower-case(normalize-space(./COLD)), 'nr')) and not(starts-with(lower-case(normalize-space(./COLD)), 'n.r')))">
										<xsl:value-of
							select="concat($NS, 'CollectionCulEnt/', arco-fn:urify(normalize-space(./COLD)))" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of
							select="concat($NS, 'CollectionCulEnt/', $itemURI, '-', $collection-membership-position)" />
									</xsl:otherwise>
						</xsl:choose>
                	</xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                            <xsl:value-of
								select="'http://dati.beniculturali.it/cis/CollectionCulEnt'" />
                        </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:choose>
								<xsl:when
									test="./COLD and (not(starts-with(lower-case(normalize-space(./COLD)), 'nr')) and not(starts-with(lower-case(normalize-space(./COLD)), 'n.r')))">
									<xsl:value-of select="normalize-space(./COLD)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat('Collezione contenente il bene: ', $itemURI)" />
								</xsl:otherwise>
							</xsl:choose>
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:choose>
								<xsl:when
									test="./COLD and (not(starts-with(lower-case(normalize-space(./COLD)), 'nr')) and not(starts-with(lower-case(normalize-space(./COLD)), 'n.r')))">
									<xsl:value-of select="normalize-space(./COLD)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat('Collezione contenente il bene: ', $itemURI)" />
								</xsl:otherwise>
							</xsl:choose>
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:choose>
								<xsl:when
									test="./COLD and (not(starts-with(lower-case(normalize-space(./COLD)), 'nr')) and not(starts-with(lower-case(normalize-space(./COLD)), 'n.r')))">
									<xsl:value-of select="normalize-space(./COLD)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat('Collection with cultural property: ', $itemURI)" />
								</xsl:otherwise>
							</xsl:choose>
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:choose>
								<xsl:when
									test="./COLD and (not(starts-with(lower-case(normalize-space(./COLD)), 'nr')) and not(starts-with(lower-case(normalize-space(./COLD)), 'n.r')))">
									<xsl:value-of select="normalize-space(./COLD)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat('Collection with cultural property: ', $itemURI)" />
								</xsl:otherwise>
							</xsl:choose>
						</l0:name>
						<arco-cd:isCollectionIn>
							<xsl:attribute name="rdf:resource">
                    		<xsl:value-of
								select="concat($NS, 'CollectionMembership/', $itemURI, '-collection-membership-', position())" />
                    	</xsl:attribute>
						</arco-cd:isCollectionIn>
						<xsl:if test="./COLS">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./COLS)" />
							</arco-core:note>
						</xsl:if>
						<xsl:if test="$sheetVersion='4.00' or $sheetVersion='4.00_ICCD0'">
							<xsl:if test="./COLN">
								<arco-cd:hasCollector>
									<xsl:attribute name="rdf:resource">
                    					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./COLN))" />
	                    			</xsl:attribute>
								</arco-cd:hasCollector>
							</xsl:if>
						</xsl:if>
						<xsl:if test="not($sheetVersion='4.00' or $sheetVersion='4.00_ICCD0')">
							<xsl:if test="./COLC">
								<arco-cd:hasCollector>
									<xsl:attribute name="rdf:resource">
                    					<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./COLC))" />
	                    			</xsl:attribute>
								</arco-cd:hasCollector>
							</xsl:if>
							<xsl:if test="./COLN">
								<arco-core:note>
                    					<xsl:value-of select="normalize-space(./COLN)" />
								</arco-core:note>
							</xsl:if>
						</xsl:if>
					</rdf:Description>
					<!-- collector of collection of cultural entities -->
					<xsl:if test="$sheetVersion='4.00' or $sheetVersion='4.00_ICCD0'">
					<xsl:if test="./COLN">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                    			<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./COLN))" />
                    		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
                            </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./COLN)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./COLN)" />
							</l0:name>
							<arco-cd:isCollectorOf>
								<xsl:attribute name="rdf:resource">
								<xsl:choose>
									<xsl:when test="./COLD">
										<xsl:value-of select="concat($NS, 'CollectionCulEnt/', arco-fn:urify(normalize-space(./COLD)))" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="concat($NS, 'CollectionCulEnt/', $itemURI, '-', $collection-membership-position)" />
									</xsl:otherwise>
								</xsl:choose>
								</xsl:attribute>
							</arco-cd:isCollectorOf>
						</rdf:Description>
					</xsl:if>
					</xsl:if>
					<xsl:if test="not($sheetVersion='4.00' or $sheetVersion='4.00_ICCD0')">
					<xsl:if test="./COLC">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                				<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./COLC))" />
                    		</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of select="'https://w3id.org/italia/onto/l0/Agent'" />
                            </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./COLC)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./COLC)" />
							</l0:name>
							<arco-cd:isCollectorOf>
								<xsl:attribute name="rdf:resource">
								<xsl:choose>
									<xsl:when test="./COLD">
										<xsl:value-of select="concat($NS, 'CollectionCulEnt/', arco-fn:urify(normalize-space(./COLD)))" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="concat($NS, 'CollectionCulEnt/', $itemURI, '-', $collection-membership-position)" />
									</xsl:otherwise>
								</xsl:choose>
								</xsl:attribute>
							</arco-cd:isCollectorOf>
						</rdf:Description>
					</xsl:if>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<!-- conservation status -->
			<xsl:for-each select="record/metadata/schede/*/CO/STC">
				<xsl:if test="./*">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:value-of
							select="concat($NS, 'ConservationStatus/', $itemURI, '-conservation-status-', position())" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/arco/ontology/denotative-description/ConservationStatus'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Stato di conservazione ', position(), ' del bene: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Stato di conservazione ', position(), ' del bene: ', $itemURI)" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Conservation status ', position(), ' of cultural property: ', $itemURI)" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Conservation status ', position(), ' of cultural property: ', $itemURI)" />
						</l0:name>
						<xsl:if
							test="./STCC and not(lower-case(normalize-space(./STCC))='nr' or lower-case(normalize-space(./STCC))='n.r.' or lower-case(normalize-space(./STCC))='nr (recupero pregresso)')">
							<arco-dd:hasConservationStatusType>
								<xsl:attribute name="rdf:resource">
                                <xsl:choose>
                                    <xsl:when test="lower-case(normalize-space(./STCC))='ottimo' or lower-case(normalize-space(./STCC))='ottima' or lower-case(normalize-space(./STCC))='eccellente'">
										<xsl:value-of select="'https://w3id.org/arco/ontology/denotative-description/ExcellentConservationStatus'" />
									</xsl:when>
                                    <xsl:when test="lower-case(normalize-space(./STCC))='buono' or lower-case(normalize-space(./STCC))='buonoe' or lower-case(normalize-space(./STCC))='buona'">
                                        <xsl:value-of select="'https://w3id.org/arco/ontology/denotative-description/GoodConservationStatus'" />
                                    </xsl:when>
                                    <xsl:when test="lower-case(normalize-space(./STCC))='mediocre'">
                                        <xsl:value-of select="'https://w3id.org/arco/ontology/denotative-description/MediocreConservationStatus'" />
                                    </xsl:when>
                                    <xsl:when test="lower-case(normalize-space(./STCC))='discreto' or lower-case(normalize-space(./STCC))='discreta' or lower-case(normalize-space(./STCC))='sufficiente'">
                                        <xsl:value-of select="'https://w3id.org/arco/ontology/denotative-description/DecentConservationStatus'" />
                                    </xsl:when>
                                    <xsl:when test="lower-case(normalize-space(./STCC))='cattivo' or lower-case(normalize-space(./STCC))='cattiva'">
                                        <xsl:value-of select="'https://w3id.org/arco/ontology/denotative-description/BadConservationStatus'" />
                                    </xsl:when>
                                    <xsl:when test="lower-case(normalize-space(./STCC))='pessimo' or lower-case(normalize-space(./STCC))='pessima' or lower-case(normalize-space(./STCC))='pessomo' or lower-case(normalize-space(./STCC))='immediato pericolo'">
                                    	<xsl:value-of select="'https://w3id.org/arco/ontology/denotative-description/VeryBadConservationStatus'" />
                                    </xsl:when>
                                    <xsl:when test="lower-case(normalize-space(./STCC))='dato non disponibile'">
                                        <xsl:value-of select="'https://w3id.org/arco/ontology/denotative-description/UnavailableConservationStatus'" />
                                    </xsl:when>
                                    <xsl:when test="./STCC">
                                        <xsl:value-of select="concat($NS, 'ConservationStatusType/', arco-fn:urify(normalize-space(./STCC)))" />
                                    </xsl:when>
                                </xsl:choose>
                            </xsl:attribute>
							</arco-dd:hasConservationStatusType>
						</xsl:if>
						<xsl:if
							test="./STCL and not(lower-case(normalize-space(./STCL))='nr' or lower-case(normalize-space(./STCL))='n.r.' or lower-case(normalize-space(./STCL))='nr (recupero pregresso)')">
							<arco-dd:hasLegibility>
								<xsl:attribute name="rdf:resource">
                                <xsl:choose>
                                    <xsl:when
									test="lower-case(normalize-space(./STCL))='buono' or lower-case(normalize-space(./STCL))='buona'">
                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/GoodLegibility'" />
                                    </xsl:when>
                                    <xsl:when
									test="lower-case(normalize-space(./STCL))='totale'">
                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/CompleteLegibility'" />
                                    </xsl:when>
                                    <xsl:when
									test="lower-case(normalize-space(./STCL))='discreto' or lower-case(normalize-space(./STCL))='discreta'">
                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/DecentLegibility'" />
                                    </xsl:when>
                                    <xsl:when
									test="lower-case(normalize-space(./STCL))='ridotto' or lower-case(normalize-space(./STCL))='ridotta'">
                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/LoweredLegibility'" />
                                    </xsl:when>
                                    <xsl:when
									test="lower-case(normalize-space(./STCL))='assente'">
                                        <xsl:value-of
									select="'https://w3id.org/arco/ontology/denotative-description/ImpossibleLegibility'" />
                                    </xsl:when>
                                    <xsl:when test="./STCL">
                                        <xsl:value-of
									select="concat($NS, 'Legibility/', arco-fn:urify(normalize-space(./STCL)))" />
                                    </xsl:when>
                                </xsl:choose>
                            </xsl:attribute>
							</arco-dd:hasLegibility>
						</xsl:if>
						<xsl:if test="./STCS">
							<arco-core:specifications>
								<xsl:value-of select="normalize-space(./STCS)" />
							</arco-core:specifications>
						</xsl:if>
						<xsl:if test="./STCO">
							<arco-core:specifications>
								<xsl:value-of select="normalize-space(./STCO)" />
							</arco-core:specifications>
						</xsl:if>
						<xsl:if test="./STCN">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./STCN)" />
							</arco-core:note>
						</xsl:if>
						<xsl:if test="./STCD">
							<tiapit:time>
								<xsl:value-of select="normalize-space(./STCD)" />
							</tiapit:time>
						</xsl:if>
					</rdf:Description>
					<xsl:if test="./STCC and not(lower-case(normalize-space(./STCC))='nr' or lower-case(normalize-space(./STCC))='n.r.' or lower-case(normalize-space(./STCC))='nr (recupero pregresso)')">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                               <xsl:choose>
                                    <xsl:when test="lower-case(normalize-space(./STCC))='ottimo' or lower-case(normalize-space(./STCC))='ottima' or lower-case(normalize-space(./STCC))='eccellente'">
										<xsl:value-of select="'https://w3id.org/arco/ontology/denotative-description/ExcellentConservationStatus'" />
									</xsl:when>
                                    <xsl:when test="lower-case(normalize-space(./STCC))='buono' or lower-case(normalize-space(./STCC))='buonoe' or lower-case(normalize-space(./STCC))='buona'">
                                        <xsl:value-of select="'https://w3id.org/arco/ontology/denotative-description/GoodConservationStatus'" />
                                    </xsl:when>
                                    <xsl:when test="lower-case(normalize-space(./STCC))='mediocre'">
                                        <xsl:value-of select="'https://w3id.org/arco/ontology/denotative-description/MediocreConservationStatus'" />
                                    </xsl:when>
                                    <xsl:when test="lower-case(normalize-space(./STCC))='discreto' or lower-case(normalize-space(./STCC))='discreta' or lower-case(normalize-space(./STCC))='sufficiente'">
                                        <xsl:value-of select="'https://w3id.org/arco/ontology/denotative-description/DecentConservationStatus'" />
                                    </xsl:when>
                                    <xsl:when test="lower-case(normalize-space(./STCC))='cattivo' or lower-case(normalize-space(./STCC))='cattiva'">
                                        <xsl:value-of select="'https://w3id.org/arco/ontology/denotative-description/BadConservationStatus'" />
                                    </xsl:when>
                                    <xsl:when test="lower-case(normalize-space(./STCC))='pessimo' or lower-case(normalize-space(./STCC))='pessima' or lower-case(normalize-space(./STCC))='pessomo' or lower-case(normalize-space(./STCC))='immediato pericolo'">
                                    	<xsl:value-of select="'https://w3id.org/arco/ontology/denotative-description/VeryBadConservationStatus'" />
                                    </xsl:when>
                                    <xsl:when test="lower-case(normalize-space(./STCC))='dato non disponibile'">
                                        <xsl:value-of select="'https://w3id.org/arco/ontology/denotative-description/UnavailableConservationStatus'" />
                                    </xsl:when>
                                    <xsl:when test="./STCC">
                                        <xsl:value-of select="concat($NS, 'ConservationStatusType/', arco-fn:urify(normalize-space(./STCC)))" />
                                    </xsl:when>
                               </xsl:choose>
							</xsl:attribute>
							<rdf:type rdf:resource="https://w3id.org/arco/ontology/denotative-description/ConservationStatusType" />
							<rdfs:label>
								<xsl:value-of select="normalize-space(./STCC)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of select="normalize-space(./STCC)" />
							</l0:name>
						</rdf:Description>
					</xsl:if>
					<xsl:if
						test="./STCL and not(lower-case(normalize-space(./STCL))='nr' or lower-case(normalize-space(./STCL))='n.r.' or lower-case(normalize-space(./STCL))='nr (recupero pregresso)')">
						<xsl:choose>
							<xsl:when
								test="lower-case(normalize-space(./STCL))='buono' or lower-case(normalize-space(./STCL))='buona'" />
							<xsl:when
								test="lower-case(normalize-space(./STCL))='totale'" />
							<xsl:when
								test="lower-case(normalize-space(./STCL))='discreto' or lower-case(normalize-space(./STCL))='discreta'" />
							<xsl:when
								test="lower-case(normalize-space(./STCL))='ridotto' or lower-case(normalize-space(./STCL))='ridotta'" />
							<xsl:when
								test="lower-case(normalize-space(./STCL))='assente'" />
							<xsl:when test="./STCL">
								<rdf:Description>
									<xsl:attribute name="rdf:about">
                                    <xsl:value-of
										select="concat($NS, 'Legibility/', arco-fn:urify(normalize-space(./STCL)))" />
                                </xsl:attribute>
									<rdf:type
										rdf:resource="https://w3id.org/arco/ontology/denotative-description/Legibility" />
									<rdfs:label>
										<xsl:value-of select="normalize-space(./STCL)" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of select="normalize-space(./STCL)" />
									</l0:name>
								</rdf:Description>
							</xsl:when>
						</xsl:choose>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<xsl:if test="record/metadata/schede/*/OG/OGR">
				<rdf:Description>
					<xsl:choose>
						<xsl:when
							test="lower-case(normalize-space(record/metadata/schede/*/OG/OGR))='disponibile' or lower-case(normalize-space(record/metadata/schede/*/OG/OGR))='bene disponibile' or lower-case(normalize-space(record/metadata/schede/*/OG/OGR))='reale'"></xsl:when>
						<xsl:when
							test="lower-case(normalize-space(record/metadata/schede/*/OG/OGR))='bene già catalogato, non più disponibile' or lower-case(normalize-space(record/metadata/schede/*/OG/OGR))='documentata' or lower-case(normalize-space(record/metadata/schede/*/OG/OGR))='non più disponibile'"></xsl:when>
						<xsl:otherwise>

							<xsl:attribute name="rdf:about">
									<xsl:value-of
								select="concat($NS, 'CulturalPropertyAvailability/', arco-fn:urify(normalize-space(record/metadata/schede/*/OG/OGR)))" />
							</xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/denotative-description/CulturalPropertyAvailability" />
							<rdfs:label>
								<xsl:value-of
									select="normalize-space(record/metadata/schede/*/OG/OGR)" />
							</rdfs:label>
							<l0:name>
								<xsl:value-of
									select="normalize-space(record/metadata/schede/*/OG/OGR)" />
							</l0:name>

						</xsl:otherwise>
					</xsl:choose>
				</rdf:Description>
			</xsl:if>
			<xsl:if test="record/metadata/schede/*/LC/ACB">
				<rdf:Description>
					<xsl:choose>
							<xsl:when
								test="lower-case(normalize-space(record/metadata/schede/*/LC/ACB/ACBA))='si' or lower-case(normalize-space(record/metadata/schede/*/LC/ACB/ACBA))='sì'">
							</xsl:when>
							<xsl:when
								test="lower-case(normalize-space(record/metadata/schede/*/LC/ACB/ACBA))='no'">
							</xsl:when>
							<xsl:when
								test="lower-case(normalize-space(record/metadata/schede/*/LC/ACB/ACBA))='in parte'">
							</xsl:when>
							<xsl:otherwise>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of
									select="concat($NS, 'CulturalPropertyAccessibility/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/ACB/ACBA)))" />
								</xsl:attribute>							
					<rdf:type rdf:resource="https://w3id.org/arco/ontology/denotative-description/CulturalPropertyAccessibility" />
					<rdfs:label>
						<xsl:value-of select="normalize-space(record/metadata/schede/*/LC/ACB/ACBA)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of select="normalize-space(record/metadata/schede/*/LC/ACB/ACBA)" />
					</l0:name>
					<xsl:if test="record/metadata/schede/*/LC/ACB/ACBS">
						<arco-core:note>
							<xsl:value-of select="normalize-space(record/metadata/schede/*/LC/ACB/ACBS)" />
						</arco-core:note>
					</xsl:if>
					</xsl:otherwise>
						</xsl:choose>
				</rdf:Description>
			</xsl:if>
			<!-- numismatic property counterstamp -->
			<xsl:for-each select="record/metadata/schede/NU/DA/CON">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
							<xsl:value-of
						select="concat($NS, 'Counterstamp/', $itemURI, '-counterstamp')" />
						</xsl:attribute>
					<rdf:type
						rdf:resource="https://w3id.org/arco/ontology/denotative-description/Counterstamp" />
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Counterstamp of cultural property ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Counterstamp of cultural property ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Contromarca del bene culturale ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Contromarca del bene culturale ', $itemURI)" />
					</l0:name>
					<xsl:if test="./CONA or ./CONC">
						<xsl:if
							test="(not(starts-with(lower-case(normalize-space(./CONA)), 'nr')) and not(starts-with(lower-case(normalize-space(./CONA)), 'n.r')))">
							<arco-cd:hasCoinIssuance>
								<xsl:attribute name="rdf:resource">
							<xsl:value-of
									select="concat($NS, 'CoinIssuance/', $itemURI, '-counterstamp')" />
						</xsl:attribute>
							</arco-cd:hasCoinIssuance>
						</xsl:if>
					</xsl:if>
				</rdf:Description>
				<xsl:if test="./CONA or ./CONC">
					<xsl:if
						test="(not(starts-with(lower-case(normalize-space(./CONA)), 'nr')) and not(starts-with(lower-case(normalize-space(./CONA)), 'n.r')))">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
							<xsl:value-of
								select="concat($NS, 'CoinIssuance/', $itemURI, '-counterstamp')" />
						</xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
	            				<xsl:value-of
									select="'https://w3id.org/arco/ontology/context-description/CoinIssuance'" />
	            			</xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Coin issuance of counterstamp of cultural property ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Coin issuance of counterstamp of cultural property ', $itemURI)" />
							</l0:name>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Emissione di contromarca del bene culturale ', $itemURI)" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Emissione di contromarca del bene culturale ', $itemURI)" />
							</l0:name>
							<xsl:if test="./CONC">
								<tiapit:time>
									<xsl:value-of select="normalize-space(./CONC)" />
								</tiapit:time>
							</xsl:if>
							<!-- has issuer -->
							<xsl:for-each select="./CONA">
								<xsl:if
									test="(not(starts-with(lower-case(normalize-space(./CONA)), 'nr')) and not(starts-with(lower-case(normalize-space(./CONA)), 'n.r')))">
									<arco-core:hasAgentRole>
										<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
											select="concat($NS, 'AgentRole/', $itemURI, '-counterstamp-issuer-', position())" />
                        		</xsl:attribute>
									</arco-core:hasAgentRole>
									<arco-cd:hasIssuer>
										<xsl:attribute name="rdf:resource">
                            		<xsl:value-of
											select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
                        		</xsl:attribute>
									</arco-cd:hasIssuer>
								</xsl:if>
							</xsl:for-each>
						</rdf:Description>
						<xsl:for-each select="./CONA">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
		                        <xsl:value-of
									select="concat($NS, 'AgentRole/', $itemURI, '-counterstamp-issuer-', position())" />
		                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
										select="'https://w3id.org/arco/ontology/core/AgentRole'" />
		                        </xsl:attribute>
								</rdf:type>
								<rdfs:label xml:lang="it">
									<xsl:value-of
										select="concat('Soggetto emittente ', position(), ' della contromarca del bene culturale ', $itemURI, ': ', normalize-space(.))" />
								</rdfs:label>
								<rdfs:label xml:lang="en">
									<xsl:value-of
										select="concat('Issuer ', position(), ' of counterstamp of cultural property ', $itemURI, ': ', normalize-space(.))" />
								</rdfs:label>
								<l0:name xml:lang="it">
									<xsl:value-of
										select="concat('Soggetto emittente ', position(), ' della contromarca del bene culturale ', $itemURI, ': ', normalize-space(.))" />
								</l0:name>
								<l0:name xml:lang="en">
									<xsl:value-of
										select="concat('Issuer ', position(), ' of counterstamp of cultural property ', $itemURI, ': ', normalize-space(.))" />
								</l0:name>
								<arco-core:hasRole>
									<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
										select="concat($NS, 'Role/Issuer')" />
		                        </xsl:attribute>
								</arco-core:hasRole>
								<arco-core:hasAgent>
									<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
		                        </xsl:attribute>
								</arco-core:hasAgent>
							</rdf:Description>
							<rdf:Description>
								<xsl:attribute name="rdf:about">
		                        <xsl:value-of
									select="concat($NS, 'Role/Issuer')" />
		                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
										select="'https://w3id.org/italia/onto/RO/Role'" />
		                        </xsl:attribute>
								</rdf:type>
								<rdfs:label xml:lang="it">
									<xsl:value-of
										select="'Soggetto emittente di moneta'" />
								</rdfs:label>
								<rdfs:label xml:lang="en">
									<xsl:value-of select="'Coin issuer'" />
								</rdfs:label>
								<arco-core:isRoleOf>
									<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
										select="concat($NS, 'AgentRole/', $itemURI, '-counterstamp-issuer-', position())" />
		                        </xsl:attribute>
								</arco-core:isRoleOf>
							</rdf:Description>
							<rdf:Description>
								<xsl:attribute name="rdf:about">
		                        <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
		                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
										select="'https://w3id.org/italia/onto/l0/Agent'" />
		                        </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="arco-fn:name-cleaner(.)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="arco-fn:name-cleaner(.)" />
								</l0:name>
								<arco-core:isAgentOf>
									<xsl:attribute name="rdf:resource">
		                            <xsl:value-of
										select="concat($NS, 'AgentRole/', $itemURI, '-counterstamp-issuer-', position())" />
		                        </xsl:attribute>
								</arco-core:isAgentOf>
							</rdf:Description>
						</xsl:for-each>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<!-- We create the Time Indexed Typed Location associated with the Cultural 
				Property -->
			<xsl:if test="record/metadata/schede/*/LC">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS, 'TimeIndexedTypedLocation/', $itemURI, '-current')" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/location/TimeIndexedTypedLocation'" />
                        </xsl:attribute>
					</rdf:type>
					<arco-location:isTimeIndexedTypedLocationOf>
						<xsl:attribute name="rdf:resource"> 
								<xsl:value-of
							select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
							</xsl:attribute>
					</arco-location:isTimeIndexedTypedLocationOf>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Localizzazione fisica attuale del bene: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Localizzazione fisica attuale del bene: ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Current physical location of cultural property: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Current physical location of cultural property: ', $itemURI)" />
					</l0:name>
					<arco-location:hasLocationType>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/location/CurrentPhysicalLocation'" />
                        </xsl:attribute>
					</arco-location:hasLocationType>
					<xsl:if test="record/metadata/schede/*/LC/LDC/LDCS">
						<arco-core:specifications>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/LC/LDC/LDCS)" />
						</arco-core:specifications>
					</xsl:if>
					<xsl:if
						test="record/metadata/schede/*/LC/PVC/PVCV and not(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCV))='nr' or lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCV))='n.r.' or lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCV))='nr (recupero pregresso)' or lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCV))='.' or lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCV))='-')">
						<arco-location:locationDetails>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/LC/PVC/PVCV)" />
						</arco-location:locationDetails>
					</xsl:if>
					<xsl:if test="record/metadata/schede/*/LC/LCN">
						<arco-core:note>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/LC/LCN)" />
						</arco-core:note>
					</xsl:if>
					<xsl:if test="record/metadata/schede/*/UB/UBO">
						<arco-core:note>
							<xsl:value-of
								select="concat('Ubicazione originaria: ', normalize-space(record/metadata/schede/*/UB/UBO))" />
						</arco-core:note>
					</xsl:if>
					<xsl:if test="record/metadata/schede/*/LC/LDC/LDCD">
						<tiapit:atTime>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/LDC/LDCD)))" />
                            </xsl:attribute>
						</tiapit:atTime>
					</xsl:if>
				</rdf:Description>
			</xsl:if>
			<!-- Time Interval for Current Location -->
			<xsl:if test="record/metadata/schede/*/LC/LDC/LDCD">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of
						select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/LDC/LDCD)))" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/italia/onto/TI/TimeInterval'" />
                        </xsl:attribute>
					</rdf:type>
					<tiapit:time>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/*/LC/LDC/LDCD)" />
					</tiapit:time>
				</rdf:Description>
			</xsl:if>
			<xsl:if test="record/metadata/schede/*/LC/PVC/*">
				<xsl:variable name="address">
					<xsl:choose>
						<xsl:when
							test="record/metadata/schede/*/LC/PVC/PVCS and not(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCS))='italia')">
							<xsl:value-of
								select="concat($NS, 'Address/', arco-fn:urify(arco-fn:md5(concat(normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCS)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCE)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCI))))))" />
						</xsl:when>
						<xsl:otherwise>
							<xsl:choose>
								<xsl:when test="record/metadata/schede/*/LC/PVC/PVCI">
									<xsl:value-of
										select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCP)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCC)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCF)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCL)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCI)), normalize-space(lower-case(record/metadata/schede/*/LC/LDC/LDCU)))))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCP)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCC)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCF)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCL)), normalize-space(lower-case(record/metadata/schede/*/LC/PVL/PVLT)), normalize-space(lower-case(record/metadata/schede/*/LC/LDC/LDCU)))))" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                        <xsl:value-of select="$address" />
                    </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/italia/onto/CLV/Address'" />
                        </xsl:attribute>
					</rdf:type>
					<arco-location:isCulturalPropertyAddressOf>
						<xsl:attribute name="rdf:resource"> 
							<xsl:value-of
							select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
						</xsl:attribute>
					</arco-location:isCulturalPropertyAddressOf>
					<rdfs:label>
						<xsl:for-each
							select="record/metadata/schede/*/LC/PVC/*">
							<xsl:choose>
								<xsl:when test="position() = 1">
									<xsl:value-of select="./text()" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="concat(', ', ./text())" />
								</xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>
					</rdfs:label>
					<xsl:if test="record/metadata/schede/*/LC/PVL">
						<arco-location:hasToponymInTime>
							<xsl:attribute name="rdf:resource">
                                <xsl:choose>
                                    <xsl:when
								test="record/metadata/schede/*/LC/PVL/PVLT">
                                        <xsl:value-of
								select="concat($NS, 'ToponymInTime/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/PVL/PVLT)))" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:value-of
								select="concat($NS, 'ToponymInTime/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/PVL)))" />
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:attribute>
						</arco-location:hasToponymInTime>
					</xsl:if>
					<xsl:if test="record/metadata/schede/*/LC/PVC/PVCF">
						<arco-location:hasToponymInTime>
							<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
								select="concat($NS, 'ToponymInTime/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/PVC/PVCF)))" />
                            </xsl:attribute>
						</arco-location:hasToponymInTime>
					</xsl:if>
					<xsl:if
						test="record/metadata/schede/*/LC/PVC/PVCI and not(record/metadata/schede/*/LC/PVC/PVCI='.' or record/metadata/schede/*/LC/PVC/PVCI='-' or record/metadata/schede/*/LC/PVC/PVCI='/') and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCI)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCI)), 'n.r')))">
						<clvapit:fullAddress>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/LC/PVC/PVCI)" />
						</clvapit:fullAddress>
					</xsl:if>
					<xsl:if
						test="record/metadata/schede/*/LC/LDC/LDCU and not(record/metadata/schede/*/LC/LDC/LDCU='.' or record/metadata/schede/*/LC/LDC/LDCU='-' or record/metadata/schede/*/LC/LDC/LDCU='/') and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCU)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCU)), 'n.r')))">
						<clvapit:fullAddress>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/LC/LDC/LDCU)" />
						</clvapit:fullAddress>
					</xsl:if>
					<!-- Stato -->
					<xsl:if
						test="record/metadata/schede/*/LC/PVC/PVCS and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCS)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCS)), 'n.r')))">
						<clvapit:hasCountry>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'Country/', arco-fn:urify(record/metadata/schede/*/LC/PVC/PVCS))" />
                            </xsl:attribute>
						</clvapit:hasCountry>
					</xsl:if>
					<!-- Regione -->
					<xsl:if
						test="record/metadata/schede/*/LC/PVC/PVCR and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCR)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCR)), 'n.r')))">
						<clvapit:hasRegion>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'Region/', arco-fn:urify(record/metadata/schede/*/LC/PVC/PVCR))" />
                            </xsl:attribute>
						</clvapit:hasRegion>
					</xsl:if>
					<!-- Provincia -->
					<xsl:if
						test="record/metadata/schede/*/LC/PVC/PVCP and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCP)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCP)), 'n.r')))">
						<clvapit:hasProvince>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'Province/', arco-fn:urify(record/metadata/schede/*/LC/PVC/PVCP))" />
                            </xsl:attribute>
						</clvapit:hasProvince>
					</xsl:if>
					<!-- Comune -->
					<xsl:if
						test="record/metadata/schede/*/LC/PVC/PVCC and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCC)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCC)), 'n.r')))">
						<clvapit:hasCity>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'City/', arco-fn:urify(record/metadata/schede/*/LC/PVC/PVCC))" />
                            </xsl:attribute>
						</clvapit:hasCity>
					</xsl:if>
					<!-- Località -->
					<xsl:if
						test="record/metadata/schede/*/LC/PVC/PVCL and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCL)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCL)), 'n.r')))">
						<clvapit:hasAddressArea>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'AddressArea/', arco-fn:urify(record/metadata/schede/*/LC/PVC/PVCL))" />
                            </xsl:attribute>
						</clvapit:hasAddressArea>
					</xsl:if>
					<xsl:if
						test="record/metadata/schede/*/LC/PVC/PVCE and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCE)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCE)), 'n.r')))">
						<clvapit:hasAddressArea>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'AddressArea/', arco-fn:urify(record/metadata/schede/*/LC/PVC/PVCE))" />
                            </xsl:attribute>
						</clvapit:hasAddressArea>
					</xsl:if>
					<!-- ClericalAdministrativeArea -->
					<xsl:if test="record/metadata/schede/*/LC/PVE">
						<arco-location:hasClericalAdministrativeArea>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'ClericalAdministrativeArea/', arco-fn:urify(record/metadata/schede/*/LC/PVE))" />
                            </xsl:attribute>
						</arco-location:hasClericalAdministrativeArea>
					</xsl:if>
				</rdf:Description>

				<!-- Clerical Administrative Area : if any exists -->
				<xsl:if test="record/metadata/schede/*/LC/PVE">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
							<xsl:value-of
							select="concat($NS, 'ClericalAdministrativeArea/', arco-fn:urify(record/metadata/schede/*/LC/PVE))" />
		                </xsl:attribute>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/LC/PVE)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/LC/PVE)" />
						</l0:name>
						<rdf:type
							rdf:resource="http://dati.beniculturali.it/cis/ClericalAdministrativeArea" />
					</rdf:Description>
				</xsl:if>

				<!-- Toponym in Time as individual -->
				<xsl:if test="record/metadata/schede/*/LC/PVL">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:choose>
                                <xsl:when test="record/metadata/schede/*/LC/PVL/PVLT">
                                    <xsl:value-of select="concat($NS, 'ToponymInTime/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/PVL/PVLT)))" />
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="concat($NS, 'ToponymInTime/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/PVL)))" />
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/arco/ontology/location/ToponymInTime'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:choose>
								<xsl:when test="record/metadata/schede/*/LC/PVL/PVLT">
									<xsl:value-of
										select="normalize-space(record/metadata/schede/*/LC/PVL/PVLT)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="normalize-space(record/metadata/schede/*/LC/PVL)" />
								</xsl:otherwise>
							</xsl:choose>
						</rdfs:label>
						<l0:name>
							<xsl:choose>
								<xsl:when test="record/metadata/schede/*/LC/PVL/PVLT">
									<xsl:value-of
										select="normalize-space(record/metadata/schede/*/LC/PVL/PVLT)" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="normalize-space(record/metadata/schede/*/LC/PVL)" />
								</xsl:otherwise>
							</xsl:choose>
						</l0:name>
						<xsl:if test="record/metadata/schede/*/LC/PVL/PVLR">
						<tiapit:atTime>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/PVL/PVLR)))" />
                            </xsl:attribute>
						</tiapit:atTime>
						</xsl:if>
						<xsl:if test="record/metadata/schede/*/LC/PVL/PVLS">
						<arco-core:note>
							<xsl:value-of select="normalize-space(record/metadata/schede/*/LC/PVL/PVLS)" />
						</arco-core:note>
						</xsl:if>
					</rdf:Description>
				</xsl:if>
				<!-- Toponym in Time (version 2.00) as individual -->
				<xsl:if test="record/metadata/schede/*/LC/PVC/PVCF">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                                    <xsl:value-of
							select="concat($NS, 'ToponymInTime/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/PVC/PVCF)))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/arco/ontology/location/ToponymInTime'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(record/metadata/schede/*/LC/PVC/PVCF)" />
							</xsl:call-template>

						</rdfs:label>
						<l0:name>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(record/metadata/schede/*/LC/PVC/PVCF)" />
							</xsl:call-template>

						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- Stato -->
				<xsl:if
					test="record/metadata/schede/*/LC/PVC/PVCS and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCS)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCS)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:value-of
							select="concat($NS, 'Country/', arco-fn:urify(record/metadata/schede/*/LC/PVC/PVCS))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/Country'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/LC/PVC/PVCS)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/LC/PVC/PVCS)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- Regione -->
				<xsl:if
					test="record/metadata/schede/*/LC/PVC/PVCR and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCR)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCR)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:value-of
							select="concat($NS, 'Region/', arco-fn:urify(record/metadata/schede/*/LC/PVC/PVCR))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/Region'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(record/metadata/schede/*/LC/PVC/PVCR)" />
							</xsl:call-template>
						</rdfs:label>
						<l0:name>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(record/metadata/schede/*/LC/PVC/PVCR)" />
							</xsl:call-template>

						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- Provincia -->
				<xsl:if
					test="record/metadata/schede/*/LC/PVC/PVCP and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCP)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCP)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:value-of
							select="concat($NS, 'Province/', arco-fn:urify(record/metadata/schede/*/LC/PVC/PVCP))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/Province'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/LC/PVC/PVCP)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/LC/PVC/PVCP)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- Comune -->
				<xsl:if
					test="record/metadata/schede/*/LC/PVC/PVCC and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCC)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCC)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:value-of
							select="concat($NS, 'City/', arco-fn:urify(record/metadata/schede/*/LC/PVC/PVCC))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/City'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(record/metadata/schede/*/LC/PVC/PVCC)" />
							</xsl:call-template>

						</rdfs:label>
						<l0:name>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(record/metadata/schede/*/LC/PVC/PVCC)" />
							</xsl:call-template>

						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- Address Area -->
				<xsl:if
					test="record/metadata/schede/*/LC/PVC/PVCL and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCL)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCL)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:value-of
							select="concat($NS, 'AddressArea/', arco-fn:urify(record/metadata/schede/*/LC/PVC/PVCL))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/AddressArea'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(record/metadata/schede/*/LC/PVC/PVCL)" />
							</xsl:call-template>

						</rdfs:label>
						<l0:name>
							<xsl:call-template name="CamelCase">
								<xsl:with-param name="text"
									select="normalize-space(record/metadata/schede/*/LC/PVC/PVCL)" />
							</xsl:call-template>

						</l0:name>
					</rdf:Description>
				</xsl:if>
				<xsl:if
					test="record/metadata/schede/*/LC/PVC/PVCE and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCE)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCE)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:value-of
							select="concat($NS, 'AddressArea/', arco-fn:urify(record/metadata/schede/*/LC/PVC/PVCE))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/AddressArea'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/LC/PVC/PVCE)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/*/LC/PVC/PVCE)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<xsl:choose>
					<xsl:when test="record/metadata/schede/*/LC/LDC/*">
						<xsl:variable name="site">
							<xsl:choose>
								<xsl:when
									test="record/metadata/schede/*/LC/PVC/PVCS and not(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCS))='italia')">
									<xsl:value-of
										select="concat($NS, 'Site/', arco-fn:arcofy(concat(normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCS)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCE)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCI)))))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:choose>
										<xsl:when test="record/metadata/schede/*/LC/LDC/LDCK">
											<xsl:value-of
												select="concat($NS, 'Site/', arco-fn:arcofy(concat(normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCP)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCC)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCF)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCL)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCI)), normalize-space(lower-case(record/metadata/schede/*/LC/LDC/LDCU)), normalize-space(lower-case(record/metadata/schede/*/LC/LDC/LDCK)))))" />
										</xsl:when>
										<xsl:when
											test="record/metadata/schede/*/LC/LDC/LDCN and starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCN)), 'nr') or starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCN)), '-') or starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCN)), '(*)') and starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCN)), '(?)') or starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCN)), '(denominazione assente)') or starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCN)), '?') or starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCN)), '.') or starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCN)), '590977') or starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCN)), '63904') or starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCN)), 'non id.') or starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCN)), 'non identificabile') or starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCN)), 'n.r')">
											<xsl:value-of
												select="concat($NS, 'Site/', arco-fn:arcofy(concat(normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCP)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCC)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCF)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCL)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCI)), normalize-space(lower-case(record/metadata/schede/*/LC/LDC/LDCU)), normalize-space(lower-case(record/metadata/schede/*/LC/LDC/LDCT)))))" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of
												select="concat($NS, 'Site/', arco-fn:arcofy(concat(normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCP)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCC)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCF)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCL)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCI)), normalize-space(lower-case(record/metadata/schede/*/LC/LDC/LDCU)), normalize-space(lower-case(record/metadata/schede/*/LC/LDC/LDCN)))))" />
										</xsl:otherwise>
									</xsl:choose>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                                <xsl:value-of
								select="$site" />
                            </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                                    <xsl:value-of
									select="'http://dati.beniculturali.it/cis/Site'" />
                                </xsl:attribute>
							</rdf:type>
							<xsl:choose>
								<xsl:when
									test="record/metadata/schede/*/LC/LDC/LDCN and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCN)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCN)), 'n.r')))">
									<rdfs:label>
										<xsl:value-of
											select="normalize-space(record/metadata/schede/*/LC/LDC/LDCN)" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of
											select="normalize-space(record/metadata/schede/*/LC/LDC/LDCN)" />
									</l0:name>
								</xsl:when>
								<xsl:when
									test="record/metadata/schede/*/LC/LDC/LDCM and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCM)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCM)), 'n.r')))">
									<rdfs:label>
										<xsl:value-of
											select="concat('Contenitore fisico di: ', normalize-space(record/metadata/schede/*/LC/LDC/LDCM))" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of
											select="concat('Contenitore fisico di: ', normalize-space(record/metadata/schede/*/LC/LDC/LDCM))" />
									</l0:name>
								</xsl:when>
								<xsl:otherwise>
									<rdfs:label xml:lang="it">Contenitore fisico</rdfs:label>
									<l0:name xml:lang="it">Contenitore fisico</l0:name>
									<rdfs:label xml:lang="en">Site</rdfs:label>
									<l0:name xml:lang="en">Site</l0:name>
								</xsl:otherwise>
							</xsl:choose>
							<xsl:if test="record/metadata/schede/*/LC/PVC">
								<cis:siteAddress>
									<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
										select="$address" />
                                    </xsl:attribute>
								</cis:siteAddress>
							</xsl:if>
							<xsl:if
								test="record/metadata/schede/*/LC/LDC/LDCK and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCK)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCK)), 'n.r')))">
								<arco-location:siteIdentifier>
									<xsl:value-of
										select="normalize-space(record/metadata/schede/*/LC/LDC/LDCK)" />
								</arco-location:siteIdentifier>
							</xsl:if>
							<xsl:if
								test="record/metadata/schede/*/LC/LDC/LDCF and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCF)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCF)), 'n.r')))">
								<arco-cd:hasUseFunction>
									<xsl:attribute name="rdf:resource">
										<xsl:value-of
										select="concat($NS, 'UseFunction/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/LDC/LDCF)))" />
									</xsl:attribute>
								</arco-cd:hasUseFunction>
							</xsl:if>
							<xsl:if
								test="record/metadata/schede/*/LC/LDC/LDCM and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCM)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCM)), 'n.r')))">
								<cis:isSiteOf>
									<xsl:attribute name="rdf:resource">
                                        <xsl:choose>
											<xsl:when
										test="record/metadata/schede/*/LC/PVC/PVCS and not(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCS))='italia')">
												<xsl:value-of
										select="concat($NS, 'CulturalInstituteOrSite/', arco-fn:arcofy(concat(normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCS)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCE)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCI)))))" />
											</xsl:when>
											<xsl:otherwise>
												<xsl:value-of
										select="concat($NS, 'CulturalInstituteOrSite/', arco-fn:arcofy(concat(normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCP)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCC)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCF)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCL)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCI)), normalize-space(lower-case(record/metadata/schede/*/LC/LDC/LDCM)))))" />
										</xsl:otherwise>
									</xsl:choose>
                                    </xsl:attribute>
								</cis:isSiteOf>
							</xsl:if>
							<xsl:if
								test="record/metadata/schede/*/LC/LDC/LDCC and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCC)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCC)), 'n.r')))">
								<cis:isPartOf>
									<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
										select="concat($NS, 'MonumentalArea/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/LDC/LDCC)))" />
                                    </xsl:attribute>
								</cis:isPartOf>
							</xsl:if>
							<!-- Site Type -->
							<xsl:if
								test="record/metadata/schede/*/LC/LDC/LDCT and not(normalize-space(record/metadata/schede/*/LC/LDC/LDCT)='.') and (not(starts-with(lower-case(normalize-space(./LDCT)), 'nr')) and not(starts-with(lower-case(normalize-space(./LDCT)), 'n.r')))">
								<arco-location:hasSiteType>
									<xsl:attribute name="rdf:resource">
                                        <xsl:choose>
                                            <xsl:when
										test="record/metadata/schede/*/LC/LDC/LDCQ">
                                                <xsl:value-of
										select="concat($NS, 'SiteType/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/LDC/LDCT)), '-', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/LDC/LDCQ)))" />
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:value-of
										select="concat($NS, 'SiteType/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/LDC/LDCT)))" />
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:attribute>
								</arco-location:hasSiteType>
							</xsl:if>
							<!-- culturalInstituteOrSiteIdentifier -->
							<xsl:if test="record/metadata/schede/*/LC/LDC/LDCG">
								<arco-location:culturalInstituteOrSiteIdentifier>
									<xsl:value-of
										select="normalize-space(record/metadata/schede/*/LC/LDC/LDCG)" />
								</arco-location:culturalInstituteOrSiteIdentifier>
							</xsl:if>
						</rdf:Description>
						<!-- site use function as an individual -->
						<xsl:if
							test="record/metadata/schede/*/LC/LDC/LDCF and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCF)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCF)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
										<xsl:value-of
									select="concat($NS, 'UseFunction/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/LDC/LDCF)))" />
									</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
										select="'https://w3id.org/arco/ontology/context-description/UseFunction'" />
                                    </xsl:attribute>
								</rdf:type>
								<l0:name>
									<xsl:value-of
										select="normalize-space(record/metadata/schede/*/LC/LDC/LDCF)" />
								</l0:name>
								<rdfs:label>
									<xsl:value-of
										select="normalize-space(record/metadata/schede/*/LC/LDC/LDCF)" />
								</rdfs:label>
								<arco-cd:useFunction>
									<xsl:value-of
										select="normalize-space(record/metadata/schede/*/LC/LDC/LDCF)" />
								</arco-cd:useFunction>
							</rdf:Description>
						</xsl:if>
						<!-- Site Type as an individual -->
						<xsl:if
							test="record/metadata/schede/*/LC/LDC/LDCT and not(normalize-space(record/metadata/schede/*/LC/LDC/LDCT)='.') and (not(starts-with(lower-case(normalize-space(./LDCT)), 'nr')) and not(starts-with(lower-case(normalize-space(./LDCT)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                    <xsl:choose>
                                        <xsl:when
									test="record/metadata/schede/*/LC/LDC/LDCQ">
                                            <xsl:value-of
									select="concat($NS, 'SiteType/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/LDC/LDCT)), '-', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/LDC/LDCQ)))" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:value-of
									select="concat($NS, 'SiteType/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/LDC/LDCT)))" />
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
										select="'https://w3id.org/arco/ontology/location/SiteType'" />
                                    </xsl:attribute>
								</rdf:type>
								<rdfs:label xml:lang="it">
									<xsl:choose>
										<xsl:when test="record/metadata/schede/*/LC/LDC/LDCQ">
											<xsl:value-of
												select="concat('Tipo di contenitore fisico:', ' ', normalize-space(record/metadata/schede/*/LC/LDC/LDCT), ' ', normalize-space(record/metadata/schede/*/LC/LDC/LDCQ))" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of
												select="concat('Tipo di contenitore fisico:', ' ', normalize-space(record/metadata/schede/*/LC/LDC/LDCT))" />
										</xsl:otherwise>
									</xsl:choose>
								</rdfs:label>
								<l0:name xml:lang="it">
									<xsl:choose>
										<xsl:when test="record/metadata/schede/*/LC/LDC/LDCQ">
											<xsl:value-of
												select="concat('Tipo di contenitore fisico:', ' ', normalize-space(record/metadata/schede/*/LC/LDC/LDCT), ' ', normalize-space(record/metadata/schede/*/LC/LDC/LDCQ))" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of
												select="concat('Tipo di contenitore fisico:', ' ', normalize-space(record/metadata/schede/*/LC/LDC/LDCT))" />
										</xsl:otherwise>
									</xsl:choose>
								</l0:name>
								<rdfs:label xml:lang="en">
									<xsl:choose>
										<xsl:when test="record/metadata/schede/*/LC/LDC/LDCQ">
											<xsl:value-of
												select="concat('Site type:', ' ', normalize-space(record/metadata/schede/*/LC/LDC/LDCT), ' ', normalize-space(record/metadata/schede/*/LC/LDC/LDCQ))" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of
												select="concat('Site type:', ' ', normalize-space(record/metadata/schede/*/LC/LDC/LDCT))" />
										</xsl:otherwise>
									</xsl:choose>
								</rdfs:label>
								<l0:name xml:lang="en">
									<xsl:choose>
										<xsl:when test="record/metadata/schede/*/LC/LDC/LDCQ">
											<xsl:value-of
												select="concat('Site type:', ' ', normalize-space(record/metadata/schede/*/LC/LDC/LDCT), ' ', normalize-space(record/metadata/schede/*/LC/LDC/LDCQ))" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of
												select="concat('Site type:', ' ', normalize-space(record/metadata/schede/*/LC/LDC/LDCT))" />
										</xsl:otherwise>
									</xsl:choose>
								</l0:name>
								<xsl:if
									test="record/metadata/schede/*/LC/LDC/LDCT and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCT)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCT)), 'n.r')))">
									<arco-location:hasSiteDefinition>
										<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
											select="concat($NS,'SiteDefinition/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/LDC/LDCT)))" />
                                    </xsl:attribute>
									</arco-location:hasSiteDefinition>
								</xsl:if>
								<xsl:if
									test="record/metadata/schede/*/LC/LDC/LDCQ and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCQ)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCQ)), 'n.r')))">
									<arco-location:hasSiteSpecification>
										<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
											select="concat($NS,'SiteSpecification/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/LDC/LDCQ)))" />
                                        </xsl:attribute>
									</arco-location:hasSiteSpecification>
								</xsl:if>
							</rdf:Description>
						</xsl:if>
						<!-- Site Definition as an individual -->
						<xsl:if
							test="record/metadata/schede/*/LC/LDC/LDCT and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCT)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCT)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                    <xsl:value-of
									select="concat($NS,'SiteDefinition/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/LDC/LDCT)))" />
                                </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
										select="'https://w3id.org/arco/ontology/location/SiteDefinition'" />
                                    </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of
										select="normalize-space(record/metadata/schede/*/LC/LDC/LDCT)" />
								</rdfs:label>
							</rdf:Description>
						</xsl:if>
						<!-- Site Specification as an individual -->
						<xsl:if
							test="record/metadata/schede/*/LC/LDC/LDCQ and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCQ)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCQ)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                    <xsl:value-of
									select="concat($NS,'SiteSpecification/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/LDC/LDCQ)))" />
                                </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
										select="'https://w3id.org/arco/ontology/location/SiteSpecification'" />
                                    </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of
										select="normalize-space(record/metadata/schede/*/LC/LDC/LDCQ)" />
								</rdfs:label>
							</rdf:Description>
						</xsl:if>
						<!-- Monumental Area as individual -->
						<xsl:if
							test="record/metadata/schede/*/LC/LDC/LDCC and not(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCC))='nr' or lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCC))='n.r.' or lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCC))='nr (recupero pregresso)')">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                    <xsl:value-of
									select="concat($NS, 'MonumentalArea/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/LDC/LDCC)))" />
                                </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
										select="'http://dati.beniculturali.it/cis/MonumentalArea'" />
                                    </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of
										select="normalize-space(record/metadata/schede/*/LC/LDC/LDCC)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of
										select="normalize-space(record/metadata/schede/*/LC/LDC/LDCC)" />
								</l0:name>
							</rdf:Description>
						</xsl:if>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                                <xsl:value-of
								select="concat($NS, 'TimeIndexedTypedLocation/', $itemURI, '-current')" />
                            </xsl:attribute>
							<arco-location:atSite>
								<xsl:attribute name="rdf:resource">
                                    <xsl:value-of
									select="$site" />
                                </xsl:attribute>
							</arco-location:atSite>
						</rdf:Description>
						<!-- rdf:Description> <xsl:attribute name="rdf:about"> <xsl:value-of 
							select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), 
							'/', $itemURI)" /> </xsl:attribute> <arco-location:isInSite> <xsl:attribute 
							name="rdf:resource"> <xsl:value-of select="$site" /> </xsl:attribute> </arco-location:isInSite> 
							</rdf:Description -->
						<!-- Cultural Institute or Site -->
						<xsl:if
							test="record/metadata/schede/*/LC/LDC/LDCM and (not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCM)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/*/LC/LDC/LDCM)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                    <xsl:choose>
										<xsl:when
									test="record/metadata/schede/*/LC/PVC/PVCS and not(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCS))='italia')">
											<xsl:value-of
									select="concat($NS, 'CulturalInstituteOrSite/', arco-fn:arcofy(concat(normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCS)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCE)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCI)))))" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of
									select="concat($NS, 'CulturalInstituteOrSite/', arco-fn:arcofy(concat(normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCP)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCC)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCF)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCL)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCI)), normalize-space(lower-case(record/metadata/schede/*/LC/LDC/LDCM)))))" />
									</xsl:otherwise>
								</xsl:choose>
                                </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
										select="'http://dati.beniculturali.it/cis/CulturalInstituteOrSite'" />
                                    </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of
										select="normalize-space(record/metadata/schede/*/LC/LDC/LDCM)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of
										select="normalize-space(record/metadata/schede/*/LC/LDC/LDCM)" />
								</l0:name>
								<cis:hasCISNameInTime>
									<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
										select="concat($NS, 'CISNameInTime/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/LDC/LDCM)))" />
                                    </xsl:attribute>
								</cis:hasCISNameInTime>
								<cis:hasSite>
									<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
										select="$site" />
                                    </xsl:attribute>
								</cis:hasSite>
								<arco-location:isCulturalInstituteOrSiteOf>
									<xsl:attribute name="rdf:resource">
										<xsl:value-of
										select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
									</xsl:attribute>
								</arco-location:isCulturalInstituteOrSiteOf>

							</rdf:Description>
							<!-- Name in time -->
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                    <xsl:value-of
									select="concat($NS, 'CISNameInTime/', arco-fn:urify(normalize-space(record/metadata/schede/*/LC/LDC/LDCM)))" />
                                </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
										select="'http://dati.beniculturali.it/cis/CISNameInTime'" />
                                    </xsl:attribute>
								</rdf:type>
								<rdfs:label xml:lang="it">
									<xsl:value-of
										select="concat('Denominazione nel tempo: ', normalize-space(record/metadata/schede/*/LC/LDC/LDCM))" />
								</rdfs:label>
								<l0:name xml:lang="it">
									<xsl:value-of
										select="concat('Denominazione nel tempo: ', normalize-space(record/metadata/schede/*/LC/LDC/LDCM))" />
								</l0:name>
								<rdfs:label xml:lang="en">
									<xsl:value-of
										select="concat('Name in time: ', normalize-space(record/metadata/schede/*/LC/LDC/LDCM))" />
								</rdfs:label>
								<l0:name xml:lang="en">
									<xsl:value-of
										select="concat('Name in time: ', normalize-space(record/metadata/schede/*/LC/LDC/LDCM))" />
								</l0:name>
								<cis:institutionalCISName>
									<xsl:value-of
										select="normalize-space(record/metadata/schede/*/LC/LDC/LDCM)" />
								</cis:institutionalCISName>
							</rdf:Description>
						</xsl:if>
					</xsl:when>
					<xsl:otherwise>
						<xsl:variable name="location"
							select="concat($NS, 'Feature/', arco-fn:arcofy(normalize-space(record/metadata/schede/*/LC/PVC)))" />
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                                <xsl:value-of
								select="concat($NS, 'TimeIndexedTypedLocation/', $itemURI, '-current')" />
                            </xsl:attribute>
							<arco-location:atLocation>
								<xsl:attribute name="rdf:resource">
                                    <xsl:value-of
									select="$location" />
                                </xsl:attribute>
							</arco-location:atLocation>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                                <xsl:value-of
								select="$location" />
                            </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                                    <xsl:value-of
									select="'https://w3id.org/italia/onto/CLV/Feature'" />
                                </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:value-of
									select="normalize-space(record/metadata/schede/*/LC/PVC)" />
							</rdfs:label>
							<xsl:if test="record/metadata/schede/*/LC/PVC/*">
								<clvapit:hasAddress>
									<xsl:attribute name="rdf:resource">
									<xsl:choose>
										<xsl:when
										test="record/metadata/schede/*/LC/PVC/PVCS and not(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCS))='italia')">
											<xsl:value-of
										select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCS)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCE)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCI)))))" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:choose>
												<xsl:when
										test="record/metadata/schede/*/LC/PVC/PVCI">
													<xsl:value-of
										select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCP)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCC)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCF)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCL)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCI)), normalize-space(lower-case(record/metadata/schede/*/LC/LDC/LDCU)))))" />
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of
										select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCP)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCC)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCF)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCL)), normalize-space(lower-case(record/metadata/schede/*/LC/PVL/PVLT)), normalize-space(lower-case(record/metadata/schede/*/LC/LDC/LDCU)))))" />
												</xsl:otherwise>
											</xsl:choose>
										</xsl:otherwise>
									</xsl:choose>
									</xsl:attribute>
								</clvapit:hasAddress>
							</xsl:if>
						</rdf:Description>
						<xsl:if test="record/metadata/schede/*/LC/PVC/*">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                	<xsl:choose>
										<xsl:when
									test="record/metadata/schede/*/LC/PVC/PVCS and not(lower-case(normalize-space(record/metadata/schede/*/LC/PVC/PVCS))='italia')">
											<xsl:value-of
									select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCS)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCE)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCI)))))" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:choose>
												<xsl:when
									test="record/metadata/schede/*/LC/PVC/PVCI">
													<xsl:value-of
									select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCP)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCC)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCF)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCL)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCI)), normalize-space(lower-case(record/metadata/schede/*/LC/LDC/LDCU)))))" />
												</xsl:when>
												<xsl:otherwise>
													<xsl:value-of
									select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCP)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCC)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCF)), normalize-space(lower-case(record/metadata/schede/*/LC/PVC/PVCL)), normalize-space(lower-case(record/metadata/schede/*/LC/PVL/PVLT)), normalize-space(lower-case(record/metadata/schede/*/LC/LDC/LDCU)))))" />
												</xsl:otherwise>
											</xsl:choose>
										</xsl:otherwise>
									</xsl:choose>
                				</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
										select="'https://w3id.org/italia/onto/CLV/Address'" />
                                    </xsl:attribute>
								</rdf:type>
								<arco-location:isCulturalPropertyAddressOf>
									<xsl:attribute name="rdf:resource"> 
										<xsl:value-of
										select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
									</xsl:attribute>
								</arco-location:isCulturalPropertyAddressOf>
								<rdfs:label>
									<xsl:for-each
										select="record/metadata/schede/*/LC/PVC/*">
										<xsl:choose>
											<xsl:when test="position() = 1">
												<xsl:value-of select="./text()" />
											</xsl:when>
											<xsl:otherwise>
												<xsl:value-of select="concat(', ', ./text())" />
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</rdfs:label>
								<!-- Aggiunto da Valentina - Address details <xsl:if test="record/metadata/schede/*/LC/PVC/PVCV"> 
									<arco-location:addressDetails> <xsl:value-of select="normalize-space(record/metadata/schede/*/LC/PVC/PVCV)"" 
									/> </arco-location:addressDetails> -->
								<!-- Aggiunto da Valentina - Full Address - per issue github #8 <xsl:if 
									test="record/metadata/schede/*/LC/PVC/PVCI"> <clvapit:fullAddress> <xsl:value-of 
									select="normalize-space(record/metadata/schede/*/LC/PVC/PVCI)" /> </clvapit:fullAddress> 
									</xsl:if> <xsl:if test="record/metadata/schede/*/LC/LDC/LDCU"> <clvapit:fullAddress> 
									<xsl:value-of select="normalize-space(record/metadata/schede/*/LC/LDC/LDCU)" 
									/> </clvapit:fullAddress> </xsl:if> -->
								<!-- Stato -->
								<xsl:if test="record/metadata/schede/*/LC/PVC/PVCS">
									<clvapit:hasCountry>
										<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
											select="concat($NS, 'Country/', arco-fn:urify(record/metadata/schede/*/LC/PVC/PVCS))" />
                                        </xsl:attribute>
									</clvapit:hasCountry>
								</xsl:if>
								<!-- Regione -->
								<xsl:if test="record/metadata/schede/*/LC/PVC/PVCR">
									<clvapit:hasRegion>
										<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
											select="concat($NS, 'Region/', arco-fn:urify(record/metadata/schede/*/LC/PVC/PVCR))" />
                                        </xsl:attribute>
									</clvapit:hasRegion>
								</xsl:if>
								<!-- Provincia -->
								<xsl:if test="record/metadata/schede/*/LC/PVC/PVCP">
									<clvapit:hasProvince>
										<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
											select="concat($NS, 'Province/', arco-fn:urify(record/metadata/schede/*/LC/PVC/PVCP))" />
                                        </xsl:attribute>
									</clvapit:hasProvince>
								</xsl:if>
								<!-- Comune -->
								<xsl:if test="record/metadata/schede/*/LC/PVC/PVCC">
									<clvapit:hasCity>
										<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
											select="concat($NS, 'City/', arco-fn:urify(record/metadata/schede/*/LC/PVC/PVCC))" />
                                        </xsl:attribute>
									</clvapit:hasCity>
								</xsl:if>
								<!-- Località -->
								<xsl:if test="record/metadata/schede/*/LC/PVC/PVCL">
									<clvapit:hasAddressArea>
										<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
											select="concat($NS, 'AddressArea/', arco-fn:urify(record/metadata/schede/*/LC/PVC/PVCL))" />
                                        </xsl:attribute>
									</clvapit:hasAddressArea>
								</xsl:if>
								<xsl:if
									test="record/metadata/schede/*/LC/PVC/PVCI and not(record/metadata/schede/*/LC/PVC/PVCI='.' or record/metadata/schede/*/LC/PVC/PVCI='-' or record/metadata/schede/*/LC/PVC/PVCI='/')">
									<clvapit:fullAddress>
										<xsl:value-of
											select="normalize-space(record/metadata/schede/*/LC/PVC/PVCI)" />
									</clvapit:fullAddress>
								</xsl:if>
								<xsl:if
									test="record/metadata/schede/*/LC/LDC/LDCU and not(record/metadata/schede/*/LC/LDC/LDCU='.' or record/metadata/schede/*/LC/LDC/LDCU='-' or record/metadata/schede/*/LC/LDC/LDCU='/')">
									<clvapit:fullAddress>
										<xsl:value-of
											select="normalize-space(record/metadata/schede/*/LC/LDC/LDCU)" />
									</clvapit:fullAddress>
								</xsl:if>
							</rdf:Description>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>

			</xsl:if>
			<!-- alternative locations -->
			<xsl:for-each select="record/metadata/schede/*/LA">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
									 <xsl:value-of
						select="concat($NS, 'TimeIndexedTypedLocation/', $itemURI, '-alternative-', position())" />
								</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/location/TimeIndexedTypedLocation'" />
                        </xsl:attribute>
					</rdf:type>
					<arco-location:isTimeIndexedTypedLocationOf>
						<xsl:attribute name="rdf:resource"> 
								<xsl:value-of
							select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
							</xsl:attribute>
					</arco-location:isTimeIndexedTypedLocationOf>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Altra localizzazione ', position(), ' del bene: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Altra localizzazione ', position(), ' del bene: ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Alternative location ', position(), ' of cultural property: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Alternative location ', position(), ' of cultural property: ', $itemURI)" />
					</l0:name>
					<xsl:if test="./PRC/PRCS">
						<arco-core:specifications>
							<xsl:value-of select="normalize-space(./PRC/PRCS)" />
						</arco-core:specifications>
					</xsl:if>
					<xsl:if test="./LAN">
						<arco-core:note>
							<xsl:value-of select="normalize-space(./LAN)" />
						</arco-core:note>
					</xsl:if>
					<xsl:if
						test="./TLC or ./TCL and not(./TLC='.' or ./TCL='.' or ./TLC='-' or ./TCL='-' or ./TLC='/' or ./TCL='/') and (not(starts-with(lower-case(normalize-space(./TCL)), 'nr')) and not(starts-with(lower-case(normalize-space(./TCL)), 'n.r')) and not(starts-with(lower-case(normalize-space(./TLC)), 'nr')) and not(starts-with(lower-case(normalize-space(./TLC)), 'n.r')))">
						<arco-location:hasLocationType>
							<xsl:attribute name="rdf:resource">
                                <xsl:choose>
                                    <xsl:when
								test="lower-case(normalize-space(./TLC))='luogo di provenienza/collocazione precedente' or lower-case(normalize-space(./TCL))='luogo di provenienza' or lower-case(normalize-space(./TLC))='provenienza' or lower-case(normalize-space(./TCL))='provenienza'">
                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/location/LastLocation'" />
                                    </xsl:when>
                                     <xsl:when
								test="lower-case(normalize-space(./TLC))='di archivio' or lower-case(normalize-space(./TCL))='di archivio'">
                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/location/ArchivalLocation'" />
                                    </xsl:when>
                                    <xsl:when
								test="lower-case(normalize-space(./TLC))='luogo di produzione/realizzazione' or lower-case(normalize-space(./TCL))='luogo di esecuzione/fabbricazione'">
                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/location/ProductionRealizationLocation'" />
                                    </xsl:when>
                                    <xsl:when
								test="lower-case(normalize-space(./TLC))='luogo di reperimento' or lower-case(normalize-space(./TCL))='luogo di reperimento' or lower-case(normalize-space(./TLC))='reperimento' or lower-case(normalize-space(./TCL))='reperimento'">
                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/location/FindingLocation'" />
                                    </xsl:when>
                                    <xsl:when
								test="lower-case(normalize-space(./TLC))='luogo di deposito' or lower-case(normalize-space(./TCL))='luogo di deposito' or lower-case(normalize-space(./TLC))='deposito temporaneo' or lower-case(normalize-space(./TCL))='deposito temporaneo' or lower-case(normalize-space(./TLC))='deposito' or lower-case(normalize-space(./TCL))='deposito'">
                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/location/StorageLocation'" />
                                    </xsl:when>
                                    <xsl:when
								test="lower-case(normalize-space(./TLC))='luogo di esposizione' or lower-case(normalize-space(./TCL))='luogo di esposizione' or lower-case(normalize-space(./TLC))='espositiva' or lower-case(normalize-space(./TCL))='espositiva' or lower-case(normalize-space(./TLC))='espositivo' or lower-case(normalize-space(./TCL))='espositivo' or lower-case(normalize-space(./TLC))='esposizione' or lower-case(normalize-space(./TCL))='esposizione'">
                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/location/ExhibitionLocation'" />
                                    </xsl:when>
                                    <xsl:when
								test="lower-case(normalize-space(./TLC))='luogo di rilevamento' or lower-case(normalize-space(./TCL))='luogo di rilevamento' or lower-case(normalize-space(./TCL))='di rilevamento' or lower-case(normalize-space(./TLC))='di rilevamento' or lower-case(normalize-space(./TCL))='localizzazione di rilevamento' or lower-case(normalize-space(./TLC))='localizzazione di rilevamento'">
                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/location/ObservationLocation'" />
                                    </xsl:when>
                                    <xsl:when
								test="lower-case(normalize-space(./TLC))='area rappresentata' or lower-case(normalize-space(./TCL))='area rappresentata'">
                                        <xsl:value-of
								select="'https://w3id.org/arco/ontology/location/SubjectLocation'" />
                                    </xsl:when>
                                    <xsl:when test="./TLC">
                                        <xsl:variable
								name="tlc" select="normalize-space(./TLC)" />
                                        <xsl:value-of
								select="concat($NS, 'LocationType/', arco-fn:urify(normalize-space(./TLC)))" />
                                    </xsl:when>
                                    <xsl:when test="./TCL">
                                        <xsl:variable
								name="tcl" select="normalize-space(./TCL)" />
                                        <xsl:value-of
								select="concat($NS, 'LocationType/', arco-fn:urify(normalize-space(./TCL)))" />
                                    </xsl:when>
                                </xsl:choose>
                            </xsl:attribute>
						</arco-location:hasLocationType>
					</xsl:if>
					<xsl:if
						test="./PRD and (not(starts-with(lower-case(normalize-space(./PRD)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRD)), 'n.r')))">
						<tiapit:atTime>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./PRD)))" />
                            </xsl:attribute>
						</tiapit:atTime>
					</xsl:if>
				</rdf:Description>
				<xsl:if test="./TLC or ./TCL">
					<xsl:choose>
						<xsl:when
							test="lower-case(normalize-space(./TLC))='luogo di provenienza/collocazione precedente' or lower-case(normalize-space(./TCL))='luogo di provenienza' or lower-case(normalize-space(./TLC))='provenienza' or lower-case(normalize-space(./TCL))='provenienza'" />
						<xsl:when
							test="lower-case(normalize-space(./TLC))='luogo di produzione/realizzazione' or lower-case(normalize-space(./TCL))='luogo di esecuzione/fabbricazione'" />
						<xsl:when
							test="lower-case(normalize-space(./TLC))='luogo di reperimento' or lower-case(normalize-space(./TCL))='luogo di reperimento' or lower-case(normalize-space(./TLC))='reperimento' or lower-case(normalize-space(./TCL))='reperimento'" />
						<xsl:when
							test="lower-case(normalize-space(./TLC))='luogo di deposito' or lower-case(normalize-space(./TCL))='luogo di deposito' or lower-case(normalize-space(./TLC))='deposito temporaneo' or lower-case(normalize-space(./TCL))='deposito temporaneo' or lower-case(normalize-space(./TLC))='deposito' or lower-case(normalize-space(./TCL))='deposito'" />
						<xsl:when
							test="lower-case(normalize-space(./TLC))='luogo di esposizione' or lower-case(normalize-space(./TCL))='luogo di esposizione' or lower-case(normalize-space(./TLC))='espositiva' or lower-case(normalize-space(./TCL))='espositiva' or lower-case(normalize-space(./TLC))='espositivo' or lower-case(normalize-space(./TCL))='espositivo' or lower-case(normalize-space(./TLC))='esposizione' or lower-case(normalize-space(./TCL))='esposizione'" />
						<xsl:when
							test="lower-case(normalize-space(./TLC))='luogo di rilevamento' or lower-case(normalize-space(./TCL))='luogo di rilevamento' or lower-case(normalize-space(./TCL))='di rilevamento' or lower-case(normalize-space(./TLC))='di rilevamento' or lower-case(normalize-space(./TCL))='localizzazione di rilevamento' or lower-case(normalize-space(./TLC))='localizzazione di rilevamento'" />
						<xsl:when
							test="lower-case(normalize-space(./TLC))='area rappresentata' or lower-case(normalize-space(./TCL))='area rappresentata'" />
						<xsl:when
							test="./TLC and not(./TLC='.' or ./TLC='-' or ./TLC='/')  and (not(starts-with(lower-case(normalize-space(./TLC)), 'nr')) and not(starts-with(lower-case(normalize-space(./TLC)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                    <xsl:value-of
									select="concat($NS, 'LocationType/', arco-fn:urify(normalize-space(./TLC)))" />
                                </xsl:attribute>
								<rdf:type
									rdf:resource="https://w3id.org/arco/ontology/location/LocationType" />
								<rdfs:label>
									<xsl:value-of select="normalize-space(./TLC)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./TLC)" />
								</l0:name>
							</rdf:Description>
						</xsl:when>
						<xsl:when
							test="./TCL and not(./TCL='.' or ./TCL='-' or ./TCL='/') and (not(starts-with(lower-case(normalize-space(./TCL)), 'nr')) and not(starts-with(lower-case(normalize-space(./TCL)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                    <xsl:value-of
									select="concat($NS, 'LocationType/', arco-fn:urify(normalize-space(./TCL)))" />
                                </xsl:attribute>
								<rdf:type
									rdf:resource="https://w3id.org/arco/ontology/location/LocationType" />
								<rdfs:label>
									<xsl:value-of select="normalize-space(./TCL)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./TCL)" />
								</l0:name>
							</rdf:Description>
						</xsl:when>
					</xsl:choose>
				</xsl:if>
				<!-- Monumental Area as individual in the scope of the Site of LA -->
				<xsl:if
					test="./PRC/PRCC and not(lower-case(normalize-space(./PRC/PRCC))='nr' or lower-case(normalize-space(./PRC/PRCC))='n.r.' or lower-case(normalize-space(./PRC/PRCC))='nr (recupero pregresso)')">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:value-of
							select="concat($NS, 'MonumentalArea/', arco-fn:urify(normalize-space(./PRC/PRCC)))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'http://dati.beniculturali.it/cis/MonumentalArea'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./PRC/PRCC)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of select="normalize-space(./PRC/PRCC)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- Time Interval for Alternative Location and shot location (F) -->
				<xsl:if
					test="./PRD and (not(starts-with(lower-case(normalize-space(./PRD)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRD)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:value-of
							select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./PRD)))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/italia/onto/TI/TimeInterval'" />
                            </xsl:attribute>
						</rdf:type>
						<xsl:if
							test="PRD/PRDI and (not(starts-with(lower-case(normalize-space(./PRD/PRDI)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRD/PRDI)), 'n.r')))">
							<arco-arco:startTime>
								<xsl:value-of select="normalize-space(./PRD/PRDI)" />
							</arco-arco:startTime>
						</xsl:if>
						<xsl:if
							test="PRD/PRDU and (not(starts-with(lower-case(normalize-space(./PRD/PRDU)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRD/PRDU)), 'n.r')))">
							<arco-arco:endTime>
								<xsl:value-of select="normalize-space(./PRD/PRDU)" />
							</arco-arco:endTime>
						</xsl:if>
					</rdf:Description>
				</xsl:if>
			</xsl:for-each>
			<xsl:for-each select="record/metadata/schede/*/LA">
				<xsl:choose>
					<xsl:when test="./PRC/*">
						<xsl:variable name="site">
							<xsl:choose>
								<xsl:when
									test="./PRV/PRVS and not(lower-case(normalize-space(./PRV/PRVS))='italia')">
									<xsl:value-of
										select="concat($NS, 'Site/', arco-fn:arcofy(concat(normalize-space(./PRV/PRVS), normalize-space(./PRV/PRVS))))" />
								</xsl:when>
								<xsl:otherwise>
									<xsl:choose>
										<xsl:when test="./PRC/PRCK">
											<xsl:value-of
												select="concat($NS, 'Site/', arco-fn:arcofy(concat(normalize-space(lower-case(./PRV/PRVP)), normalize-space(lower-case(./PRV/PRVC)), normalize-space(lower-case(./PRV/PRVF)), normalize-space(lower-case(./PRV/PRVL)), normalize-space(lower-case(./PRC/PRCU)), normalize-space(lower-case(./PRC/PRCK)), normalize-space(lower-case(./PRC/PRCT)))))" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of
												select="concat($NS, 'Site/', arco-fn:arcofy(concat(normalize-space(lower-case(./PRV/PRVP)), normalize-space(lower-case(./PRV/PRVC)), normalize-space(lower-case(./PRV/PRVF)), normalize-space(lower-case(./PRV/PRVL)), normalize-space(lower-case(./PRC/PRCU)), normalize-space(lower-case(./PRC/PRCD)), normalize-space(lower-case(./PRC/PRCN)), normalize-space(lower-case(./PRC/PRCT)))))" />
										</xsl:otherwise>
									</xsl:choose>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                                    <xsl:value-of
								select="concat($NS, 'TimeIndexedTypedLocation/', $itemURI, '-alternative-', position())" />
                                </xsl:attribute>
							<arco-location:atSite>
								<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
									select="$site" />
                                    </xsl:attribute>
							</arco-location:atSite>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                                    <xsl:value-of
								select="$site" />
                                </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
									select="'http://dati.beniculturali.it/cis/Site'" />
                                    </xsl:attribute>
							</rdf:type>
							<xsl:choose>
								<!-- Denominazione contenitore fisico in 4.00 -->
								<xsl:when test="./PRC/PRCN">
									<rdfs:label>
										<xsl:value-of
											select="normalize-space(./PRC/PRCN)" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of
											select="normalize-space(./PRC/PRCN)" />
									</l0:name>
								</xsl:when>
								<!-- Denominazione contenitore fisico in normative precedenti a 4.00 -->
								<xsl:when test="./PRC/PRCD">
									<rdfs:label>
										<xsl:value-of
											select="normalize-space(./PRC/PRCD)" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of
											select="normalize-space(./PRC/PRCD)" />
									</l0:name>
								</xsl:when>
								<xsl:when test="./PRC/PRCM">
									<rdfs:label>
										<xsl:value-of
											select="concat('Contenitore fisico di: ', normalize-space(./PRC/PRCM))" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of
											select="concat('Contenitore fisico di: ', normalize-space(./PRC/PRCM))" />
									</l0:name>
								</xsl:when>
								<xsl:otherwise>
									<rdfs:label xml:lang="it">Contenitore fisico</rdfs:label>
									<l0:name xml:lang="it">Contenitore fisico</l0:name>
									<rdfs:label xml:lang="en">Site</rdfs:label>
									<l0:name xml:lang="en">Site</l0:name>
								</xsl:otherwise>
							</xsl:choose>
							<xsl:if test="./PRV/*">
								<cis:siteAddress>
									<xsl:attribute name="rdf:resource">
                                       <xsl:choose>
											<xsl:when
										test="./PRV/PRVS and not(lower-case(normalize-space(./PRV/PRVS))='italia')">
												<xsl:value-of
										select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(./PRV/PRVS)), normalize-space(lower-case(./PRV/PRVE)))))" />
											</xsl:when>
											<xsl:otherwise>
												<xsl:choose>
													<xsl:when
										test="./PRC/PRCU and not(./PRC/PRCU='.' or ./PRC/PRCU='-' or ./PRC/PRCU='/')">
														<xsl:value-of
										select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(./PRV/PRVP)), normalize-space(lower-case(./PRV/PRVC)), normalize-space(lower-case(./PRV/PRVF)), normalize-space(lower-case(./PRV/PRVL)), normalize-space(lower-case(./PRC/PRCU)))))" />
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of
										select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(./PRV/PRVP)), normalize-space(lower-case(./PRV/PRVC)), normalize-space(lower-case(./PRV/PRVF)), normalize-space(lower-case(./PRV/PRVL)), normalize-space(lower-case(./PRL/PRLT)))))" />
													</xsl:otherwise>
												</xsl:choose>
											</xsl:otherwise>
									</xsl:choose>
                                        </xsl:attribute>
								</cis:siteAddress>
							</xsl:if>
							<xsl:if
								test="./PRC/PRCF and (not(starts-with(lower-case(normalize-space(./PRC/PRCF)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRC/PRCF)), 'n.r')))">
								<arco-cd:hasUseFunction>
									<xsl:attribute name="rdf:resource">
											<xsl:value-of
										select="concat($NS, 'UseFunction/', arco-fn:urify(normalize-space(./PRC/PRCF)))" />
										</xsl:attribute>
								</arco-cd:hasUseFunction>
							</xsl:if>
							<xsl:if
								test="./PRC/PRCK and (not(starts-with(lower-case(normalize-space(./PRC/PRCK)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRC/PRCK)), 'n.r')))">
								<arco-location:siteIdentifier>
									<xsl:value-of select="normalize-space(./PRC/PRCK)" />
								</arco-location:siteIdentifier>
							</xsl:if>
							<xsl:if test="./PRC/PRCM">
								<cis:isSiteOf>
									<xsl:attribute name="rdf:resource">
                                       <xsl:choose>
										<xsl:when
										test="./PRV/PRVS and not(lower-case(normalize-space(./PRV/PRVS))='italia')">
											<xsl:value-of
										select="concat($NS, 'CulturalInstituteOrSite/', arco-fn:arcofy(concat(normalize-space(./PRV/PRVS), normalize-space(./PRV/PRVE))))" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of
										select="concat($NS, 'CulturalInstituteOrSite/', arco-fn:arcofy(concat(normalize-space(lower-case(./PRV/PRVP)), normalize-space(lower-case(./PRV/PRVC)), normalize-space(lower-case(./PRV/PRVF)), normalize-space(lower-case(./PRV/PRVL)), normalize-space(lower-case(./PRC/PRCU)), normalize-space(lower-case(./PRC/PRCM)))))" />
										</xsl:otherwise>
									</xsl:choose>
                                   </xsl:attribute>
								</cis:isSiteOf>
							</xsl:if>
							<xsl:if
								test="./PRC/PRCC and not(lower-case(normalize-space(./PRC/PRCC))='nr' or lower-case(normalize-space(./PRC/PRCC))='n.r.' or lower-case(normalize-space(./PRC/PRCC))='nr (recupero pregresso)')">
								<cis:isPartOf>
									<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
										select="concat($NS, 'MonumentalArea/', arco-fn:urify(normalize-space(./PRC/PRCC)))" />
                                        </xsl:attribute>
								</cis:isPartOf>
							</xsl:if>
							<xsl:if
								test="./PRT/PRTK and (not(starts-with(lower-case(normalize-space(./PRT/PRTK)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRT/PRTK)), 'n.r')))">
								<arco-location:hasContinent>
									<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
										select="concat($NS, 'Continent/', arco-fn:urify(normalize-space(./PRT/PRTK)))" />
                                        </xsl:attribute>
								</arco-location:hasContinent>
							</xsl:if>
							<!-- Site Type -->
							<xsl:if
								test="./PRC/PRCT and not(normalize-space(./PRC/PRCT)='.') and (not(starts-with(lower-case(normalize-space(./PRC/PRCT)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRC/PRCT)), 'n.r')))">
								<arco-location:hasSiteType>
									<xsl:attribute name="rdf:resource">
                                            <xsl:choose>
                                                <xsl:when
										test="./PRC/PRCQ">
                                                    <xsl:value-of
										select="concat($NS, 'SiteType/', arco-fn:urify(normalize-space(./PRC/PRCT)), '-', arco-fn:urify(normalize-space(./PRC/PRCQ)))" />
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <xsl:value-of
										select="concat($NS, 'SiteType/', arco-fn:urify(normalize-space(./PRC/PRCT)))" />
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </xsl:attribute>
								</arco-location:hasSiteType>
							</xsl:if>
						</rdf:Description>
						<!-- site use function as an individual -->
						<xsl:if
							test="./PRC/PRCF and (not(starts-with(lower-case(normalize-space(./PRC/PRCF)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRC/PRCF)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
												<xsl:value-of
									select="concat($NS, 'UseFunction/', arco-fn:urify(normalize-space(./PRC/PRCF)))" />
											</xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
		                                        <xsl:value-of
										select="'https://w3id.org/arco/ontology/context-description/UseFunction'" />
		                                    </xsl:attribute>
								</rdf:type>
								<l0:name>
									<xsl:value-of select="normalize-space(./PRC/PRCF)" />
								</l0:name>
								<rdfs:label>
									<xsl:value-of select="normalize-space(./PRC/PRCF)" />
								</rdfs:label>
								<arco-cd:useFunction>
									<xsl:value-of select="normalize-space(./PRC/PRCF)" />
								</arco-cd:useFunction>
							</rdf:Description>
						</xsl:if>
						<!-- PRCM cultural institute or site as an individual -->
						<xsl:if test="./PRC/PRCM">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                       <xsl:choose>
										<xsl:when
									test="./PRV/PRVS and not(lower-case(normalize-space(./PRV/PRVS))='italia')">
											<xsl:value-of
									select="concat($NS, 'CulturalInstituteOrSite/', arco-fn:arcofy(concat(normalize-space(./PRV/PRVS), normalize-space(./PRV/PRVE))))" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of
									select="concat($NS, 'CulturalInstituteOrSite/', arco-fn:arcofy(concat(normalize-space(lower-case(./PRV/PRVP)), normalize-space(lower-case(./PRV/PRVC)), normalize-space(lower-case(./PRV/PRVF)), normalize-space(lower-case(./PRV/PRVL)), normalize-space(lower-case(./PRC/PRCU)), normalize-space(lower-case(./PRC/PRCM)))))" />
										</xsl:otherwise>
									</xsl:choose>
                                </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
										select="'http://dati.beniculturali.it/cis/CulturalInstituteOrSite'" />
                                        </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(./PRC/PRCM)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./PRC/PRCM)" />
								</l0:name>
								<cis:hasCISNameInTime>
									<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
										select="concat($NS, 'CISNameInTime/', arco-fn:urify(normalize-space(./PRC/PRCM)))" />
                                        </xsl:attribute>
								</cis:hasCISNameInTime>
								<cis:hasSite>
									<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
										select="$site" />
                                        </xsl:attribute>
								</cis:hasSite>
							</rdf:Description>
							<!-- Name in time of CIS -->
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                        <xsl:value-of
									select="concat($NS, 'CISNameInTime/', arco-fn:urify(normalize-space(./PRC/PRCM)))" />
                                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
										select="'http://dati.beniculturali.it/cis/CISNameInTime'" />
                                        </xsl:attribute>
								</rdf:type>
								<cis:institutionalCISName>
									<xsl:value-of select="normalize-space(./PRC/PRCM)" />
								</cis:institutionalCISName>
							</rdf:Description>
						</xsl:if>
						<!-- Site Type as an individual -->
						<xsl:if
							test="./PRC/PRCT and not(normalize-space(./PRC/PRCT)='.') and (not(starts-with(lower-case(normalize-space(./PRC/PRCT)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRC/PRCT)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                    <!-- tolto $itemURI dalle URI -->
                                        <xsl:choose>
                                            <xsl:when
									test="./PRC/PRCQ">
                                                <xsl:value-of
									select="concat($NS, 'SiteType/', arco-fn:urify(normalize-space(./PRC/PRCT)), '-', arco-fn:urify(normalize-space(./PRC/PRCQ)))" />
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:value-of
									select="concat($NS, 'SiteType/', arco-fn:urify(normalize-space(./PRC/PRCT)))" />
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
										select="'https://w3id.org/arco/ontology/location/SiteType'" />
                                        </xsl:attribute>
								</rdf:type>
								<rdfs:label xml:lang="it">
									<xsl:choose>
										<xsl:when test="./PRC/PRCQ">
											<xsl:value-of
												select="concat('Tipo di contenitore fisico: ', normalize-space(./PRC/PRCT), ' ', normalize-space(./PRC/PRCQ))" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of
												select="concat('Tipo di contenitore fisico: ', normalize-space(./PRC/PRCT))" />
										</xsl:otherwise>
									</xsl:choose>
								</rdfs:label>
								<l0:name xml:lang="it">
									<xsl:choose>
										<xsl:when test="./PRC/PRCQ">
											<xsl:value-of
												select="concat('Tipo di contenitore fisico: ', normalize-space(./PRC/PRCT), ' ', normalize-space(./PRC/PRCQ))" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of
												select="concat('Tipo di contenitore fisico: ', normalize-space(./PRC/PRCT))" />
										</xsl:otherwise>
									</xsl:choose>
								</l0:name>
								<rdfs:label xml:lang="en">
									<xsl:choose>
										<xsl:when test="./PRC/PRCQ">
											<xsl:value-of
												select="concat('Site type: ', normalize-space(./PRC/PRCT), ' ', normalize-space(./PRC/PRCQ))" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of
												select="concat('Site type: ', normalize-space(./PRC/PRCT))" />
										</xsl:otherwise>
									</xsl:choose>
								</rdfs:label>
								<l0:name xml:lang="en">
									<xsl:choose>
										<xsl:when test="./PRC/PRCQ">
											<xsl:value-of
												select="concat('Site type: ', normalize-space(./PRC/PRCT), ' ', normalize-space(./PRC/PRCQ))" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of
												select="concat('Site type: ', normalize-space(./PRC/PRCT))" />
										</xsl:otherwise>
									</xsl:choose>
								</l0:name>
								<xsl:if
									test="./PRC/PRCT and (not(starts-with(lower-case(normalize-space(./PRC/PRCT)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRC/PRCT)), 'n.r')))">
									<arco-location:hasSiteDefinition>
										<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
											select="concat($NS,'SiteDefinition/', arco-fn:urify(normalize-space(./PRC/PRCT)))" />
                                        </xsl:attribute>
									</arco-location:hasSiteDefinition>
								</xsl:if>
								<xsl:if
									test="./PRC/PRCQ and (not(starts-with(lower-case(normalize-space(./PRC/PRCQ)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRC/PRCQ)), 'n.r')))">
									<arco-location:hasSiteSpecification>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="concat($NS,'SiteSpecification/', arco-fn:urify(normalize-space(./PRC/PRCQ)))" />
                                            </xsl:attribute>
									</arco-location:hasSiteSpecification>
								</xsl:if>
							</rdf:Description>
						</xsl:if>
						<!-- Site Definition as an individual -->
						<xsl:if
							test="./PRC/PRCT and (not(starts-with(lower-case(normalize-space(./PRC/PRCT)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRC/PRCT)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                        <xsl:value-of
									select="concat($NS,'SiteDefinition/', arco-fn:urify(normalize-space(./PRC/PRCT)))" />
                                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
										select="'https://w3id.org/arco/ontology/location/SiteDefinition'" />
                                        </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(./PRC/PRCT)" />
								</rdfs:label>
							</rdf:Description>
						</xsl:if>
						<!-- Site Specification as an individual -->
						<xsl:if
							test="./PRC/PRCQ and (not(starts-with(lower-case(normalize-space(./PRC/PRCQ)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRC/PRCQ)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                        <xsl:value-of
									select="concat($NS,'SiteSpecification/', arco-fn:urify(normalize-space(./PRC/PRCQ)))" />
                                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
										select="'https://w3id.org/arco/ontology/location/SiteSpecification'" />
                                        </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(./PRC/PRCQ)" />
								</rdfs:label>
							</rdf:Description>
						</xsl:if>
						<!-- Continent as individual -->
						<xsl:if
							test="./PRT/PRTK and (not(starts-with(lower-case(normalize-space(./PRT/PRTK)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRT/PRTK)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                        <xsl:value-of
									select="concat($NS, 'Continent/', arco-fn:urify(normalize-space(./PRT/PRTK)))" />
                                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
										select="'https://w3id.org/arco/ontology/location/Continent'" />
                                        </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(./PRT/PRTK)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./PRT/PRTK)" />
								</l0:name>
							</rdf:Description>
						</xsl:if>
						<!-- Address as an individual -->
						<xsl:if test="./PRV/*">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                    	<xsl:choose>
											<xsl:when
									test="./PRV/PRVS and not(lower-case(normalize-space(./PRV/PRVS))='italia')">
												<xsl:value-of
									select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(./PRV/PRVS)), normalize-space(lower-case(./PRV/PRVE)))))" />
											</xsl:when>
											<xsl:otherwise>
												<xsl:choose>
													<xsl:when
									test="./PRC/PRCU and not(./PRC/PRCU='.' or ./PRC/PRCU='-' or ./PRC/PRCU='/')">
														<xsl:value-of
									select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(./PRV/PRVP)), normalize-space(lower-case(./PRV/PRVC)), normalize-space(lower-case(./PRV/PRVF)), normalize-space(lower-case(./PRV/PRVL)), normalize-space(lower-case(./PRC/PRCU)))))" />
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of
									select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(./PRV/PRVP)), normalize-space(lower-case(./PRV/PRVC)), normalize-space(lower-case(./PRV/PRVF)), normalize-space(lower-case(./PRV/PRVL)), normalize-space(lower-case(./PRL/PRLT)))))" />
													</xsl:otherwise>
												</xsl:choose>
											</xsl:otherwise>
									</xsl:choose>
                                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
										select="'https://w3id.org/italia/onto/CLV/Address'" />
                                        </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:for-each select="./PRV/*">
										<xsl:choose>
											<xsl:when test="position() = 1">
												<xsl:value-of select="./text()" />
											</xsl:when>
											<xsl:otherwise>
												<xsl:value-of select="concat(', ', ./text())" />
											</xsl:otherwise>
										</xsl:choose>
										<!-- xsl:value-of select="normalize-space(record/metadata/schede/*/OG/OGD)" 
											/ -->
									</xsl:for-each>
									<xsl:for-each select="./PRL/*">
										<xsl:value-of select="concat(', ', ./text())" />
									</xsl:for-each>
								</rdfs:label>
								<!-- ToponymInTime associated with record/metadata/schede/*/LA -->
								<xsl:if test="./PRL">
									<arco-location:hasToponymInTime>
										<xsl:attribute name="rdf:resource">
                                                <xsl:choose>
                                                    <xsl:when
											test="./PRL/PRLT">
                                                        <xsl:value-of
											select="concat($NS, 'ToponymInTime/', arco-fn:urify(normalize-space(./PRL/PRLT)))" />
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <xsl:value-of
											select="concat($NS, 'ToponymInTime/', arco-fn:urify(normalize-space(./PRL)))" />
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:attribute>
									</arco-location:hasToponymInTime>
								</xsl:if>
								<xsl:if
									test="./PRC/PRCU and not(./PRC/PRCU='.' or ./PRC/PRCU='-' or ./PRC/PRCU='/') and (not(starts-with(lower-case(normalize-space(./PRC/PRCU)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRC/PRCU)), 'n.r')))">
									<clvapit:fullAddress>
										<xsl:value-of
											select="normalize-space(./PRC/PRCU)" />
									</clvapit:fullAddress>
								</xsl:if>
								<!-- Stato -->
								<xsl:if
									test="./PRV/PRVS and (not(starts-with(lower-case(normalize-space(./PRV/PRVS)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVS)), 'n.r')))">
									<clvapit:hasCountry>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="concat($NS, 'Country/', arco-fn:urify(./PRV/PRVS))" />
                                            </xsl:attribute>
									</clvapit:hasCountry>
								</xsl:if>
								<!-- Regione -->
								<xsl:if
									test="./PRV/PRVR and (not(starts-with(lower-case(normalize-space(./PRV/PRVR)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVR)), 'n.r')))">
									<clvapit:hasRegion>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="concat($NS, 'Region/', arco-fn:urify(./PRV/PRVR))" />
                                            </xsl:attribute>
									</clvapit:hasRegion>
								</xsl:if>
								<!-- Provincia -->
								<xsl:if
									test="./PRV/PRVP and (not(starts-with(lower-case(normalize-space(./PRV/PRVP)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVP)), 'n.r')))">
									<clvapit:hasProvince>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="concat($NS, 'Province/', arco-fn:urify(./PRV/PRVP))" />
                                            </xsl:attribute>
									</clvapit:hasProvince>
								</xsl:if>
								<!-- Comune -->
								<xsl:if
									test="./PRV/PRVC and (not(starts-with(lower-case(normalize-space(./PRV/PRVC)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVC)), 'n.r')))">
									<clvapit:hasCity>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="concat($NS, 'City/', arco-fn:urify(./PRV/PRVC))" />
                                            </xsl:attribute>
									</clvapit:hasCity>
								</xsl:if>
								<!-- Località -->
								<xsl:if
									test="./PRV/PRVL and (not(starts-with(lower-case(normalize-space(./PRV/PRVL)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVL)), 'n.r')))">
									<clvapit:hasAddressArea>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="concat($NS, 'AddressArea/', arco-fn:urify(./PRV/PRVL))" />
                                            </xsl:attribute>
									</clvapit:hasAddressArea>
								</xsl:if>
								<xsl:if
									test="./PRT/PRTL and (not(starts-with(lower-case(normalize-space(./PRT/PRTL)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRT/PRTL)), 'n.r')))">
									<clvapit:hasAddressArea>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="concat($NS, 'AddressArea/', arco-fn:urify(./PRT/PRTL))" />
                                            </xsl:attribute>
									</clvapit:hasAddressArea>
								</xsl:if>
								<xsl:if
									test="./PRV/PRVE and (not(starts-with(lower-case(normalize-space(./PRV/PRVE)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVE)), 'n.r')))">
									<clvapit:hasAddressArea>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="concat($NS, 'AddressArea/', arco-fn:urify(./PRV/PRVE))" />
                                            </xsl:attribute>
									</clvapit:hasAddressArea>
								</xsl:if>
								<!-- Test per ClericalAdministrativeArea -->
								<xsl:if test="./PRE">
									<arco-location:hasClericalAdministrativeArea>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="concat($NS, 'ClericalAdministrativeArea/', arco-fn:urify(./PRE))" />
                                            </xsl:attribute>
									</arco-location:hasClericalAdministrativeArea>
								</xsl:if>
							</rdf:Description>

							<!-- Clerical Administrative Area : if any exists -->
							<xsl:if test="./PRE">
								<rdf:Description>
									<xsl:attribute name="rdf:about">
											<xsl:value-of
										select="concat($NS, 'ClericalAdministrativeArea/', arco-fn:urify(./PRE))" />
                                        </xsl:attribute>
									<rdfs:label>
										<xsl:value-of select="normalize-space(./PRE)" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of select="normalize-space(./PRE)" />
									</l0:name>
									<rdf:type
										rdf:resource="http://dati.beniculturali.it/cis/ClericalAdministrativeArea" />
								</rdf:Description>
							</xsl:if>

							<!-- Country -->
							<xsl:if
								test="./PRV/PRVS and (not(starts-with(lower-case(normalize-space(./PRV/PRVS)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVS)), 'n.r')))">
								<rdf:Description>
									<xsl:attribute name="rdf:about">
                                            <xsl:value-of
										select="concat($NS, 'Country/', arco-fn:urify(./PRV/PRVS))" />
                                        </xsl:attribute>
									<rdf:type>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="'https://w3id.org/italia/onto/CLV/Country'" />
                                            </xsl:attribute>
									</rdf:type>
									<rdfs:label>
										<xsl:value-of
											select="normalize-space(./PRV/PRVS)" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of
											select="normalize-space(./PRV/PRVS)" />
									</l0:name>
								</rdf:Description>
							</xsl:if>
							<!-- Regione -->
							<xsl:if
								test="./PRV/PRVR and (not(starts-with(lower-case(normalize-space(./PRV/PRVR)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVR)), 'n.r')))">
								<rdf:Description>
									<xsl:attribute name="rdf:about">
                                            <xsl:value-of
										select="concat($NS, 'Region/', arco-fn:urify(./PRV/PRVR))" />
                                        </xsl:attribute>
									<rdf:type>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="'https://w3id.org/italia/onto/CLV/Region'" />
                                            </xsl:attribute>
									</rdf:type>
									<rdfs:label>
										<xsl:call-template name="CamelCase">
											<xsl:with-param name="text"
												select="normalize-space(./PRV/PRVR)" />
										</xsl:call-template>

									</rdfs:label>
									<l0:name>
										<xsl:call-template name="CamelCase">
											<xsl:with-param name="text"
												select="normalize-space(./PRV/PRVR)" />
										</xsl:call-template>

									</l0:name>
								</rdf:Description>
							</xsl:if>
							<!-- Provincia -->
							<xsl:if
								test="./PRV/PRVP and (not(starts-with(lower-case(normalize-space(./PRV/PRVP)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVP)), 'n.r')))">
								<rdf:Description>
									<xsl:attribute name="rdf:about">
                                            <xsl:value-of
										select="concat($NS, 'Region/', arco-fn:urify(./PRV/PRVP))" />
                                        </xsl:attribute>
									<rdf:type>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="'https://w3id.org/italia/onto/CLV/Province'" />
                                            </xsl:attribute>
									</rdf:type>
									<rdfs:label>
										<xsl:value-of
											select="normalize-space(./PRV/PRVP)" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of
											select="normalize-space(./PRV/PRVP)" />
									</l0:name>
								</rdf:Description>
							</xsl:if>
							<!-- Comune -->
							<xsl:if
								test="./PRV/PRVC and (not(starts-with(lower-case(normalize-space(./PRV/PRVC)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVC)), 'n.r')))">
								<rdf:Description>
									<xsl:attribute name="rdf:about">
                                            <xsl:value-of
										select="concat($NS, 'City/', arco-fn:urify(./PRV/PRVC))" />
                                        </xsl:attribute>
									<rdf:type>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="'https://w3id.org/italia/onto/CLV/City'" />
                                            </xsl:attribute>
									</rdf:type>
									<rdfs:label>
										<xsl:call-template name="CamelCase">
											<xsl:with-param name="text"
												select="normalize-space(./PRV/PRVC)" />
										</xsl:call-template>

									</rdfs:label>
									<l0:name>
										<xsl:call-template name="CamelCase">
											<xsl:with-param name="text"
												select="normalize-space(./PRV/PRVC)" />
										</xsl:call-template>

									</l0:name>
								</rdf:Description>
							</xsl:if>
							<!-- Località -->
							<xsl:if
								test="./PRV/PRVL and (not(starts-with(lower-case(normalize-space(./PRV/PRVL)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVL)), 'n.r')))">
								<rdf:Description>
									<xsl:attribute name="rdf:about">
                                            <xsl:value-of
										select="concat($NS, 'AddressArea/', arco-fn:urify(./PRV/PRVL))" />
                                        </xsl:attribute>
									<rdf:type>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="'https://w3id.org/italia/onto/CLV/AddressArea'" />
                                            </xsl:attribute>
									</rdf:type>
									<rdfs:label>
										<xsl:value-of
											select="normalize-space(./PRV/PRVL)" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of
											select="normalize-space(./PRV/PRVL)" />
									</l0:name>
								</rdf:Description>
							</xsl:if>
							<xsl:if
								test="./PRT/PRTL and (not(starts-with(lower-case(normalize-space(./PRT/PRTL)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRT/PRTL)), 'n.r')))">
								<rdf:Description>
									<xsl:attribute name="rdf:about">
                                            <xsl:value-of
										select="concat($NS, 'AddressArea/', arco-fn:urify(./PRT/PRTL))" />
                                        </xsl:attribute>
									<rdf:type>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="'https://w3id.org/italia/onto/CLV/AddressArea'" />
                                            </xsl:attribute>
									</rdf:type>
									<rdfs:label>
										<xsl:value-of
											select="normalize-space(./PRT/PRTL)" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of
											select="normalize-space(./PRT/PRTL)" />
									</l0:name>
								</rdf:Description>
							</xsl:if>
							<xsl:if
								test="./PRV/PRVE and (not(starts-with(lower-case(normalize-space(./PRV/PRVE)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVE)), 'n.r')))">
								<rdf:Description>
									<xsl:attribute name="rdf:about">
                                            <xsl:value-of
										select="concat($NS, 'AddressArea/', arco-fn:urify(./PRV/PRVE))" />
                                        </xsl:attribute>
									<rdf:type>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="'https://w3id.org/italia/onto/CLV/AddressArea'" />
                                            </xsl:attribute>
									</rdf:type>
									<rdfs:label>
										<xsl:value-of
											select="normalize-space(./PRV/PRVE)" />
									</rdfs:label>
									<l0:name>
										<xsl:value-of
											select="normalize-space(./PRV/PRVE)" />
									</l0:name>
								</rdf:Description>
							</xsl:if>
						</xsl:if>
						<!-- Toponym in Time as individual -->
						<xsl:if test="./PRL">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                        <xsl:choose>
                                            <xsl:when
									test="./PRL/PRLT">
                                                <xsl:value-of
									select="concat($NS, 'ToponymInTime/', arco-fn:urify(normalize-space(./PRL/PRLT)))" />
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:value-of
									select="concat($NS, 'ToponymInTime/', arco-fn:urify(normalize-space(./PRL)))" />
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
										select="'https://w3id.org/arco/ontology/location/ToponymInTime'" />
                                        </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:choose>
										<xsl:when test="./PRL/PRLT">
											<xsl:value-of
												select="normalize-space(./PRL/PRLT)" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of select="normalize-space(./PRL)" />
										</xsl:otherwise>
									</xsl:choose>
								</rdfs:label>
								<l0:name>
									<xsl:choose>
										<xsl:when test="./PRL/PRLT">
											<xsl:value-of
												select="normalize-space(./PRL/PRLT)" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of select="normalize-space(./PRL)" />
										</xsl:otherwise>
									</xsl:choose>
								</l0:name>
								<xsl:if test="./PRL/PRLR">
									<tiapit:atTime>
										<xsl:attribute name="rdf:resource">
                         		   		    <xsl:value-of select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(./PRL/PRLR)))" />
                            			</xsl:attribute>
									</tiapit:atTime>
								</xsl:if>
								<xsl:if test="./PRL/PRLS">
									<arco-core:note>
										<xsl:value-of select="normalize-space(./PRL/PRLS)" />
									</arco-core:note>
								</xsl:if>
							</rdf:Description>
						</xsl:if>
						<!-- Toponym in Time as individual -->
						<xsl:if test="./PRV/PRVF">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                                <xsl:value-of
									select="concat($NS, 'ToponymInTime/', arco-fn:urify(normalize-space(./PRV/PRVF)))" />
                                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
										select="'https://w3id.org/arco/ontology/location/ToponymInTime'" />
                                        </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:call-template name="CamelCase">
										<xsl:with-param name="text"
											select="normalize-space(./PRV/PRVF)" />
									</xsl:call-template>

								</rdfs:label>
								<l0:name>
									<xsl:call-template name="CamelCase">
										<xsl:with-param name="text"
											select="normalize-space(./PRV/PRVF)" />
									</xsl:call-template>

								</l0:name>
							</rdf:Description>
						</xsl:if>
						<!-- rdf:Description> <xsl:attribute name="rdf:about"> <xsl:value-of 
							select="concat($NS, 'TimeIndexedTypedLocation/', $itemURI, '-current')" /> 
							</xsl:attribute> <arco-location:atSite> <xsl:attribute name="rdf:resource"> 
							<xsl:value-of select="$site" /> </xsl:attribute> </arco-location:atSite> 
							</rdf:Description -->
						<!-- rdf:Description> <xsl:attribute name="rdf:about"> <xsl:value-of 
							select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), 
							'/', $itemURI)" /> </xsl:attribute> <arco-location:isInSite> <xsl:attribute 
							name="rdf:resource"> <xsl:value-of select="$site" /> </xsl:attribute> </arco-location:isInSite> 
							</rdf:Description -->
						<!-- Cultural Institute or Site -->
					</xsl:when>
					<xsl:otherwise>
						<xsl:variable name="location">
							<xsl:if test="./PRV">
								<xsl:value-of
									select="concat($NS, 'Feature/', arco-fn:arcofy(normalize-space(./PRV)))" />
							</xsl:if>
						</xsl:variable>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                                    <xsl:value-of
								select="concat($NS, 'TimeIndexedTypedLocation/', $itemURI, '-alternative-', position())" />
                                </xsl:attribute>
							<arco-location:atLocation>
								<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
									select="$location" />
                                    </xsl:attribute>
							</arco-location:atLocation>
						</rdf:Description>
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                                    <xsl:value-of
								select="$location" />
                                </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
									select="'https://w3id.org/italia/onto/CLV/Feature'" />
                                    </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:if test="./PRV">
									<xsl:value-of select="normalize-space(./PRV)" />
								</xsl:if>
							</rdfs:label>
							<xsl:if test="./PRV/*">
								<clvapit:hasAddress>
									<xsl:attribute name="rdf:resource">
                                        	<xsl:choose>
												<xsl:when test="./PRV/PRVS and not(lower-case(normalize-space(./PRV/PRVS))='italia')">
													<xsl:value-of select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(./PRV/PRVS)), normalize-space(lower-case(./PRV/PRVE)))))" />
												</xsl:when>
												<xsl:otherwise>
													<xsl:choose>
														<xsl:when test="./PRV/PRVG and not(./PRV/PRVG='.' or ./PRV/PRVG='-' or ./PRV/PRVG='/')">
															<xsl:value-of select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(./PRV/PRVG)), normalize-space(lower-case(./PRV/PRVA)), normalize-space(lower-case(./PRV/PRVR)), normalize-space(lower-case(./PRV/PRVP)), normalize-space(lower-case(./PRV/PRVC)), normalize-space(lower-case(./PRV/PRVF)), normalize-space(lower-case(./PRV/PRVL)), normalize-space(lower-case(./PRC/PRCU)))))" />
														</xsl:when>
														<xsl:when test="./PRC/PRCU and not(./PRC/PRCU='.' or ./PRC/PRCU='-' or ./PRC/PRCU='/')">
															<xsl:value-of select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(./PRV/PRVP)), normalize-space(lower-case(./PRV/PRVC)), normalize-space(lower-case(./PRV/PRVF)), normalize-space(lower-case(./PRV/PRVL)), normalize-space(lower-case(./PRC/PRCU)))))" />
														</xsl:when>
														<xsl:otherwise>
															<xsl:value-of select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(./PRV/PRVP)), normalize-space(lower-case(./PRV/PRVC)), normalize-space(lower-case(./PRV/PRVF)), normalize-space(lower-case(./PRV/PRVL)), normalize-space(lower-case(./PRL/PRLT)))))" />
														</xsl:otherwise>
													</xsl:choose>
												</xsl:otherwise>
											</xsl:choose>
                                        </xsl:attribute>
								</clvapit:hasAddress>
							</xsl:if>
							<xsl:if
								test="./PRT/PRTK and (not(starts-with(lower-case(normalize-space(./PRT/PRTK)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRT/PRTK)), 'n.r')))">
								<arco-location:hasContinent>
									<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
										select="concat($NS, 'Continent/', arco-fn:arcofy(normalize-space(./PRT/PRTK)))" />
                                        </xsl:attribute>
								</arco-location:hasContinent>
							</xsl:if>
							<xsl:if test="./PRL">
								<arco-location:hasToponymInTime>
									<xsl:attribute name="rdf:resource">
                                                <xsl:choose>
                                                    <xsl:when
										test="./PRL/PRLT">
                                                        <xsl:value-of
										select="concat($NS, 'ToponymInTime/', arco-fn:urify(normalize-space(./PRL/PRLT)))" />
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <xsl:value-of
										select="concat($NS, 'ToponymInTime/', arco-fn:urify(normalize-space(./PRL)))" />
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:attribute>
								</arco-location:hasToponymInTime>
							</xsl:if>
							<xsl:if test="./PRVF">
								<arco-location:hasToponymInTime>
									<xsl:attribute name="rdf:resource">
                                                        <xsl:value-of
										select="concat($NS, 'ToponymInTime/', arco-fn:urify(normalize-space(./PRVF)))" />
                                            </xsl:attribute>
								</arco-location:hasToponymInTime>
							</xsl:if>
						</rdf:Description>
						<!-- Continent as individual -->
						<xsl:if
							test="./PRT/PRTK and (not(starts-with(lower-case(normalize-space(./PRT/PRTK)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRT/PRTK)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                    <xsl:value-of
									select="concat($NS, 'Continent/', arco-fn:arcofy(normalize-space(./PRT/PRTK)))" />
                                </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
										select="'https://w3id.org/arco/ontology/location/Continent'" />
                                    </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(./PRT/PRTK)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./PRT/PRTK)" />
								</l0:name>
							</rdf:Description>
						</xsl:if>
						<xsl:if test="./PRV/*">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                    	<xsl:choose>
											<xsl:when
									test="./PRV/PRVS and not(lower-case(normalize-space(./PRV/PRVS))='italia')">
												<xsl:value-of
									select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(./PRV/PRVS)), normalize-space(lower-case(./PRV/PRVE)))))" />
											</xsl:when>
											<xsl:otherwise>
												<xsl:choose>
													<xsl:when test="./PRV/PRVG and not(./PRV/PRVG='.' or ./PRV/PRVG='-' or ./PRV/PRVG='/')">
														<xsl:value-of select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(./PRV/PRVG)), normalize-space(lower-case(./PRV/PRVA)), normalize-space(lower-case(./PRV/PRVR)), normalize-space(lower-case(./PRV/PRVP)), normalize-space(lower-case(./PRV/PRVC)), normalize-space(lower-case(./PRV/PRVF)), normalize-space(lower-case(./PRV/PRVL)), normalize-space(lower-case(./PRC/PRCU)))))" />
													</xsl:when>
													<xsl:when test="./PRC/PRCU and not(./PRC/PRCU='.' or ./PRC/PRCU='-' or ./PRC/PRCU='/')">
														<xsl:value-of select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(./PRV/PRVP)), normalize-space(lower-case(./PRV/PRVC)), normalize-space(lower-case(./PRV/PRVF)), normalize-space(lower-case(./PRV/PRVL)), normalize-space(lower-case(./PRC/PRCU)))))" />
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(./PRV/PRVP)), normalize-space(lower-case(./PRV/PRVC)), normalize-space(lower-case(./PRV/PRVF)), normalize-space(lower-case(./PRV/PRVL)), normalize-space(lower-case(./PRL/PRLT)))))" />
													</xsl:otherwise>
												</xsl:choose>
											</xsl:otherwise>
									</xsl:choose>
                                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
										select="'https://w3id.org/italia/onto/CLV/Address'" />
                                        </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:for-each select="./PRV/*">
										<xsl:choose>
											<xsl:when test="position() = 1">
												<xsl:value-of select="./text()" />
											</xsl:when>
											<xsl:otherwise>
												<xsl:value-of select="concat(', ', ./text())" />
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</rdfs:label>
								<!-- Address details <xsl:if test="record/metadata/schede/*/LC/PVC/PVCV"> 
									<arco-location:addressDetails> <xsl:value-of select="normalize-space(record/metadata/schede/*/LC/PVC/PVCV)"" 
									/> </arco-location:addressDetails> -->
								<!-- Full Address - per issue github #8 <xsl:if test="record/metadata/schede/*/LC/PVC/PVCI"> 
									<clvapit:fullAddress> <xsl:value-of select="normalize-space(record/metadata/schede/*/LC/PVC/PVCI)" 
									/> </clvapit:fullAddress> </xsl:if> <xsl:if test="record/metadata/schede/*/LC/LDC/LDCU"> 
									<clvapit:fullAddress> <xsl:value-of select="normalize-space(record/metadata/schede/*/LC/LDC/LDCU)" 
									/> </clvapit:fullAddress> </xsl:if> -->
								<!-- Stato -->
								<xsl:if
									test="./PRV/PRVS and (not(starts-with(lower-case(normalize-space(./PRV/PRVS)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVS)), 'n.r')))">
									<clvapit:hasCountry>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="concat($NS, 'Country/', arco-fn:urify(./PRV/PRVS))" />
                                            </xsl:attribute>
									</clvapit:hasCountry>
								</xsl:if>
								<!-- Regione -->
								<xsl:if
									test="./PRV/PRVR and (not(starts-with(lower-case(normalize-space(./PRV/PRVR)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVR)), 'n.r')))">
									<clvapit:hasRegion>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="concat($NS, 'Region/', arco-fn:urify(./PRV/PRVR))" />
                                            </xsl:attribute>
									</clvapit:hasRegion>
								</xsl:if>
								<!-- Provincia -->
								<xsl:if
									test="./PRV/PRVP and (not(starts-with(lower-case(normalize-space(./PRV/PRVP)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVP)), 'n.r')))">
									<clvapit:hasProvince>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="concat($NS, 'Province/', arco-fn:urify(./PRV/PRVP))" />
                                            </xsl:attribute>
									</clvapit:hasProvince>
								</xsl:if>
								<!-- Comune -->
								<xsl:if
									test="./PRV/PRVC and (not(starts-with(lower-case(normalize-space(./PRV/PRVC)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVC)), 'n.r')))">
									<clvapit:hasCity>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="concat($NS, 'City/', arco-fn:urify(./PRV/PRVC))" />
                                            </xsl:attribute>
									</clvapit:hasCity>
								</xsl:if>
								<!-- Località -->
								<xsl:if
									test="./PRV/PRVL and (not(starts-with(lower-case(normalize-space(./PRV/PRVL)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVL)), 'n.r')))">
									<clvapit:hasAddressArea>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="concat($NS, 'AddressArea/', arco-fn:urify(./PRV/PRVL))" />
                                            </xsl:attribute>
									</clvapit:hasAddressArea>
								</xsl:if>
								<xsl:if
									test="./PRT/PRTL and (not(starts-with(lower-case(normalize-space(./PRT/PRTL)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRT/PRTL)), 'n.r')))">
									<clvapit:hasAddressArea>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="concat($NS, 'AddressArea/', arco-fn:urify(./PRT/PRTL))" />
                                            </xsl:attribute>
									</clvapit:hasAddressArea>
								</xsl:if>
								<xsl:if
									test="./PRV/PRVE and (not(starts-with(lower-case(normalize-space(./PRV/PRVE)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVE)), 'n.r')))">
									<clvapit:hasAddressArea>
										<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
											select="concat($NS, 'AddressArea/', arco-fn:urify(./PRV/PRVE))" />
                                            </xsl:attribute>
									</clvapit:hasAddressArea>
								</xsl:if>
								<xsl:if
									test="./PRC/PRCU and not(./PRC/PRCU='.' or ./PRC/PRCU='-' or ./PRC/PRCU='/') and (not(starts-with(lower-case(normalize-space(./PRC/PRCU)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRC/PRCU)), 'n.r')))">
									<clvapit:fullAddress>
										<xsl:value-of
											select="normalize-space(./PRC/PRCU)" />
									</clvapit:fullAddress>
								</xsl:if>
							</rdf:Description>
						</xsl:if>
						<!-- Country LA -->
						<xsl:if
							test="./PRV/PRVS and (not(starts-with(lower-case(normalize-space(./PRV/PRVS)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVS)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                        <xsl:value-of
									select="concat($NS, 'Country/', arco-fn:urify(./PRV/PRVS))" />
                                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
										select="'https://w3id.org/italia/onto/CLV/Country'" />
                                        </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(./PRV/PRVS)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./PRV/PRVS)" />
								</l0:name>
							</rdf:Description>
						</xsl:if>
						<!-- Region LA -->
						<xsl:if
							test="./PRV/PRVR and (not(starts-with(lower-case(normalize-space(./PRV/PRVR)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVR)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                        <xsl:value-of
									select="concat($NS, 'Region/', arco-fn:urify(./PRV/PRVR))" />
                                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
										select="'https://w3id.org/italia/onto/CLV/Region'" />
                                        </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(./PRV/PRVR)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./PRV/PRVR)" />
								</l0:name>
							</rdf:Description>
						</xsl:if>
						<!-- Province LA -->
						<xsl:if
							test="./PRV/PRVP and (not(starts-with(lower-case(normalize-space(./PRV/PRVP)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVP)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                        <xsl:value-of
									select="concat($NS, 'Province/', arco-fn:urify(./PRV/PRVP))" />
                                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
										select="'https://w3id.org/italia/onto/CLV/Province'" />
                                        </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(./PRV/PRVP)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./PRV/PRVP)" />
								</l0:name>
							</rdf:Description>
						</xsl:if>
						<!-- City LA -->
						<xsl:if
							test="./PRV/PRVC and (not(starts-with(lower-case(normalize-space(./PRV/PRVC)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVC)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                        <xsl:value-of
									select="concat($NS, 'City/', arco-fn:urify(./PRV/PRVC))" />
                                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
										select="'https://w3id.org/italia/onto/CLV/City'" />
                                        </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(./PRV/PRVC)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./PRV/PRVC)" />
								</l0:name>
							</rdf:Description>
						</xsl:if>
						<!-- Località (Address Area) LA -->
						<xsl:if
							test="./PRV/PRVL and (not(starts-with(lower-case(normalize-space(./PRV/PRVL)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVL)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                        <xsl:value-of
									select="concat($NS, 'AddressArea/', arco-fn:urify(./PRV/PRVL))" />
                                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
										select="'https://w3id.org/italia/onto/CLV/AddressArea'" />
                                        </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(./PRV/PRVL)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./PRV/PRVL)" />
								</l0:name>
							</rdf:Description>
						</xsl:if>
						<xsl:if
							test="./PRT/PRTL and (not(starts-with(lower-case(normalize-space(./PRT/PRTL)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRT/PRTL)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                        <xsl:value-of
									select="concat($NS, 'AddressArea/', arco-fn:urify(./PRT/PRTL))" />
                                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
										select="'https://w3id.org/italia/onto/CLV/AddressArea'" />
                                        </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(./PRT/PRTL)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./PRT/PRTL)" />
								</l0:name>
							</rdf:Description>
						</xsl:if>
						<xsl:if
							test="./PRV/PRVE and (not(starts-with(lower-case(normalize-space(./PRV/PRVE)), 'nr')) and not(starts-with(lower-case(normalize-space(./PRV/PRVE)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                        <xsl:value-of
									select="concat($NS, 'AddressArea/', arco-fn:urify(./PRV/PRVE))" />
                                    </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
										select="'https://w3id.org/italia/onto/CLV/AddressArea'" />
                                        </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(./PRV/PRVE)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(./PRV/PRVE)" />
								</l0:name>
							</rdf:Description>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:for-each>
			<!-- shot location for F norm -->
			<xsl:if test="record/metadata/schede/F/LR">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
									 <xsl:value-of
						select="concat($NS, 'TimeIndexedTypedLocation/', $itemURI, '-shot')" />
								</xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="'https://w3id.org/arco/ontology/location/TimeIndexedTypedLocation'" />
                        </xsl:attribute>
					</rdf:type>
					<arco-location:isTimeIndexedTypedLocationOf>
						<xsl:attribute name="rdf:resource"> 
								<xsl:value-of
							select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" /> 
							</xsl:attribute>
					</arco-location:isTimeIndexedTypedLocationOf>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Localizzazione di ripresa del bene: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Localizzazione di ripresa del bene: ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Shooting location of cultural property: ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Shooting location of cultural property: ', $itemURI)" />
					</l0:name>
					<arco-location:hasLocationType>
						<xsl:attribute name="rdf:resource">
                                    	<xsl:value-of
							select="'https://w3id.org/arco/ontology/location/ShootingLocation'" />
                            </xsl:attribute>
					</arco-location:hasLocationType>
					<xsl:if
						test="record/metadata/schede/F/LR/LRD and (not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRD)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRD)), 'n.r')))">
						<tiapit:atTime>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(record/metadata/schede/F/LR/LRD)))" />
                            </xsl:attribute>
						</tiapit:atTime>
					</xsl:if>
					<!-- hasCircumstance for Shot Location (F) -->
					<xsl:if
						test="record/metadata/schede/F/LR/LRO and (not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRO)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRO)), 'n.r')))">
						<arco-cd:hasCircumstance>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, 'Circumstance/', arco-fn:urify(normalize-space(record/metadata/schede/F/LR/LRO)))" />
                            </xsl:attribute>
						</arco-cd:hasCircumstance>
					</xsl:if>
				</rdf:Description>
				<!-- Circumstance as individual for Shot Location (F) -->
				<xsl:if
					test="record/metadata/schede/F/LR/LRO and (not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRO)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRO)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:value-of
							select="concat($NS, 'Circumstance/', arco-fn:urify(normalize-space(record/metadata/schede/F/LR/LRO)))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/arco/ontology/context-description/Circumstance'" />
                            </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/LR/LRO)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/LR/LRO)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- Time Interval for shot location (F) -->
				<xsl:if
					test="record/metadata/schede/F/LR/LRD and (not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRD)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRD)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:value-of
							select="concat($NS, 'TimeInterval/', arco-fn:urify(normalize-space(record/metadata/schede/F/LR/LRD)))" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'https://w3id.org/italia/onto/TI/TimeInterval'" />
                            </xsl:attribute>
						</rdf:type>
						<xsl:if
							test="record/metadata/schede/F/LR/LRD and (not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRD)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRD)), 'n.r')))">
							<tiapit:time>
								<xsl:value-of
									select="normalize-space(record/metadata/schede/F/LR/LRD)" />
							</tiapit:time>
						</xsl:if>
					</rdf:Description>
				</xsl:if>
			</xsl:if>
			<xsl:if test="record/metadata/schede/F/LR">
				<xsl:variable name="location">
					<xsl:value-of
						select="concat($NS, 'Feature/', arco-fn:arcofy(normalize-space(record/metadata/schede/F/LR/LRC)))" />
				</xsl:variable>
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                                    <xsl:value-of
						select="concat($NS, 'TimeIndexedTypedLocation/', $itemURI, '-shot')" />
                                </xsl:attribute>
					<arco-location:atLocation>
						<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
							select="$location" />
                                    </xsl:attribute>
					</arco-location:atLocation>
				</rdf:Description>
				<rdf:Description>
					<xsl:attribute name="rdf:about">
                                    <xsl:value-of
						select="$location" />
                                </xsl:attribute>
					<rdf:type>
						<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
							select="'https://w3id.org/italia/onto/CLV/Feature'" />
                                    </xsl:attribute>
					</rdf:type>
					<rdfs:label>
						<xsl:value-of
							select="normalize-space(record/metadata/schede/F/LR/LRC)" />
					</rdfs:label>
					<xsl:if test="record/metadata/schede/F/LR/*">
						<clvapit:hasAddress>
							<xsl:attribute name="rdf:resource">
                               <xsl:choose>
									<xsl:when
								test="record/metadata/schede/F/LR/LRC/LRCS and not(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCS))='italia')">
										<xsl:value-of
								select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(record/metadata/schede/F/LR/LRC/LRCS)), normalize-space(lower-case(record/metadata/schede/F/LR/LRC/LRCA)))))" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:choose>
											<xsl:when
								test="record/metadata/schede/F/LR/LRC/LRCL">
												<xsl:value-of
								select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(record/metadata/schede/F/LR/LRC/LRCP)), normalize-space(lower-case(record/metadata/schede/F/LR/LRC/LRCC)), normalize-space(lower-case(record/metadata/schede/F/LR/LRC/LRCF)), normalize-space(lower-case(record/metadata/schede/F/LR/LRC/LRCL)))))" />
											</xsl:when>
											<xsl:otherwise>
												<xsl:value-of
								select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(record/metadata/schede/F/LR/LRC/LRCP)), normalize-space(lower-case(record/metadata/schede/F/LR/LRC/LRCC)), normalize-space(lower-case(record/metadata/schede/F/LR/LRC/LRCF)), normalize-space(lower-case(record/metadata/schede/F/LR/LRA)))))" />
											</xsl:otherwise>
										</xsl:choose>
									</xsl:otherwise>
								</xsl:choose>
                             </xsl:attribute>
						</clvapit:hasAddress>
					</xsl:if>
					<xsl:if test="record/metadata/schede/F/LR/LRL">
						<arco-location:hasToponymInTime>
							<xsl:attribute name="rdf:resource">
                                            	<xsl:value-of
								select="concat($NS, 'ToponymInTime/', arco-fn:urify(normalize-space(record/metadata/schede/F/LR/LRL/LRLT)))" />
                                            </xsl:attribute>
						</arco-location:hasToponymInTime>
					</xsl:if>
					<xsl:if test="record/metadata/schede/F/LR/LRC/LRCF">
						<arco-location:hasToponymInTime>
							<xsl:attribute name="rdf:resource">
                                            	<xsl:value-of
								select="concat($NS, 'ToponymInTime/', arco-fn:urify(normalize-space(record/metadata/schede/F/LR/LRC/LRCF)))" />
                                            </xsl:attribute>
						</arco-location:hasToponymInTime>
					</xsl:if>
				</rdf:Description>
				<xsl:if test="record/metadata/schede/F/LR/LRC/*">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                              <xsl:choose>
									<xsl:when
							test="record/metadata/schede/F/LR/LRC/LRCS and not(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCS))='italia')">
										<xsl:value-of
							select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(record/metadata/schede/F/LR/LRC/LRCS)), normalize-space(lower-case(record/metadata/schede/F/LR/LRC/LRCA)))))" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:choose>
											<xsl:when
							test="record/metadata/schede/F/LR/LRC/LRCL">
												<xsl:value-of
							select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(record/metadata/schede/F/LR/LRC/LRCP)), normalize-space(lower-case(record/metadata/schede/F/LR/LRC/LRCC)), normalize-space(lower-case(record/metadata/schede/F/LR/LRC/LRCF)), normalize-space(lower-case(record/metadata/schede/F/LR/LRC/LRCL)))))" />
											</xsl:when>
											<xsl:otherwise>
												<xsl:value-of
							select="concat($NS, 'Address/', arco-fn:arcofy(concat(normalize-space(lower-case(record/metadata/schede/F/LR/LRC/LRCP)), normalize-space(lower-case(record/metadata/schede/F/LR/LRC/LRCC)), normalize-space(lower-case(record/metadata/schede/F/LR/LRC/LRCF)), normalize-space(lower-case(record/metadata/schede/F/LR/LRA)))))" />
											</xsl:otherwise>
										</xsl:choose>
									</xsl:otherwise>
								</xsl:choose>
                            </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/Address'" />
                                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:for-each
								select="record/metadata/schede/F/LR/LRC/*">
								<xsl:choose>
									<xsl:when test="position() = 1">
										<xsl:value-of select="./text()" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="concat(', ', ./text())" />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:for-each>
						</rdfs:label>
						<xsl:if
							test="record/metadata/schede/F/LR/LRC/LRCS and (not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCS)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCS)), 'n.r')))">
							<clvapit:hasCountry>
								<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
									select="concat($NS, 'Country/', arco-fn:urify(record/metadata/schede/F/LR/LRC/LRCS))" />
                                            </xsl:attribute>
							</clvapit:hasCountry>
						</xsl:if>
						<!-- Regione -->
						<xsl:if
							test="record/metadata/schede/F/LR/LRC/LRCR and (not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCR)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCR)), 'n.r')))">
							<clvapit:hasRegion>
								<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
									select="concat($NS, 'Region/', arco-fn:urify(record/metadata/schede/F/LR/LRC/LRCR))" />
                                            </xsl:attribute>
							</clvapit:hasRegion>
						</xsl:if>
						<!-- Provincia -->
						<xsl:if
							test="record/metadata/schede/F/LR/LRC/LRCP and (not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCP)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCP)), 'n.r')))">
							<clvapit:hasProvince>
								<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
									select="concat($NS, 'Province/', arco-fn:urify(record/metadata/schede/F/LR/LRC/LRCP))" />
                                            </xsl:attribute>
							</clvapit:hasProvince>
						</xsl:if>
						<!-- Comune -->
						<xsl:if
							test="record/metadata/schede/F/LR/LRC/LRCC and (not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCC)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCC)), 'n.r')))">
							<clvapit:hasCity>
								<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
									select="concat($NS, 'City/', arco-fn:urify(record/metadata/schede/F/LR/LRC/LRCC))" />
                                            </xsl:attribute>
							</clvapit:hasCity>
						</xsl:if>
						<!-- Località -->
						<xsl:if
							test="record/metadata/schede/F/LR/LRC/LRCL and (not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCL)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCL)), 'n.r')))">
							<clvapit:hasAddressArea>
								<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
									select="concat($NS, 'AddressArea/', arco-fn:urify(record/metadata/schede/F/LR/LRC/LRCL))" />
                                            </xsl:attribute>
							</clvapit:hasAddressArea>
						</xsl:if>
						<xsl:if
							test="record/metadata/schede/F/LR/LRA and (not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRA)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRA)), 'n.r')))">
							<clvapit:hasAddressArea>
								<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
									select="concat($NS, 'AddressArea/', arco-fn:urify(record/metadata/schede/F/LR/LRA))" />
                                            </xsl:attribute>
							</clvapit:hasAddressArea>
						</xsl:if>
						<xsl:if
							test="record/metadata/schede/F/LR/LRC/LRCE and (not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCE)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCE)), 'n.r')))">
							<clvapit:hasAddressArea>
								<xsl:attribute name="rdf:resource">
                                                <xsl:value-of
									select="concat($NS, 'AddressArea/', arco-fn:urify(record/metadata/schede/F/LR/LRC/LRCE))" />
                                            </xsl:attribute>
							</clvapit:hasAddressArea>
						</xsl:if>
						<!-- HistoricalArea -->
						<xsl:if test="record/metadata/schede/F/LR/LRG">
							<arco-location:hasHistoricalArea>
								<xsl:attribute name="rdf:resource">
												<xsl:value-of
									select="concat($NS, 'AdministrativeUnitComponent/', arco-fn:urify(record/metadata/schede/F/LR/LRG))" />
											</xsl:attribute>
							</arco-location:hasHistoricalArea>
						</xsl:if>
					</rdf:Description>
				</xsl:if>

				<!-- Historical Area : if any exists -->
				<xsl:if test="record/metadata/schede/F/LR/LRG">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
										<xsl:value-of
							select="concat($NS, 'AdministrativeUnitComponent/', arco-fn:urify(record/metadata/schede/F/LR/LRG))" />
									</xsl:attribute>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/LR/LRG)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/LR/LRG)" />
						</l0:name>
						<rdf:type
							rdf:resource="https://w3id.org/italia/onto/CLV/AdministrativeUnitComponent" />
					</rdf:Description>
				</xsl:if>

				<!-- Country LR -->
				<xsl:if
					test="record/metadata/schede/F/LR/LRC/LRCS and (not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCS)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCS)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                                        <xsl:value-of
							select="concat($NS, 'Country/', arco-fn:urify(record/metadata/schede/F/LR/LRC/LRCS))" />
                                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/Country'" />
                                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/LR/LRC/LRCS)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/LR/LRC/LRCS)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- Region LR -->
				<xsl:if
					test="record/metadata/schede/F/LR/LRC/LRCR and (not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCR)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCR)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                                        <xsl:value-of
							select="concat($NS, 'Region/', arco-fn:urify(record/metadata/schede/F/LR/LRC/LRCR))" />
                                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/Region'" />
                                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/LR/LRC/LRCR)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/LR/LRC/LRCR)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- Province LR -->
				<xsl:if
					test="record/metadata/schede/F/LR/LRC/LRCP and (not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCP)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCP)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                                        <xsl:value-of
							select="concat($NS, 'Province/', arco-fn:urify(record/metadata/schede/F/LR/LRC/LRCP))" />
                                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/Province'" />
                                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/LR/LRC/LRCP)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/LR/LRC/LRCP)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- City LR -->
				<xsl:if
					test="record/metadata/schede/F/LR/LRC/LRCC and (not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCC)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCC)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                                        <xsl:value-of
							select="concat($NS, 'City/', arco-fn:urify(record/metadata/schede/F/LR/LRC/LRCC))" />
                                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/City'" />
                                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/LR/LRC/LRCC)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/LR/LRC/LRCC)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- Località (Address Area) LR -->
				<xsl:if
					test="record/metadata/schede/F/LR/LRC/LRCL and (not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCL)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCL)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                                        <xsl:value-of
							select="concat($NS, 'AddressArea/', arco-fn:urify(record/metadata/schede/F/LR/LRC/LRCL))" />
                                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/AddressArea'" />
                                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/LR/LRC/LRCL)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/LR/LRC/LRCL)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<xsl:if
					test="record/metadata/schede/F/LR/LRC/LRCE and (not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCE)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRC/LRCE)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                                        <xsl:value-of
							select="concat($NS, 'AddressArea/', arco-fn:urify(record/metadata/schede/F/LR/LRC/LRCE))" />
                                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/AddressArea'" />
                                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/LR/LRC/LRCE)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/LR/LRC/LRCE)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<xsl:if
					test="record/metadata/schede/F/LR/LRA and (not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRA)), 'nr')) and not(starts-with(lower-case(normalize-space(record/metadata/schede/F/LR/LRA)), 'n.r')))">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                                        <xsl:value-of
							select="concat($NS, 'AddressArea/', arco-fn:urify(record/metadata/schede/F/LR/LRA))" />
                                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
								select="'https://w3id.org/italia/onto/CLV/AddressArea'" />
                                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/LR/LRA)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/LR/LRA)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
				<!-- unfixed -->
				<xsl:if test="record/metadata/schede/F/LR/LRL">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                                       <xsl:value-of
							select="concat($NS, 'ToponymInTime/', arco-fn:urify(normalize-space(record/metadata/schede/F/LR/LRL)))" />
                                    </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
								select="'https://w3id.org/arco/ontology/location/ToponymInTime'" />
                                        </xsl:attribute>
						</rdf:type>
						<rdfs:label>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/LR/LRL)" />
						</rdfs:label>
						<l0:name>
							<xsl:value-of
								select="normalize-space(record/metadata/schede/F/LR/LRL)" />
						</l0:name>
					</rdf:Description>
				</xsl:if>
			</xsl:if>
			<!-- We create the cultural event or the exhibition - norm version 4.00 -->
			<xsl:for-each select="record/metadata/schede/*/MS/MST">
				<rdf:Description>
					<xsl:variable name="event-uri">
						<xsl:choose>
							<xsl:when
								test="./MSTL and (not(starts-with(lower-case(normalize-space(./MSTL)), 'nr')) and not(starts-with(lower-case(normalize-space(./MSTL)), 'n.r')))">
								<xsl:value-of
									select="arco-fn:arcofy(concat(./MSTT, ./MSTL))" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="arco-fn:arcofy(./MSTT)" />
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="./MSTI">
							<xsl:choose>
								<xsl:when test="./MSTI='mostra'">
									<xsl:attribute name="rdf:about">
                                        <xsl:value-of
										select="concat($NS, 'Exhibition/', $event-uri)" />
                                    </xsl:attribute>
									<rdf:type>
										<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
											select="'https://w3id.org/arco/ontology/cultural-event/Exhibition'" />
                                        </xsl:attribute>
									</rdf:type>
								</xsl:when>
								<xsl:otherwise>
									<xsl:attribute name="rdf:about">
                                        <xsl:value-of
										select="concat($NS, 'CulturalEvent/', $event-uri)" />
                                    </xsl:attribute>
									<rdf:type>
										<xsl:attribute name="rdf:resource">
                                            <xsl:value-of
											select="'http://dati.beniculturali.it/cis/CulturalEvent'" />
                                        </xsl:attribute>
									</rdf:type>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:when>
						<xsl:otherwise>
							<xsl:attribute name="rdf:about">
                                <xsl:value-of
								select="concat($NS, 'CulturalEvent/', $event-uri)" />
                            </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                                    <xsl:value-of
									select="'http://dati.beniculturali.it/cis/CulturalEvent'" />
                                </xsl:attribute>
							</rdf:type>
						</xsl:otherwise>
					</xsl:choose>
					<cis:involvesCulturalEntity>
						<xsl:attribute name="rdf:resource">
                            <xsl:value-of
							select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
                        </xsl:attribute>
					</cis:involvesCulturalEntity>
					<!-- Event name -->
					<xsl:if test="./MSTT">
						<l0:name>
							<xsl:value-of select="normalize-space(./MSTT)" />
						</l0:name>
						<rdfs:label>
							<xsl:value-of select="normalize-space(./MSTT)" />
						</rdfs:label>
					</xsl:if>
					<!-- Event organizer -->
					<xsl:if
						test="(not(starts-with(lower-case(normalize-space(./MSTE)), 'nr')) and not(starts-with(lower-case(normalize-space(./MSTE)), 'n.r')))">
						<xsl:for-each select="./MSTE">
							<roapit:hasRiT>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="concat($NS, 'TimeIndexedRole/', $itemURI, '-', arco-fn:urify(normalize-space(.)))" />
                            </xsl:attribute>
							</roapit:hasRiT>
							<arco-ce:hasEventOrganiser>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
                            </xsl:attribute>
							</arco-ce:hasEventOrganiser>
						</xsl:for-each>
					</xsl:if>
					<!-- Event location and time -->
					<xsl:for-each
						select="./MSTL and (not(starts-with(lower-case(normalize-space(./MSTL)), 'nr')) and not(starts-with(lower-case(normalize-space(./MSTL)), 'n.r')))">
						<arco-ce:eventTimeLocation>
							<xsl:value-of select="normalize-space(.)" />
						</arco-ce:eventTimeLocation>
					</xsl:for-each>
					<!-- Event notes -->
					<xsl:if test="./MSTS">
						<arco-core:note>
							<xsl:value-of select="normalize-space(./MSTS)" />
						</arco-core:note>
					</xsl:if>
				</rdf:Description>
				<!-- Event organizer - Time Indexed Role -->
				<xsl:if
					test="./MSTE and (not(starts-with(lower-case(normalize-space(./MSTE)), 'nr')) and not(starts-with(lower-case(normalize-space(./MSTES)), 'n.r')))">
					<xsl:for-each select="./MSTE">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                            <xsl:value-of
								select="concat($NS, 'TimeIndexedRole/', $itemURI, '-', arco-fn:urify(normalize-space(.)))" />
                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/TimeIndexedRole'" />
                            </xsl:attribute>
							</rdf:type>
							<roapit:withRole>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="concat($NS, 'Role/Organiser')" />
                            </xsl:attribute>
							</roapit:withRole>
							<roapit:isRoleInTimeOf>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
                            </xsl:attribute>
							</roapit:isRoleInTimeOf>
						</rdf:Description>
						<!-- Event organizer - Role -->
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                            <xsl:value-of
								select="concat($NS, 'Role/Organiser')" />
                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="'https://w3id.org/italia/onto/RO/Role'" />
                            </xsl:attribute>
							</rdf:type>
							<rdfs:label xml:lang="en">
								<xsl:value-of select="'Organiser'" />
							</rdfs:label>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="'Ente/Soggetto organizzatore'" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="'Ente/Soggetto organizzatore'" />
							</l0:name>
							<l0:name xml:lang="en">
								<xsl:value-of select="'Organiser'" />
							</l0:name>
						</rdf:Description>
						<!-- Event organizer - Agent -->
						<rdf:Description>
							<xsl:attribute name="rdf:about">
                            <xsl:value-of
								select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
                        </xsl:attribute>
							<rdf:type>
								<xsl:attribute name="rdf:resource">
                                <xsl:value-of
									select="'https://w3id.org/italia/onto/l0/Agent'" />
                            </xsl:attribute>
							</rdf:type>
							<rdfs:label>
								<xsl:call-template name="CamelCase">
									<xsl:with-param name="text"
										select="normalize-space(.)" />
								</xsl:call-template>
							</rdfs:label>
							<l0:name>
								<xsl:call-template name="CamelCase">
									<xsl:with-param name="text"
										select="normalize-space(.)" />
								</xsl:call-template>
							</l0:name>
						</rdf:Description>
					</xsl:for-each>
				</xsl:if>
			</xsl:for-each>
			<!-- We create the cultural event or the exhibition - norm version 3.00 -->
			<xsl:for-each select="record/metadata/schede/*/DO/MST">
				<xsl:if test="./* and ./MSTT">
					<xsl:variable name="event-uri">
						<xsl:choose>
							<xsl:when
								test="./MSTL and (not(starts-with(lower-case(normalize-space(./MSTL)), 'nr')) and not(starts-with(lower-case(normalize-space(./MSTL)), 'n.r')))">
								<xsl:value-of
									select="arco-fn:arcofy(concat(./MSTT, ./MSTL))" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="arco-fn:arcofy(./MSTT)" />
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
                            <xsl:value-of
							select="concat($NS, 'CulturalEvent/', $event-uri)" />
                        </xsl:attribute>
						<rdf:type>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="'http://dati.beniculturali.it/cis/CulturalEvent'" />
                            </xsl:attribute>
						</rdf:type>
						<cis:involvesCulturalEntity>
							<xsl:attribute name="rdf:resource">
                                <xsl:value-of
								select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
                            </xsl:attribute>
						</cis:involvesCulturalEntity>
						<!-- Event name -->
						<xsl:if test="./MSTT">
							<l0:name>
								<xsl:value-of select="normalize-space(./MSTT)" />
							</l0:name>
							<rdfs:label>
								<xsl:value-of select="normalize-space(./MSTT)" />
							</rdfs:label>
						</xsl:if>
						<!-- Event organizer -->
						<xsl:if
							test="(not(starts-with(lower-case(normalize-space(./MSTO)), 'nr')) and not(starts-with(lower-case(normalize-space(./MSTO)), 'n.r')))">
							<xsl:for-each select="./MSTO">
								<roapit:hasRiT>
									<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
										select="concat($NS, 'TimeIndexedRole/', $itemURI, '-', arco-fn:urify(.))" />
                                    </xsl:attribute>
								</roapit:hasRiT>
								<arco-ce:hasEventOrganiser>
									<xsl:attribute name="rdf:resource">
                                        <xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
                                    </xsl:attribute>
								</arco-ce:hasEventOrganiser>
							</xsl:for-each>
						</xsl:if>
						<!-- Event time -->
						<xsl:if
							test="(not(starts-with(lower-case(normalize-space(./MSTD)), 'nr')) and not(starts-with(lower-case(normalize-space(./MSTD)), 'n.r')))">
							<xsl:for-each select="./MSTD">
								<tiapit:time>
									<xsl:value-of select="normalize-space(.)" />
								</tiapit:time>
							</xsl:for-each>
						</xsl:if>
						<!-- specifications -->
						<xsl:if
							test="$sheetVersion='3.01_ICCD0' or $sheetVersion='3.01'">
							<arco-core:note>
								<xsl:value-of select="normalize-space(./MSTS)" />
							</arco-core:note>
						</xsl:if>
						<!-- Event location -->
						<xsl:if
							test="(not(starts-with(lower-case(normalize-space(./MSTL)), 'nr')) and not(starts-with(lower-case(normalize-space(./MSTL)), 'n.r')))">
							<xsl:for-each select="./MSTL">
								<xsl:choose>
									<xsl:when
										test="$sheetVersion='3.01_ICCD0' or $sheetVersion='3.01'">
										<arco-ce:eventTimeLocation>
											<xsl:value-of select="normalize-space(.)" />
										</arco-ce:eventTimeLocation>
									</xsl:when>
									<xsl:otherwise>
										<clvapit:hasSpatialCoverage>
											<xsl:attribute name="rdf:resource">
		                                   <xsl:value-of
												select="concat($NS, 'GeographicalFeature/', arco-fn:arcofy(.))" />
		                               </xsl:attribute>
										</clvapit:hasSpatialCoverage>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:for-each>
						</xsl:if>
						<!-- Event site -->
						<xsl:if
							test="(not(starts-with(lower-case(normalize-space(./MSTS)), 'nr')) and not(starts-with(lower-case(normalize-space(./MSTS)), 'n.r')) and not($sheetVersion='3.01_ICCD0') and not($sheetVersion='3.01'))">
							<xsl:for-each select="./MSTS">
								<cis:isHostedBySite>
									<xsl:attribute name="rdf:resource">
                                    <xsl:value-of
										select="concat($NS, 'Site/', arco-fn:arcofy(concat(lower-case(normalize-space(.)), lower-case(normalize-space(../MSTL)))))" />
                                </xsl:attribute>
								</cis:isHostedBySite>
							</xsl:for-each>
						</xsl:if>
					</rdf:Description>
					<!-- Event site -->
					<xsl:if
						test="(not(starts-with(lower-case(normalize-space(./MSTS)), 'nr')) and not(starts-with(lower-case(normalize-space(./MSTS)), 'n.r')) and not($sheetVersion='3.01_ICCD0') and not($sheetVersion='3.01'))">
						<xsl:for-each select="./MSTS">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                <xsl:value-of
									select="concat($NS, 'Site/', arco-fn:arcofy(concat(lower-case(normalize-space(.)), lower-case(normalize-space(../MSTL)))))" />
                            </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                    <xsl:value-of
										select="'http://dati.beniculturali.it/cis/Site'" />
                                </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(.)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(.)" />
								</l0:name>
							</rdf:Description>
						</xsl:for-each>
					</xsl:if>
					<!-- Event organizer - Time Indexed Role -->
					<xsl:if
						test="(not(starts-with(lower-case(normalize-space(./MSTO)), 'nr')) and not(starts-with(lower-case(normalize-space(./MSTO)), 'n.r')))">
						<xsl:for-each select="./MSTO">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                <xsl:value-of
									select="concat($NS, 'TimeIndexedRole/', $itemURI, '-', arco-fn:urify(normalize-space(.)))" />
                            </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                    <xsl:value-of
										select="'https://w3id.org/italia/onto/RO/TimeIndexedRole'" />
                                </xsl:attribute>
								</rdf:type>
								<roapit:withRole>
									<xsl:attribute name="rdf:resource">
                                    <xsl:value-of
										select="concat($NS, 'Role/Organiser')" />
                                </xsl:attribute>
								</roapit:withRole>
								<roapit:isRoleInTimeOf>
									<xsl:attribute name="rdf:resource">
                                    <xsl:value-of
										select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
                                </xsl:attribute>
								</roapit:isRoleInTimeOf>
							</rdf:Description>
							<!-- Event organizer - Role -->
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                <xsl:value-of
									select="concat($NS, 'Role/Organiser')" />
                            </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                    <xsl:value-of
										select="'https://w3id.org/italia/onto/RO/Role'" />
                                </xsl:attribute>
								</rdf:type>
								<rdfs:label xml:lang="it">
									<xsl:value-of
										select="'Ente/Soggetto organizzatore'" />
								</rdfs:label>
								<l0:name xml:lang="it">
									<xsl:value-of
										select="'Ente/Soggetto organizzatore'" />
								</l0:name>
								<rdfs:label xml:lang="en">
									<xsl:value-of select="'Organiser'" />
								</rdfs:label>
								<l0:name xml:lang="en">
									<xsl:value-of select="'Organiser'" />
								</l0:name>
							</rdf:Description>
							<!-- Event organizer - Agent -->
							<rdf:Description>
								<xsl:attribute name="rdf:about">
                                <xsl:value-of
									select="concat($NS, 'Agent/', arco-fn:arcofy(.))" />
                            </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
                                    <xsl:value-of
										select="'https://w3id.org/italia/onto/l0/Agent'" />
                                </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:call-template name="CamelCase">
										<xsl:with-param name="text"
											select="normalize-space(.)" />
									</xsl:call-template>
								</rdfs:label>
								<l0:name>
									<xsl:call-template name="CamelCase">
										<xsl:with-param name="text"
											select="normalize-space(.)" />
									</xsl:call-template>
								</l0:name>
							</rdf:Description>
						</xsl:for-each>
					</xsl:if>
					<!-- Event location -->
					<xsl:for-each select="./MSTL">
						<xsl:if
							test=". and (not(starts-with(lower-case(normalize-space(.)), 'nr')) and not(starts-with(lower-case(normalize-space(.)), 'n.r')))">
							<rdf:Description>
								<xsl:attribute name="rdf:about">
	                                <xsl:value-of
									select="concat($NS, 'GeographicalFeature/', arco-fn:arcofy(.))" />
	                            </xsl:attribute>
								<rdf:type>
									<xsl:attribute name="rdf:resource">
	                                    <xsl:value-of
										select="'http://dati.beniculturali.it/cis/GeographicalFeature'" />
	                                </xsl:attribute>
								</rdf:type>
								<rdfs:label>
									<xsl:value-of select="normalize-space(.)" />
								</rdfs:label>
							</rdf:Description>
						</xsl:if>
					</xsl:for-each>
				</xsl:if>
			</xsl:for-each>


			<!-- The individual typed as RelatedWorkSituation is created here (cf. 
				rule #RWS in component.xslt). -->
			<xsl:variable name="rez" select="normalize-space(record/metadata/schede/*/RV/REZ)" />
			<xsl:for-each select="record/metadata/schede/*/*/RSE">
				<xsl:variable name="create-rel-work-situation">
					<xsl:choose>
						<xsl:when
							test="(lower-case(normalize-space(./RSER))='è contenuto in' 
						or lower-case(normalize-space(./RSER))='luogo di collocazione/localizzazione'
						or lower-case(normalize-space(./RSER))='scheda contenitore')">
							<xsl:value-of select="'false'" />
						</xsl:when>
						<xsl:when
							test="(lower-case(normalize-space(./RSER))='era contenuto in' 
						or lower-case(normalize-space(./RSER))='luogo di provenienza')">
							<xsl:value-of select="'false'" />
						</xsl:when>
						<xsl:when
							test="(lower-case(normalize-space(./RSER))='esecuzione/evento di riferimento' 
						or lower-case(normalize-space(./RSER))='è coinvolto in')">
							<xsl:value-of select="'false'" />
						</xsl:when>
						<xsl:when
							test="(lower-case(normalize-space(./RSER))='sede di realizzazione' 
						or lower-case(normalize-space(./RSER))='è stato realizzato in')">
							<xsl:value-of select="'false'" />
						</xsl:when>
						<xsl:when
							test="(lower-case(normalize-space(./RSER))='bene composto' 
						or lower-case(normalize-space(./RSER))='è compreso in')">
							<xsl:value-of select="'false'" />
						</xsl:when>
						<xsl:when
							test="(lower-case(normalize-space(./RSER))='fonte di rappresentazione' 
						or lower-case(normalize-space(./RSER))='è rappresentato in')">
							<xsl:value-of select="'false'" />
						</xsl:when>
						<xsl:when
							test="(lower-case(normalize-space(./RSER))='relazione urbanistico ambientale' 
						or lower-case(normalize-space(./RSER))='è in relazione urbanistico - ambientale con')">
							<xsl:value-of select="'false'" />
						</xsl:when>
						<xsl:when
							test="(lower-case(normalize-space(./RSER))='sede di rinvenimento' 
						or lower-case(normalize-space(./RSER))='è stato rinvenuto in')">
							<xsl:value-of select="'false'" />
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="'true'" />
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>

				<xsl:if test="./* and not(starts-with(lower-case(normalize-space(./RSEC)), 'nr')) and not(starts-with(lower-case(normalize-space(./RSEC)), 'n.r')) and not(lower-case(normalize-space(./RSER))='scheda storica')">
					<xsl:variable name="related-property" select="arco-fn:related-property(normalize-space(./RSEC), 'foaf')" />
					<xsl:if test="count($related-property) > 0 and not(./RSER) or $create-rel-work-situation='true'">
						<rdf:Description>
							<xsl:attribute name="rdf:about">
								<xsl:value-of
								select="concat($NS, 'RelatedWorkSituation/', $itemURI, '-related-cultural-property-1-', position())" />
							</xsl:attribute>
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/context-description/RelatedWorkSituation" />
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Relazione ', position(), ' tra il bene culturale ', $itemURI, ' e altro bene culturale')" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Relazione ', position(), ' tra il bene culturale ', $itemURI, ' e altro bene culturale')" />
							</l0:name>
							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Relation ', position(), ' between the cultural property ', $itemURI, ' and other cultural property')" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Relation ', position(), ' between the cultural property ', $itemURI, ' and other cultural property')" />
							</l0:name>
							<arco-cd:involvesRelatedWork>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of select="$related-property" />
								</xsl:attribute>
							</arco-cd:involvesRelatedWork>
							<xsl:if test="string-length($rez)>0">
								<arco-cd:relatedWorkNote>
									<xsl:value-of select="$rez" />
								</arco-cd:relatedWorkNote>
							</xsl:if>
						</rdf:Description>
					</xsl:if>
				</xsl:if>
			</xsl:for-each>
			<xsl:for-each select="record/metadata/schede/*/RV/ROZ">

				<xsl:variable name="rel-work"
					select="arco-fn:related-property(normalize-space(.), '')" />
				<xsl:if test="count($rel-work) > 0">
					<rdf:Description>
						<xsl:attribute name="rdf:about">
							<xsl:value-of
							select="concat($NS, 'RelatedWorkSituation/', $itemURI, '-related-cultural-property-2-', position())" />
						</xsl:attribute>
						<rdf:type
							rdf:resource="https://w3id.org/arco/ontology/context-description/RelatedWorkSituation" />
						<rdfs:label xml:lang="it">
							<xsl:value-of
								select="concat('Relazione ', position(), ' tra il bene culturale ', $itemURI, ' e altro bene culturale')" />
						</rdfs:label>
						<l0:name xml:lang="it">
							<xsl:value-of
								select="concat('Relazione ', position(), ' tra il bene culturale ', $itemURI, ' e altro bene culturale')" />
						</l0:name>
						<rdfs:label xml:lang="en">
							<xsl:value-of
								select="concat('Relation ', position(), ' between the cultural property ', $itemURI, ' and other cultural property')" />
						</rdfs:label>
						<l0:name xml:lang="en">
							<xsl:value-of
								select="concat('Relation ', position(), ' between the cultural property ', $itemURI, ' and other cultural property')" />
						</l0:name>

						<arco-cd:isRelatedWorkSituationOf>
							<xsl:attribute name="rdf:resource">
									<xsl:value-of
								select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
							</xsl:attribute>
						</arco-cd:isRelatedWorkSituationOf>

						<xsl:for-each select="$rel-work">
							<arco-cd:involvesRelatedWork>
								<xsl:attribute name="rdf:resource">
									<xsl:value-of select="." />
								</xsl:attribute>
							</arco-cd:involvesRelatedWork>
						</xsl:for-each>

					</rdf:Description>
					<rdf:Description>
						<xsl:attribute name="rdf:about">
							<xsl:value-of
							select="concat($NS, arco-fn:local-name(arco-fn:getSpecificPropertyType($sheetType)), '/', $itemURI)" />
						</xsl:attribute>

						<arco-cd:hasRelatedWorkSituation>
							<xsl:attribute name="rdf:resource">
									<xsl:value-of
								select="concat($NS, 'RelatedWorkSituation/', $itemURI, '-related-cultural-property-2-', position())" />
							</xsl:attribute>
						</arco-cd:hasRelatedWorkSituation>

					</rdf:Description>
				</xsl:if>
			</xsl:for-each>




			<xsl:for-each select="record/metadata/schede/*/MT/MIS">
				<rdf:Description>

					<xsl:variable name="measurement-collection">
						<xsl:choose>
							<xsl:when
								test="($sheetVersion='4.00_ICCD0' or $sheetVersion='4.00') and ./MISP">
								<xsl:value-of
									select="concat($NS, 'MeasurementCollection/', $itemURI, '-', arco-fn:urify(normalize-space(./MISP)))" />
							</xsl:when>
							<xsl:when
								test="($sheetVersion='4.00_ICCD0' or $sheetVersion='4.00') and not(./MISP)">
								<xsl:value-of
									select="concat($NS, 'MeasurementCollection/', $itemURI)" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of
									select="concat($NS, 'MeasurementCollection/', $itemURI, '-', position())" />
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:attribute name="rdf:about">
								<xsl:value-of select="$measurement-collection" />
							</xsl:attribute>
					<rdf:type
						rdf:resource="https://w3id.org/arco/ontology/denotative-description/MeasurementCollection" />
					<rdfs:label xml:lang="en">

						<xsl:choose>
							<xsl:when test="./MISP">
								<xsl:value-of
									select="concat('Measurements of cultural property ', $itemURI, ' ', normalize-space(./MISP))" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of
									select="concat('Measurements of cultural property ', $itemURI)" />
							</xsl:otherwise>
						</xsl:choose>
					</rdfs:label>

					<l0:name xml:lang="en">
						<xsl:choose>
							<xsl:when test="./MISP">
								<xsl:value-of
									select="concat('Measurements of cultural property ', $itemURI, ' ', normalize-space(./MISP))" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of
									select="concat('Measurements of cultural property ', $itemURI)" />
							</xsl:otherwise>
						</xsl:choose>
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:choose>
							<xsl:when test="./MISP">
								<xsl:value-of
									select="concat('Misure del bene culturale ', $itemURI, ' ', normalize-space(./MISP))" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of
									select="concat('Misure del bene culturale ', $itemURI)" />
							</xsl:otherwise>
						</xsl:choose>
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:choose>
							<xsl:when test="./MISP">
								<xsl:value-of
									select="concat('Misure del bene culturale ', $itemURI, ' ', normalize-space(./MISP))" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of
									select="concat('Misure del bene culturale ', $itemURI)" />
							</xsl:otherwise>
						</xsl:choose>
					</l0:name>
					<xsl:if test="./MIST">
						<arco-dd:validity>
							<xsl:value-of select="normalize-space(./MIST)" />
						</arco-dd:validity>
					</xsl:if>
					<xsl:if test="./MISV and not($sheetType='VeAC')">
						<arco-core:note>
							<xsl:value-of select="normalize-space(./MISV)" />
						</arco-core:note>
					</xsl:if>
					<xsl:choose>
						<xsl:when
							test="not($sheetVersion='4.00_ICCD0' or $sheetVersion='4.00')">
							<xsl:if test="./MISV and $sheetType='VeAC'">
								<arco-dd:hasMeasurement>
									<xsl:attribute name="rdf:resource">
												<xsl:value-of
										select="concat($NS, 'Measurement/', $itemURI, '-', position(), '-waist-circumference')" />
											</xsl:attribute>
								</arco-dd:hasMeasurement>
							</xsl:if>
							<xsl:if test="./MISF">
								<arco-dd:hasMeasurement>
									<xsl:attribute name="rdf:resource">
												<xsl:value-of
										select="concat($NS, 'Measurement/', $itemURI, '-', position(), '-hip-circumference')" />
											</xsl:attribute>
								</arco-dd:hasMeasurement>
							</xsl:if>
							<xsl:if test="./MISO and $sheetType='VeAC'">
								<arco-dd:hasMeasurement>
									<xsl:attribute name="rdf:resource">
												<xsl:value-of
										select="concat($NS, 'Measurement/', $itemURI, '-', position(), '-edge-circumference')" />
											</xsl:attribute>
								</arco-dd:hasMeasurement>
							</xsl:if>
							<xsl:if test="./MISL">
								<arco-dd:hasMeasurement>
									<xsl:attribute name="rdf:resource">
												<xsl:value-of
										select="concat($NS, 'Measurement/', $itemURI, '-', position(), '-width')" />
											</xsl:attribute>
								</arco-dd:hasMeasurement>
							</xsl:if>
							<xsl:if test="./MISD and not($sheetType='VeAC')">
								<arco-dd:hasMeasurement>
									<xsl:attribute name="rdf:resource">
												<xsl:value-of
										select="concat($NS, 'Measurement/', $itemURI, '-', position(), '-diameter')" />
											</xsl:attribute>
								</arco-dd:hasMeasurement>
							</xsl:if>
							<!-- new -->
							<xsl:if test="./MISD and $sheetType='VeAC'">
								<arco-dd:hasMeasurement>
									<xsl:attribute name="rdf:resource">
												<xsl:value-of
										select="concat($NS, 'Measurement/', $itemURI, '-', position(), '-back-total-length')" />
											</xsl:attribute>
								</arco-dd:hasMeasurement>
							</xsl:if>
							<!-- new -->
							<xsl:if test="./MISS and not($sheetType='VeAC')">
								<arco-dd:hasMeasurement>
									<xsl:attribute name="rdf:resource">
												<xsl:value-of
										select="concat($NS, 'Measurement/', $itemURI, '-', position(), '-thickness')" />
											</xsl:attribute>
								</arco-dd:hasMeasurement>
							</xsl:if>
							<!-- new -->
							<xsl:if test="./MISS and $sheetType='VeAC'">
								<arco-dd:hasMeasurement>
									<xsl:attribute name="rdf:resource">
												<xsl:value-of
										select="concat($NS, 'Measurement/', $itemURI, '-', position(), '-back-width')" />
											</xsl:attribute>
								</arco-dd:hasMeasurement>
							</xsl:if>
							<xsl:if test="./MISA">
								<arco-dd:hasMeasurement>
									<xsl:attribute name="rdf:resource">
												<xsl:value-of
										select="concat($NS, 'Measurement/', $itemURI, '-', position(), '-height')" />
											</xsl:attribute>
								</arco-dd:hasMeasurement>
							</xsl:if>
							<xsl:if test="./MISP and not($sheetType='VeAC')">
								<arco-dd:hasMeasurement>
									<xsl:attribute name="rdf:resource">
												<xsl:value-of
										select="concat($NS, 'Measurement/', $itemURI, '-', position(), '-depth')" />
											</xsl:attribute>
								</arco-dd:hasMeasurement>
							</xsl:if>
							<!-- new -->
							<xsl:if test="./MISP and $sheetType='VeAC'">
								<arco-dd:hasMeasurement>
									<xsl:attribute name="rdf:resource">
												<xsl:value-of
										select="concat($NS, 'Measurement/', $itemURI, '-', position(), '-chest-circumference')" />
											</xsl:attribute>
								</arco-dd:hasMeasurement>
							</xsl:if>
							<xsl:if test="./MISG">
								<arco-dd:hasMeasurement>
									<xsl:attribute name="rdf:resource">
												<xsl:value-of
										select="concat($NS, 'Measurement/', $itemURI, '-', position(), '-weight')" />
											</xsl:attribute>
								</arco-dd:hasMeasurement>
							</xsl:if>
							<!-- new -->
							<xsl:if test="./MISN">
								<arco-dd:hasMeasurement>
									<xsl:attribute name="rdf:resource">
												<xsl:value-of
										select="concat($NS, 'Measurement/', $itemURI, '-', position(), '-length')" />
											</xsl:attribute>
								</arco-dd:hasMeasurement>
							</xsl:if>
							<!-- new -->
							<xsl:if test="./MISR">
								<arco-dd:hasMeasurement>
									<xsl:attribute name="rdf:resource">
												<xsl:value-of
										select="concat($NS, 'Measurement/', $itemURI, '-', position(), '-front-total-length')" />
											</xsl:attribute>
								</arco-dd:hasMeasurement>
							</xsl:if>
						</xsl:when>
						<xsl:otherwise>
							<arco-dd:hasMeasurement>
								<xsl:attribute name="rdf:resource">
											<xsl:value-of
									select="concat($NS, 'Measurement/', $itemURI, '-', position(), '-', arco-fn:uncamelize(arco-fn:map-measure(lower-case(./MISZ))))" />
										</xsl:attribute>
							</arco-dd:hasMeasurement>
						</xsl:otherwise>
					</xsl:choose>
				</rdf:Description>

				<xsl:variable name="parent-id" select="position()" />
				<xsl:for-each select="./*">
					<xsl:variable name="tag-name" select="name(.)" />

					<xsl:variable name="measurement-type">
						<xsl:choose>
							<xsl:when
								test="not($sheetVersion='4.00_ICCD0' or $sheetVersion='4.00')">
								<xsl:choose>
									<xsl:when
										test="$tag-name='MISV' and $sheetType='VeAC'">
										<xsl:value-of select="'WaistCircumference'" />
									</xsl:when>
									<xsl:when test="$tag-name='MISF'">
										<xsl:value-of select="'HipCircumference'" />
									</xsl:when>
									<xsl:when
										test="$tag-name='MISO' and $sheetType='VeAC'">
										<xsl:value-of select="'EdgeCircumference'" />
									</xsl:when>
									<xsl:when test="$tag-name='MISL'">
										<xsl:value-of select="'Width'" />
									</xsl:when>
									<xsl:when
										test="$tag-name='MISD' and not($sheetType='VeAC')">
										<xsl:value-of select="'Diameter'" />
									</xsl:when>
									<xsl:when
										test="$tag-name='MISD' and $sheetType='VeAC'">
										<xsl:value-of select="'BackTotalLength'" />
									</xsl:when>
									<xsl:when test="$tag-name='MISA'">
										<xsl:value-of select="'Height'" />
									</xsl:when>
									<xsl:when
										test="$tag-name='MISP' and not($sheetType='VeAC')">
										<xsl:value-of select="'Depth'" />
									</xsl:when>
									<xsl:when
										test="$tag-name='MISP' and $sheetType='VeAC'">
										<xsl:value-of select="'ChestCircumference'" />
									</xsl:when>
									<xsl:when
										test="$tag-name='MISS' and not($sheetType='VeAC')">
										<xsl:value-of select="'Thickness'" />
									</xsl:when>
									<xsl:when
										test="$tag-name='MISS' and $sheetType='VeAC'">
										<xsl:value-of select="'BackWidth'" />
									</xsl:when>
									<xsl:when test="$tag-name='MISG'">
										<xsl:value-of select="'Weight'" />
									</xsl:when>
									<xsl:when test="$tag-name='MISR'">
										<xsl:value-of select="'FrontTotalLength'" />
									</xsl:when>
									<xsl:when test="$tag-name='MISN'">
										<xsl:value-of select="'Length'" />
									</xsl:when>
								</xsl:choose>
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of
									select="arco-fn:map-measure(lower-case(../MISZ))" />
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>

					<xsl:if test="$measurement-type != ''">
						<rdf:Description>
							<xsl:attribute name="rdf:about"
								select="concat($NS, 'Measurement/', $itemURI, '-', $parent-id, '-', arco-fn:uncamelize($measurement-type))" />
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/denotative-description/Measurement" />

							<xsl:variable name="mu-value">
								<xsl:choose>
									<xsl:when
										test="not($sheetVersion='4.00_ICCD0' or $sheetVersion='4.00')">
										<xsl:choose>
											<xsl:when
												test="$tag-name='MISV' and $sheetType='VeAC'">
												<xsl:value-of select="normalize-space(.)" />
											</xsl:when>
											<xsl:when test="$tag-name='MISF'">
												<xsl:value-of select="normalize-space(.)" />
											</xsl:when>
											<xsl:when
												test="$tag-name='MISO' and $sheetType='VeAC'">
												<xsl:value-of select="normalize-space(.)" />
											</xsl:when>
											<xsl:when test="$tag-name='MISL'">
												<xsl:value-of select="normalize-space(.)" />
											</xsl:when>
											<xsl:when test="$tag-name='MISD'">
												<xsl:value-of select="normalize-space(.)" />
											</xsl:when>
											<xsl:when test="$tag-name='MISA'">
												<xsl:value-of select="normalize-space(.)" />
											</xsl:when>
											<xsl:when test="$tag-name='MISP'">
												<xsl:value-of select="normalize-space(.)" />
											</xsl:when>
											<xsl:when test="$tag-name='MISG'">
												<xsl:value-of select="normalize-space(.)" />
											</xsl:when>
											<xsl:when test="$tag-name='MISN'">
												<xsl:value-of select="normalize-space(.)" />
											</xsl:when>
											<xsl:when test="$tag-name='MISS'">
												<xsl:value-of select="normalize-space(.)" />
											</xsl:when>
											<xsl:when test="$tag-name='MISR'">
												<xsl:value-of select="normalize-space(.)" />
											</xsl:when>
										</xsl:choose>
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="normalize-space(../MISM)" />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>

							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Measurement of cultural property ', $itemURI, ': ', $mu-value, normalize-space(../MISU))" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Measurement of cultural property ', $itemURI, ': ', $mu-value, normalize-space(../MISU))" />
							</l0:name>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Misura del bene culturale ', $itemURI, ': ', $mu-value, normalize-space(../MISU))" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Misura del bene culturale ', $itemURI, ': ', $mu-value, normalize-space(../MISU))" />
							</l0:name>

							<arco-dd:hasMeasurementType>
								<xsl:attribute name="rdf:resource"
									select="concat('https://w3id.org/arco/ontology/denotative-description/', $measurement-type)" />
							</arco-dd:hasMeasurementType>
							<arco-dd:hasValue>
								<xsl:choose>
									<xsl:when
										test="not($sheetVersion='4.00_ICCD0' or $sheetVersion='4.00')">
										<xsl:variable name="mu-value">
											<xsl:choose>
												<xsl:when
													test="$tag-name='MISV' and $sheetType='VeAC'">
													<xsl:value-of select="normalize-space(.)" />
												</xsl:when>
												<xsl:when test="$tag-name='MISF'">
													<xsl:value-of select="normalize-space(.)" />
												</xsl:when>
												<xsl:when
													test="$tag-name='MISO' and $sheetType='VeAC'">
													<xsl:value-of select="normalize-space(.)" />
												</xsl:when>
												<xsl:when test="$tag-name='MISL'">
													<xsl:value-of select="normalize-space(.)" />
												</xsl:when>
												<xsl:when test="$tag-name='MISD'">
													<xsl:value-of select="normalize-space(.)" />
												</xsl:when>
												<xsl:when test="$tag-name='MISA'">
													<xsl:value-of select="normalize-space(.)" />
												</xsl:when>
												<xsl:when test="$tag-name='MISP'">
													<xsl:value-of select="normalize-space(.)" />
												</xsl:when>
												<xsl:when test="$tag-name='MISG'">
													<xsl:value-of select="normalize-space(.)" />
												</xsl:when>
												<xsl:when test="$tag-name='MISN'">
													<xsl:value-of select="normalize-space(.)" />
												</xsl:when>
												<xsl:when test="$tag-name='MISS'">
													<xsl:value-of select="normalize-space(.)" />
												</xsl:when>
												<xsl:when test="$tag-name='MISR'">
													<xsl:value-of select="normalize-space(.)" />
												</xsl:when>
											</xsl:choose>
										</xsl:variable>
										<xsl:attribute name="rdf:resource"
											select="concat($NS, 'Value/', $itemURI, '-', $parent-id, '-', arco-fn:uncamelize($measurement-type), '-', arco-fn:urify($mu-value))" />
									</xsl:when>
									<xsl:otherwise>
										<xsl:attribute name="rdf:resource"
											select="concat($NS, 'Value/', $itemURI, '-', $parent-id, '-', arco-fn:uncamelize($measurement-type), '-', arco-fn:urify(normalize-space(../MISM)))" />
									</xsl:otherwise>
								</xsl:choose>

							</arco-dd:hasValue>
						</rdf:Description>

						<rdf:Description>
							<xsl:variable name="mu-value">
								<xsl:choose>
									<xsl:when
										test="not($sheetVersion='4.00_ICCD0' or $sheetVersion='4.00')">
										<xsl:choose>
											<xsl:when
												test="$tag-name='MISV' and $sheetType='VeAC'">
												<xsl:value-of select="normalize-space(.)" />
											</xsl:when>
											<xsl:when test="$tag-name='MISF'">
												<xsl:value-of select="normalize-space(.)" />
											</xsl:when>
											<xsl:when
												test="$tag-name='MISO' and $sheetType='VeAC'">
												<xsl:value-of select="normalize-space(.)" />
											</xsl:when>
											<xsl:when test="$tag-name='MISL'">
												<xsl:value-of select="normalize-space(.)" />
											</xsl:when>
											<xsl:when test="$tag-name='MISD'">
												<xsl:value-of select="normalize-space(.)" />
											</xsl:when>
											<xsl:when test="$tag-name='MISA'">
												<xsl:value-of select="normalize-space(.)" />
											</xsl:when>
											<xsl:when test="$tag-name='MISP'">
												<xsl:value-of select="normalize-space(.)" />
											</xsl:when>
											<xsl:when test="$tag-name='MISG'">
												<xsl:value-of select="normalize-space(.)" />
											</xsl:when>
											<xsl:when test="$tag-name='MISN'">
												<xsl:value-of select="normalize-space(.)" />
											</xsl:when>
											<xsl:when test="$tag-name='MISS'">
												<xsl:value-of select="normalize-space(.)" />
											</xsl:when>
											<xsl:when test="$tag-name='MISR'">
												<xsl:value-of select="normalize-space(.)" />
											</xsl:when>
										</xsl:choose>
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="normalize-space(../MISM)" />
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:attribute name="rdf:about"
								select="concat($NS, 'Value/', $itemURI, '-', $parent-id, '-', arco-fn:uncamelize($measurement-type), '-', arco-fn:urify($mu-value))" />
							<rdf:type
								rdf:resource="https://w3id.org/italia/onto/MU/Value" />
							<mu:value>
								<xsl:value-of select="$mu-value" />
							</mu:value>
							<rdfs:label xml:lang="en">
								<xsl:value-of select="$mu-value" />
							</rdfs:label>
							<rdfs:label xml:lang="it">
								<xsl:value-of select="$mu-value" />
							</rdfs:label>
							<xsl:choose>
								<xsl:when test="../MISU">
									<mu:hasMeasurementUnit>
										<xsl:attribute name="rdf:resource">
													<xsl:value-of
											select="concat($NS, 'MeasurementUnit/', arco-fn:urify(normalize-space(../MISU)))" />
												</xsl:attribute>
									</mu:hasMeasurementUnit>
								</xsl:when>
								<xsl:when test="$sheetType='VeAC'">
									<mu:hasMeasurementUnit>
										<xsl:attribute name="rdf:resource">
													<xsl:value-of
											select="concat($NS, 'MeasurementUnit/cm')" />
												</xsl:attribute>
									</mu:hasMeasurementUnit>
								</xsl:when>
							</xsl:choose>
						</rdf:Description>

						<xsl:if test="../MISU">
							<rdf:Description>
								<xsl:attribute name="rdf:about"
									select="concat($NS, 'MeasurementUnit/', arco-fn:urify(normalize-space(../MISU)))" />
								<rdf:type
									rdf:resource="https://w3id.org/italia/onto/MU/MeasurementUnit" />
								<rdfs:label>
									<xsl:value-of select="normalize-space(../MISU)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(../MISU)" />
								</l0:name>
							</rdf:Description>
						</xsl:if>
					</xsl:if>

				</xsl:for-each>
			</xsl:for-each>

			<!-- measurement collection for MI version 2.00 -->
			<xsl:for-each select="record/metadata/schede/MI/MT/MIF">
				<rdf:Description>
					<xsl:variable name="measurement-collection">
						<xsl:value-of
							select="concat($NS, 'MeasurementCollection/', $itemURI, '-', position())" />
					</xsl:variable>
					<xsl:attribute name="rdf:about">
								<xsl:value-of select="$measurement-collection" />
							</xsl:attribute>
					<rdf:type
						rdf:resource="https://w3id.org/arco/ontology/denotative-description/MeasurementCollection" />
					<rdfs:label xml:lang="en">
						<xsl:value-of
							select="concat('Measurements of cultural property ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="en">
						<xsl:value-of
							select="concat('Measurements of cultural property ', $itemURI)" />
					</l0:name>
					<rdfs:label xml:lang="it">
						<xsl:value-of
							select="concat('Misure del bene culturale ', $itemURI)" />
					</rdfs:label>
					<l0:name xml:lang="it">
						<xsl:value-of
							select="concat('Misure del bene culturale ', $itemURI)" />
					</l0:name>
					<xsl:if test="./MIFV">
						<arco-dd:validity>
							<xsl:value-of select="normalize-space(./MIFV)" />
						</arco-dd:validity>
					</xsl:if>
					<xsl:if test="./MIFL">
						<arco-dd:hasMeasurement>
							<xsl:attribute name="rdf:resource">
												<xsl:value-of
								select="concat($NS, 'Measurement/', $itemURI, '-', position(), '-width')" />
											</xsl:attribute>
						</arco-dd:hasMeasurement>
					</xsl:if>
					<xsl:if test="./MIFD">
						<arco-dd:hasMeasurement>
							<xsl:attribute name="rdf:resource">
												<xsl:value-of
								select="concat($NS, 'Measurement/', $itemURI, '-', position(), '-diameter')" />
											</xsl:attribute>
						</arco-dd:hasMeasurement>
					</xsl:if>
					<xsl:if test="./MIFA">
						<arco-dd:hasMeasurement>
							<xsl:attribute name="rdf:resource">
												<xsl:value-of
								select="concat($NS, 'Measurement/', $itemURI, '-', position(), '-height')" />
											</xsl:attribute>
						</arco-dd:hasMeasurement>
					</xsl:if>
				</rdf:Description>

				<xsl:variable name="parent-id" select="position()" />
				<xsl:for-each select="./*">
					<xsl:variable name="tag-name" select="name(.)" />

					<xsl:variable name="measurement-type">
						<xsl:choose>
							<xsl:when test="$tag-name='MIFL'">
								<xsl:value-of select="'Width'" />
							</xsl:when>
							<xsl:when test="$tag-name='MIFD'">
								<xsl:value-of select="'Diameter'" />
							</xsl:when>
							<xsl:when test="$tag-name='MIFA'">
								<xsl:value-of select="'Height'" />
							</xsl:when>
						</xsl:choose>
					</xsl:variable>

					<xsl:if test="$measurement-type != ''">
						<rdf:Description>
							<xsl:attribute name="rdf:about"
								select="concat($NS, 'Measurement/', $itemURI, '-', $parent-id, '-', arco-fn:uncamelize($measurement-type))" />
							<rdf:type
								rdf:resource="https://w3id.org/arco/ontology/denotative-description/Measurement" />

							<xsl:variable name="mu-value">
								<xsl:choose>
									<xsl:when test="$tag-name='MIFL'">
										<xsl:value-of select="normalize-space(.)" />
									</xsl:when>
									<xsl:when test="$tag-name='MIFD'">
										<xsl:value-of select="normalize-space(.)" />
									</xsl:when>
									<xsl:when test="$tag-name='MIFA'">
										<xsl:value-of select="normalize-space(.)" />
									</xsl:when>
								</xsl:choose>
							</xsl:variable>

							<rdfs:label xml:lang="en">
								<xsl:value-of
									select="concat('Measurement of cultural property ', $itemURI, ': ', $mu-value, normalize-space(../MIFU))" />
							</rdfs:label>
							<l0:name xml:lang="en">
								<xsl:value-of
									select="concat('Measurement of cultural property ', $itemURI, ': ', $mu-value, normalize-space(../MIFU))" />
							</l0:name>
							<rdfs:label xml:lang="it">
								<xsl:value-of
									select="concat('Misura del bene culturale ', $itemURI, ': ', $mu-value, normalize-space(../MIFU))" />
							</rdfs:label>
							<l0:name xml:lang="it">
								<xsl:value-of
									select="concat('Misura del bene culturale ', $itemURI, ': ', $mu-value, normalize-space(../MIFU))" />
							</l0:name>

							<arco-dd:hasMeasurementType>
								<xsl:attribute name="rdf:resource"
									select="concat('https://w3id.org/arco/ontology/denotative-description/', $measurement-type)" />
							</arco-dd:hasMeasurementType>
							<arco-dd:hasValue>
								<xsl:variable name="mu-value">
									<xsl:choose>
										<xsl:when test="$tag-name='MIFL'">
											<xsl:value-of select="normalize-space(.)" />
										</xsl:when>
										<xsl:when test="$tag-name='MIFD'">
											<xsl:value-of select="normalize-space(.)" />
										</xsl:when>
										<xsl:when test="$tag-name='MIFA'">
											<xsl:value-of select="normalize-space(.)" />
										</xsl:when>
									</xsl:choose>
								</xsl:variable>
								<xsl:attribute name="rdf:resource"
									select="concat($NS, 'Value/', $itemURI, '-', $parent-id, '-', arco-fn:uncamelize($measurement-type), '-', arco-fn:urify($mu-value))" />

							</arco-dd:hasValue>
						</rdf:Description>

						<rdf:Description>
							<xsl:variable name="mu-value">
								<xsl:choose>
									<xsl:when test="$tag-name='MIFL'">
										<xsl:value-of select="normalize-space(.)" />
									</xsl:when>
									<xsl:when test="$tag-name='MIFD'">
										<xsl:value-of select="normalize-space(.)" />
									</xsl:when>
									<xsl:when test="$tag-name='MIFA'">
										<xsl:value-of select="normalize-space(.)" />
									</xsl:when>
								</xsl:choose>
							</xsl:variable>
							<xsl:attribute name="rdf:about"
								select="concat($NS, 'Value/', $itemURI, '-', $parent-id, '-', arco-fn:uncamelize($measurement-type), '-', arco-fn:urify($mu-value))" />
							<rdf:type
								rdf:resource="https://w3id.org/italia/onto/MU/Value" />
							<mu:value>
								<xsl:value-of select="$mu-value" />
							</mu:value>
							<rdfs:label xml:lang="en">
								<xsl:value-of select="$mu-value" />
							</rdfs:label>
							<rdfs:label xml:lang="it">
								<xsl:value-of select="$mu-value" />
							</rdfs:label>
							<xsl:if test="../MIFU">
								<mu:hasMeasurementUnit>
									<xsl:attribute name="rdf:resource">
													<xsl:value-of
										select="concat($NS, 'MeasurementUnit/', arco-fn:urify(normalize-space(../MIFU)))" />
												</xsl:attribute>
								</mu:hasMeasurementUnit>
							</xsl:if>
						</rdf:Description>

						<xsl:if test="../MIFU">
							<rdf:Description>
								<xsl:attribute name="rdf:about"
									select="concat($NS, 'MeasurementUnit/', arco-fn:urify(normalize-space(../MIFU)))" />
								<rdf:type
									rdf:resource="https://w3id.org/italia/onto/MU/MeasurementUnit" />
								<rdfs:label>
									<xsl:value-of select="normalize-space(../MIFU)" />
								</rdfs:label>
								<l0:name>
									<xsl:value-of select="normalize-space(../MIFU)" />
								</l0:name>
							</rdf:Description>
						</xsl:if>
					</xsl:if>

				</xsl:for-each>
			</xsl:for-each>

						<!-- Printing Plates Series -->
			<xsl:if test="$sheetType='MI' or 'S'">
			<xsl:if test="record/metadata/schede/*/OG/SGT/SGTS">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
						<xsl:value-of select="concat($NS, 'PrintingPlatesSeries/', $itemURI, '-', arco-fn:urify(normalize-space(record/metadata/schede/*/OG/SGT/SGTS)))" />
					</xsl:attribute>
					<rdf:type rdf:resource="https://w3id.org/arco/ontology/context-description/PrintingPlatesSeries" />
					<rdfs:label>
						<xsl:value-of select="normalize-space(record/metadata/schede/*/OG/SGT/SGTS)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of select="normalize-space(record/metadata/schede/*/OG/SGT/SGTS)" />
					</l0:name>
				</rdf:Description>
			</xsl:if>
			</xsl:if>
							<!-- Cataloguing level as individual -->
			<xsl:for-each select="record/metadata/schede/*/CD/LIR">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
						<xsl:value-of select="concat('https://w3id.org/arco/ontology/catalogue/', upper-case(arco-fn:urify(.)))" />
					</xsl:attribute>
					<rdf:type rdf:resource="https://w3id.org/arco/ontology/catalogue/CataloguingLevel" />
					<rdfs:label>
						<xsl:value-of select="normalize-space(.)" />
					</rdfs:label>
					<l0:name>
						<xsl:value-of select="normalize-space(.)" />
					</l0:name>
				</rdf:Description>
			</xsl:for-each>
				
					<!-- Deprecated URI -->
			<xsl:for-each select="record/metadata/schede/*/AU/AUT">
				<xsl:if test="./AUTA and (not(starts-with(lower-case(normalize-space(./AUTA)), 'nr')) and not(starts-with(lower-case(normalize-space(./AUTA)), 'n.r')))">
				<rdf:Description>
					<xsl:attribute name="rdf:about">
						<xsl:value-of select="concat($NS, 'Agent/', arco-fn:arcofy(./AUTN))" />
					</xsl:attribute>
					<owl:deprecated rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean">true</owl:deprecated>
				</rdf:Description>
				</xsl:if>
			</xsl:for-each>

			<!-- xsl:apply-templates select="record/metadata/schede/*/MT/MIS" / -->
		</rdf:RDF>
	</xsl:template>
</xsl:stylesheet>